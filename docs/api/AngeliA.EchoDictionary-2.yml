### YamlMime:ManagedReference
items:
- uid: AngeliA.EchoDictionary`2
  commentId: T:AngeliA.EchoDictionary`2
  id: EchoDictionary`2
  parent: AngeliA
  children:
  - AngeliA.EchoDictionary`2.Add(`0,`1)
  - AngeliA.EchoDictionary`2.Clear
  - AngeliA.EchoDictionary`2.ContainsAny(`0,`1)
  - AngeliA.EchoDictionary`2.ContainsKey(`0)
  - AngeliA.EchoDictionary`2.ContainsPair(`0,`1)
  - AngeliA.EchoDictionary`2.ContainsValue(`1)
  - AngeliA.EchoDictionary`2.Count
  - AngeliA.EchoDictionary`2.GetEnumerator
  - AngeliA.EchoDictionary`2.GetKey(`1)
  - AngeliA.EchoDictionary`2.GetValue(`0)
  - AngeliA.EchoDictionary`2.Item(`0)
  - AngeliA.EchoDictionary`2.Item(`1)
  - AngeliA.EchoDictionary`2.Remove(`0)
  - AngeliA.EchoDictionary`2.Remove(`0,`1@)
  - AngeliA.EchoDictionary`2.Remove(`1)
  - AngeliA.EchoDictionary`2.Remove(`1,`0@)
  - AngeliA.EchoDictionary`2.SetValue(`0,`1)
  - AngeliA.EchoDictionary`2.TryAdd(`0,`1)
  - AngeliA.EchoDictionary`2.TryGetKey(`1,`0@)
  - AngeliA.EchoDictionary`2.TryGetValue(`0,`1@)
  langs:
  - csharp
  - vb
  name: EchoDictionary<TKey, TValue>
  nameWithType: EchoDictionary<TKey, TValue>
  fullName: AngeliA.EchoDictionary<TKey, TValue>
  type: Class
  source:
    remote:
      path: AngeliA Framework/src/Common/EchoDictionary.cs
      branch: main
      repo: https://github.com/Mo-enen/AngeliA.git
    id: EchoDictionary
    path: ../../AngeliA/AngeliA Framework/src/Common/EchoDictionary.cs
    startLine: 5
  assemblies:
  - AngeliA Framework
  namespace: AngeliA
  syntax:
    content: 'public class EchoDictionary<TKey, TValue> : IEnumerable<KeyValuePair<TKey, TValue>>, IEnumerable'
    typeParameters:
    - id: TKey
    - id: TValue
    content.vb: Public Class EchoDictionary(Of TKey, TValue) Implements IEnumerable(Of KeyValuePair(Of TKey, TValue)), IEnumerable
  inheritance:
  - System.Object
  implements:
  - System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{{TKey},{TValue}}}
  - System.Collections.IEnumerable
  inheritedMembers:
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
  extensionMethods:
  - System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{`0,`1}}.AngeliA.Extension.JoinArray``1(System.Func{System.Collections.Generic.KeyValuePair{{TKey},{TValue}},System.String},System.Char)
  - System.Object.AngeliA.Extension.ForAllFields``1(System.Reflection.BindingFlags,System.Boolean)
  - System.Object.AngeliA.Extension.ForAllProperties``1
  nameWithType.vb: EchoDictionary(Of TKey, TValue)
  fullName.vb: AngeliA.EchoDictionary(Of TKey, TValue)
  name.vb: EchoDictionary(Of TKey, TValue)
- uid: AngeliA.EchoDictionary`2.Item(`0)
  commentId: P:AngeliA.EchoDictionary`2.Item(`0)
  id: Item(`0)
  parent: AngeliA.EchoDictionary`2
  langs:
  - csharp
  - vb
  name: this[TKey]
  nameWithType: EchoDictionary<TKey, TValue>.this[TKey]
  fullName: AngeliA.EchoDictionary<TKey, TValue>.this[TKey]
  type: Property
  source:
    remote:
      path: AngeliA Framework/src/Common/EchoDictionary.cs
      branch: main
      repo: https://github.com/Mo-enen/AngeliA.git
    id: this[]
    path: ../../AngeliA/AngeliA Framework/src/Common/EchoDictionary.cs
    startLine: 14
  assemblies:
  - AngeliA Framework
  namespace: AngeliA
  syntax:
    content: public TValue this[TKey key] { get; set; }
    parameters:
    - id: key
      type: '{TKey}'
    return:
      type: '{TValue}'
    content.vb: Public Default Property this[](key As TKey) As TValue
  overload: AngeliA.EchoDictionary`2.Item*
  nameWithType.vb: EchoDictionary(Of TKey, TValue).this[](TKey)
  fullName.vb: AngeliA.EchoDictionary(Of TKey, TValue).this[](TKey)
  name.vb: this[](TKey)
- uid: AngeliA.EchoDictionary`2.Item(`1)
  commentId: P:AngeliA.EchoDictionary`2.Item(`1)
  id: Item(`1)
  parent: AngeliA.EchoDictionary`2
  langs:
  - csharp
  - vb
  name: this[TValue]
  nameWithType: EchoDictionary<TKey, TValue>.this[TValue]
  fullName: AngeliA.EchoDictionary<TKey, TValue>.this[TValue]
  type: Property
  source:
    remote:
      path: AngeliA Framework/src/Common/EchoDictionary.cs
      branch: main
      repo: https://github.com/Mo-enen/AngeliA.git
    id: this[]
    path: ../../AngeliA/AngeliA Framework/src/Common/EchoDictionary.cs
    startLine: 18
  assemblies:
  - AngeliA Framework
  namespace: AngeliA
  syntax:
    content: public TKey this[TValue tValue] { get; set; }
    parameters:
    - id: tValue
      type: '{TValue}'
    return:
      type: '{TKey}'
    content.vb: Public Default Property this[](tValue As TValue) As TKey
  overload: AngeliA.EchoDictionary`2.Item*
  nameWithType.vb: EchoDictionary(Of TKey, TValue).this[](TValue)
  fullName.vb: AngeliA.EchoDictionary(Of TKey, TValue).this[](TValue)
  name.vb: this[](TValue)
- uid: AngeliA.EchoDictionary`2.Count
  commentId: P:AngeliA.EchoDictionary`2.Count
  id: Count
  parent: AngeliA.EchoDictionary`2
  langs:
  - csharp
  - vb
  name: Count
  nameWithType: EchoDictionary<TKey, TValue>.Count
  fullName: AngeliA.EchoDictionary<TKey, TValue>.Count
  type: Property
  source:
    remote:
      path: AngeliA Framework/src/Common/EchoDictionary.cs
      branch: main
      repo: https://github.com/Mo-enen/AngeliA.git
    id: Count
    path: ../../AngeliA/AngeliA Framework/src/Common/EchoDictionary.cs
    startLine: 22
  assemblies:
  - AngeliA Framework
  namespace: AngeliA
  syntax:
    content: public int Count { get; }
    parameters: []
    return:
      type: System.Int32
    content.vb: Public ReadOnly Property Count As Integer
  overload: AngeliA.EchoDictionary`2.Count*
  nameWithType.vb: EchoDictionary(Of TKey, TValue).Count
  fullName.vb: AngeliA.EchoDictionary(Of TKey, TValue).Count
- uid: AngeliA.EchoDictionary`2.TryAdd(`0,`1)
  commentId: M:AngeliA.EchoDictionary`2.TryAdd(`0,`1)
  id: TryAdd(`0,`1)
  parent: AngeliA.EchoDictionary`2
  langs:
  - csharp
  - vb
  name: TryAdd(TKey, TValue)
  nameWithType: EchoDictionary<TKey, TValue>.TryAdd(TKey, TValue)
  fullName: AngeliA.EchoDictionary<TKey, TValue>.TryAdd(TKey, TValue)
  type: Method
  source:
    remote:
      path: AngeliA Framework/src/Common/EchoDictionary.cs
      branch: main
      repo: https://github.com/Mo-enen/AngeliA.git
    id: TryAdd
    path: ../../AngeliA/AngeliA Framework/src/Common/EchoDictionary.cs
    startLine: 37
  assemblies:
  - AngeliA Framework
  namespace: AngeliA
  syntax:
    content: public bool TryAdd(TKey key, TValue value)
    parameters:
    - id: key
      type: '{TKey}'
    - id: value
      type: '{TValue}'
    return:
      type: System.Boolean
    content.vb: Public Function TryAdd(key As TKey, value As TValue) As Boolean
  overload: AngeliA.EchoDictionary`2.TryAdd*
  nameWithType.vb: EchoDictionary(Of TKey, TValue).TryAdd(TKey, TValue)
  fullName.vb: AngeliA.EchoDictionary(Of TKey, TValue).TryAdd(TKey, TValue)
- uid: AngeliA.EchoDictionary`2.Add(`0,`1)
  commentId: M:AngeliA.EchoDictionary`2.Add(`0,`1)
  id: Add(`0,`1)
  parent: AngeliA.EchoDictionary`2
  langs:
  - csharp
  - vb
  name: Add(TKey, TValue)
  nameWithType: EchoDictionary<TKey, TValue>.Add(TKey, TValue)
  fullName: AngeliA.EchoDictionary<TKey, TValue>.Add(TKey, TValue)
  type: Method
  source:
    remote:
      path: AngeliA Framework/src/Common/EchoDictionary.cs
      branch: main
      repo: https://github.com/Mo-enen/AngeliA.git
    id: Add
    path: ../../AngeliA/AngeliA Framework/src/Common/EchoDictionary.cs
    startLine: 43
  assemblies:
  - AngeliA Framework
  namespace: AngeliA
  syntax:
    content: public void Add(TKey key, TValue value)
    parameters:
    - id: key
      type: '{TKey}'
    - id: value
      type: '{TValue}'
    content.vb: Public Sub Add(key As TKey, value As TValue)
  overload: AngeliA.EchoDictionary`2.Add*
  nameWithType.vb: EchoDictionary(Of TKey, TValue).Add(TKey, TValue)
  fullName.vb: AngeliA.EchoDictionary(Of TKey, TValue).Add(TKey, TValue)
- uid: AngeliA.EchoDictionary`2.ContainsKey(`0)
  commentId: M:AngeliA.EchoDictionary`2.ContainsKey(`0)
  id: ContainsKey(`0)
  parent: AngeliA.EchoDictionary`2
  langs:
  - csharp
  - vb
  name: ContainsKey(TKey)
  nameWithType: EchoDictionary<TKey, TValue>.ContainsKey(TKey)
  fullName: AngeliA.EchoDictionary<TKey, TValue>.ContainsKey(TKey)
  type: Method
  source:
    remote:
      path: AngeliA Framework/src/Common/EchoDictionary.cs
      branch: main
      repo: https://github.com/Mo-enen/AngeliA.git
    id: ContainsKey
    path: ../../AngeliA/AngeliA Framework/src/Common/EchoDictionary.cs
    startLine: 51
  assemblies:
  - AngeliA Framework
  namespace: AngeliA
  syntax:
    content: public bool ContainsKey(TKey key)
    parameters:
    - id: key
      type: '{TKey}'
    return:
      type: System.Boolean
    content.vb: Public Function ContainsKey(key As TKey) As Boolean
  overload: AngeliA.EchoDictionary`2.ContainsKey*
  nameWithType.vb: EchoDictionary(Of TKey, TValue).ContainsKey(TKey)
  fullName.vb: AngeliA.EchoDictionary(Of TKey, TValue).ContainsKey(TKey)
- uid: AngeliA.EchoDictionary`2.ContainsValue(`1)
  commentId: M:AngeliA.EchoDictionary`2.ContainsValue(`1)
  id: ContainsValue(`1)
  parent: AngeliA.EchoDictionary`2
  langs:
  - csharp
  - vb
  name: ContainsValue(TValue)
  nameWithType: EchoDictionary<TKey, TValue>.ContainsValue(TValue)
  fullName: AngeliA.EchoDictionary<TKey, TValue>.ContainsValue(TValue)
  type: Method
  source:
    remote:
      path: AngeliA Framework/src/Common/EchoDictionary.cs
      branch: main
      repo: https://github.com/Mo-enen/AngeliA.git
    id: ContainsValue
    path: ../../AngeliA/AngeliA Framework/src/Common/EchoDictionary.cs
    startLine: 52
  assemblies:
  - AngeliA Framework
  namespace: AngeliA
  syntax:
    content: public bool ContainsValue(TValue value)
    parameters:
    - id: value
      type: '{TValue}'
    return:
      type: System.Boolean
    content.vb: Public Function ContainsValue(value As TValue) As Boolean
  overload: AngeliA.EchoDictionary`2.ContainsValue*
  nameWithType.vb: EchoDictionary(Of TKey, TValue).ContainsValue(TValue)
  fullName.vb: AngeliA.EchoDictionary(Of TKey, TValue).ContainsValue(TValue)
- uid: AngeliA.EchoDictionary`2.ContainsAny(`0,`1)
  commentId: M:AngeliA.EchoDictionary`2.ContainsAny(`0,`1)
  id: ContainsAny(`0,`1)
  parent: AngeliA.EchoDictionary`2
  langs:
  - csharp
  - vb
  name: ContainsAny(TKey, TValue)
  nameWithType: EchoDictionary<TKey, TValue>.ContainsAny(TKey, TValue)
  fullName: AngeliA.EchoDictionary<TKey, TValue>.ContainsAny(TKey, TValue)
  type: Method
  source:
    remote:
      path: AngeliA Framework/src/Common/EchoDictionary.cs
      branch: main
      repo: https://github.com/Mo-enen/AngeliA.git
    id: ContainsAny
    path: ../../AngeliA/AngeliA Framework/src/Common/EchoDictionary.cs
    startLine: 53
  assemblies:
  - AngeliA Framework
  namespace: AngeliA
  syntax:
    content: public bool ContainsAny(TKey key, TValue value)
    parameters:
    - id: key
      type: '{TKey}'
    - id: value
      type: '{TValue}'
    return:
      type: System.Boolean
    content.vb: Public Function ContainsAny(key As TKey, value As TValue) As Boolean
  overload: AngeliA.EchoDictionary`2.ContainsAny*
  nameWithType.vb: EchoDictionary(Of TKey, TValue).ContainsAny(TKey, TValue)
  fullName.vb: AngeliA.EchoDictionary(Of TKey, TValue).ContainsAny(TKey, TValue)
- uid: AngeliA.EchoDictionary`2.ContainsPair(`0,`1)
  commentId: M:AngeliA.EchoDictionary`2.ContainsPair(`0,`1)
  id: ContainsPair(`0,`1)
  parent: AngeliA.EchoDictionary`2
  langs:
  - csharp
  - vb
  name: ContainsPair(TKey, TValue)
  nameWithType: EchoDictionary<TKey, TValue>.ContainsPair(TKey, TValue)
  fullName: AngeliA.EchoDictionary<TKey, TValue>.ContainsPair(TKey, TValue)
  type: Method
  source:
    remote:
      path: AngeliA Framework/src/Common/EchoDictionary.cs
      branch: main
      repo: https://github.com/Mo-enen/AngeliA.git
    id: ContainsPair
    path: ../../AngeliA/AngeliA Framework/src/Common/EchoDictionary.cs
    startLine: 54
  assemblies:
  - AngeliA Framework
  namespace: AngeliA
  syntax:
    content: public bool ContainsPair(TKey key, TValue value)
    parameters:
    - id: key
      type: '{TKey}'
    - id: value
      type: '{TValue}'
    return:
      type: System.Boolean
    content.vb: Public Function ContainsPair(key As TKey, value As TValue) As Boolean
  overload: AngeliA.EchoDictionary`2.ContainsPair*
  nameWithType.vb: EchoDictionary(Of TKey, TValue).ContainsPair(TKey, TValue)
  fullName.vb: AngeliA.EchoDictionary(Of TKey, TValue).ContainsPair(TKey, TValue)
- uid: AngeliA.EchoDictionary`2.TryGetValue(`0,`1@)
  commentId: M:AngeliA.EchoDictionary`2.TryGetValue(`0,`1@)
  id: TryGetValue(`0,`1@)
  parent: AngeliA.EchoDictionary`2
  langs:
  - csharp
  - vb
  name: TryGetValue(TKey, out TValue)
  nameWithType: EchoDictionary<TKey, TValue>.TryGetValue(TKey, out TValue)
  fullName: AngeliA.EchoDictionary<TKey, TValue>.TryGetValue(TKey, out TValue)
  type: Method
  source:
    remote:
      path: AngeliA Framework/src/Common/EchoDictionary.cs
      branch: main
      repo: https://github.com/Mo-enen/AngeliA.git
    id: TryGetValue
    path: ../../AngeliA/AngeliA Framework/src/Common/EchoDictionary.cs
    startLine: 57
  assemblies:
  - AngeliA Framework
  namespace: AngeliA
  syntax:
    content: public bool TryGetValue(TKey key, out TValue value)
    parameters:
    - id: key
      type: '{TKey}'
    - id: value
      type: '{TValue}'
    return:
      type: System.Boolean
    content.vb: Public Function TryGetValue(key As TKey, value As TValue) As Boolean
  overload: AngeliA.EchoDictionary`2.TryGetValue*
  nameWithType.vb: EchoDictionary(Of TKey, TValue).TryGetValue(TKey, TValue)
  fullName.vb: AngeliA.EchoDictionary(Of TKey, TValue).TryGetValue(TKey, TValue)
  name.vb: TryGetValue(TKey, TValue)
- uid: AngeliA.EchoDictionary`2.TryGetKey(`1,`0@)
  commentId: M:AngeliA.EchoDictionary`2.TryGetKey(`1,`0@)
  id: TryGetKey(`1,`0@)
  parent: AngeliA.EchoDictionary`2
  langs:
  - csharp
  - vb
  name: TryGetKey(TValue, out TKey)
  nameWithType: EchoDictionary<TKey, TValue>.TryGetKey(TValue, out TKey)
  fullName: AngeliA.EchoDictionary<TKey, TValue>.TryGetKey(TValue, out TKey)
  type: Method
  source:
    remote:
      path: AngeliA Framework/src/Common/EchoDictionary.cs
      branch: main
      repo: https://github.com/Mo-enen/AngeliA.git
    id: TryGetKey
    path: ../../AngeliA/AngeliA Framework/src/Common/EchoDictionary.cs
    startLine: 58
  assemblies:
  - AngeliA Framework
  namespace: AngeliA
  syntax:
    content: public bool TryGetKey(TValue value, out TKey key)
    parameters:
    - id: value
      type: '{TValue}'
    - id: key
      type: '{TKey}'
    return:
      type: System.Boolean
    content.vb: Public Function TryGetKey(value As TValue, key As TKey) As Boolean
  overload: AngeliA.EchoDictionary`2.TryGetKey*
  nameWithType.vb: EchoDictionary(Of TKey, TValue).TryGetKey(TValue, TKey)
  fullName.vb: AngeliA.EchoDictionary(Of TKey, TValue).TryGetKey(TValue, TKey)
  name.vb: TryGetKey(TValue, TKey)
- uid: AngeliA.EchoDictionary`2.Remove(`0)
  commentId: M:AngeliA.EchoDictionary`2.Remove(`0)
  id: Remove(`0)
  parent: AngeliA.EchoDictionary`2
  langs:
  - csharp
  - vb
  name: Remove(TKey)
  nameWithType: EchoDictionary<TKey, TValue>.Remove(TKey)
  fullName: AngeliA.EchoDictionary<TKey, TValue>.Remove(TKey)
  type: Method
  source:
    remote:
      path: AngeliA Framework/src/Common/EchoDictionary.cs
      branch: main
      repo: https://github.com/Mo-enen/AngeliA.git
    id: Remove
    path: ../../AngeliA/AngeliA Framework/src/Common/EchoDictionary.cs
    startLine: 61
  assemblies:
  - AngeliA Framework
  namespace: AngeliA
  syntax:
    content: public bool Remove(TKey key)
    parameters:
    - id: key
      type: '{TKey}'
    return:
      type: System.Boolean
    content.vb: Public Function Remove(key As TKey) As Boolean
  overload: AngeliA.EchoDictionary`2.Remove*
  nameWithType.vb: EchoDictionary(Of TKey, TValue).Remove(TKey)
  fullName.vb: AngeliA.EchoDictionary(Of TKey, TValue).Remove(TKey)
- uid: AngeliA.EchoDictionary`2.Remove(`0,`1@)
  commentId: M:AngeliA.EchoDictionary`2.Remove(`0,`1@)
  id: Remove(`0,`1@)
  parent: AngeliA.EchoDictionary`2
  langs:
  - csharp
  - vb
  name: Remove(TKey, out TValue)
  nameWithType: EchoDictionary<TKey, TValue>.Remove(TKey, out TValue)
  fullName: AngeliA.EchoDictionary<TKey, TValue>.Remove(TKey, out TValue)
  type: Method
  source:
    remote:
      path: AngeliA Framework/src/Common/EchoDictionary.cs
      branch: main
      repo: https://github.com/Mo-enen/AngeliA.git
    id: Remove
    path: ../../AngeliA/AngeliA Framework/src/Common/EchoDictionary.cs
    startLine: 62
  assemblies:
  - AngeliA Framework
  namespace: AngeliA
  syntax:
    content: public bool Remove(TKey key, out TValue value)
    parameters:
    - id: key
      type: '{TKey}'
    - id: value
      type: '{TValue}'
    return:
      type: System.Boolean
    content.vb: Public Function Remove(key As TKey, value As TValue) As Boolean
  overload: AngeliA.EchoDictionary`2.Remove*
  nameWithType.vb: EchoDictionary(Of TKey, TValue).Remove(TKey, TValue)
  fullName.vb: AngeliA.EchoDictionary(Of TKey, TValue).Remove(TKey, TValue)
  name.vb: Remove(TKey, TValue)
- uid: AngeliA.EchoDictionary`2.Remove(`1)
  commentId: M:AngeliA.EchoDictionary`2.Remove(`1)
  id: Remove(`1)
  parent: AngeliA.EchoDictionary`2
  langs:
  - csharp
  - vb
  name: Remove(TValue)
  nameWithType: EchoDictionary<TKey, TValue>.Remove(TValue)
  fullName: AngeliA.EchoDictionary<TKey, TValue>.Remove(TValue)
  type: Method
  source:
    remote:
      path: AngeliA Framework/src/Common/EchoDictionary.cs
      branch: main
      repo: https://github.com/Mo-enen/AngeliA.git
    id: Remove
    path: ../../AngeliA/AngeliA Framework/src/Common/EchoDictionary.cs
    startLine: 69
  assemblies:
  - AngeliA Framework
  namespace: AngeliA
  syntax:
    content: public bool Remove(TValue value)
    parameters:
    - id: value
      type: '{TValue}'
    return:
      type: System.Boolean
    content.vb: Public Function Remove(value As TValue) As Boolean
  overload: AngeliA.EchoDictionary`2.Remove*
  nameWithType.vb: EchoDictionary(Of TKey, TValue).Remove(TValue)
  fullName.vb: AngeliA.EchoDictionary(Of TKey, TValue).Remove(TValue)
- uid: AngeliA.EchoDictionary`2.Remove(`1,`0@)
  commentId: M:AngeliA.EchoDictionary`2.Remove(`1,`0@)
  id: Remove(`1,`0@)
  parent: AngeliA.EchoDictionary`2
  langs:
  - csharp
  - vb
  name: Remove(TValue, out TKey)
  nameWithType: EchoDictionary<TKey, TValue>.Remove(TValue, out TKey)
  fullName: AngeliA.EchoDictionary<TKey, TValue>.Remove(TValue, out TKey)
  type: Method
  source:
    remote:
      path: AngeliA Framework/src/Common/EchoDictionary.cs
      branch: main
      repo: https://github.com/Mo-enen/AngeliA.git
    id: Remove
    path: ../../AngeliA/AngeliA Framework/src/Common/EchoDictionary.cs
    startLine: 70
  assemblies:
  - AngeliA Framework
  namespace: AngeliA
  syntax:
    content: public bool Remove(TValue value, out TKey key)
    parameters:
    - id: value
      type: '{TValue}'
    - id: key
      type: '{TKey}'
    return:
      type: System.Boolean
    content.vb: Public Function Remove(value As TValue, key As TKey) As Boolean
  overload: AngeliA.EchoDictionary`2.Remove*
  nameWithType.vb: EchoDictionary(Of TKey, TValue).Remove(TValue, TKey)
  fullName.vb: AngeliA.EchoDictionary(Of TKey, TValue).Remove(TValue, TKey)
  name.vb: Remove(TValue, TKey)
- uid: AngeliA.EchoDictionary`2.GetValue(`0)
  commentId: M:AngeliA.EchoDictionary`2.GetValue(`0)
  id: GetValue(`0)
  parent: AngeliA.EchoDictionary`2
  langs:
  - csharp
  - vb
  name: GetValue(TKey)
  nameWithType: EchoDictionary<TKey, TValue>.GetValue(TKey)
  fullName: AngeliA.EchoDictionary<TKey, TValue>.GetValue(TKey)
  type: Method
  source:
    remote:
      path: AngeliA Framework/src/Common/EchoDictionary.cs
      branch: main
      repo: https://github.com/Mo-enen/AngeliA.git
    id: GetValue
    path: ../../AngeliA/AngeliA Framework/src/Common/EchoDictionary.cs
    startLine: 79
  assemblies:
  - AngeliA Framework
  namespace: AngeliA
  syntax:
    content: public TValue GetValue(TKey key)
    parameters:
    - id: key
      type: '{TKey}'
    return:
      type: '{TValue}'
    content.vb: Public Function GetValue(key As TKey) As TValue
  overload: AngeliA.EchoDictionary`2.GetValue*
  nameWithType.vb: EchoDictionary(Of TKey, TValue).GetValue(TKey)
  fullName.vb: AngeliA.EchoDictionary(Of TKey, TValue).GetValue(TKey)
- uid: AngeliA.EchoDictionary`2.GetKey(`1)
  commentId: M:AngeliA.EchoDictionary`2.GetKey(`1)
  id: GetKey(`1)
  parent: AngeliA.EchoDictionary`2
  langs:
  - csharp
  - vb
  name: GetKey(TValue)
  nameWithType: EchoDictionary<TKey, TValue>.GetKey(TValue)
  fullName: AngeliA.EchoDictionary<TKey, TValue>.GetKey(TValue)
  type: Method
  source:
    remote:
      path: AngeliA Framework/src/Common/EchoDictionary.cs
      branch: main
      repo: https://github.com/Mo-enen/AngeliA.git
    id: GetKey
    path: ../../AngeliA/AngeliA Framework/src/Common/EchoDictionary.cs
    startLine: 80
  assemblies:
  - AngeliA Framework
  namespace: AngeliA
  syntax:
    content: public TKey GetKey(TValue value)
    parameters:
    - id: value
      type: '{TValue}'
    return:
      type: '{TKey}'
    content.vb: Public Function GetKey(value As TValue) As TKey
  overload: AngeliA.EchoDictionary`2.GetKey*
  nameWithType.vb: EchoDictionary(Of TKey, TValue).GetKey(TValue)
  fullName.vb: AngeliA.EchoDictionary(Of TKey, TValue).GetKey(TValue)
- uid: AngeliA.EchoDictionary`2.SetValue(`0,`1)
  commentId: M:AngeliA.EchoDictionary`2.SetValue(`0,`1)
  id: SetValue(`0,`1)
  parent: AngeliA.EchoDictionary`2
  langs:
  - csharp
  - vb
  name: SetValue(TKey, TValue)
  nameWithType: EchoDictionary<TKey, TValue>.SetValue(TKey, TValue)
  fullName: AngeliA.EchoDictionary<TKey, TValue>.SetValue(TKey, TValue)
  type: Method
  source:
    remote:
      path: AngeliA Framework/src/Common/EchoDictionary.cs
      branch: main
      repo: https://github.com/Mo-enen/AngeliA.git
    id: SetValue
    path: ../../AngeliA/AngeliA Framework/src/Common/EchoDictionary.cs
    startLine: 81
  assemblies:
  - AngeliA Framework
  namespace: AngeliA
  syntax:
    content: public void SetValue(TKey key, TValue value)
    parameters:
    - id: key
      type: '{TKey}'
    - id: value
      type: '{TValue}'
    content.vb: Public Sub SetValue(key As TKey, value As TValue)
  overload: AngeliA.EchoDictionary`2.SetValue*
  nameWithType.vb: EchoDictionary(Of TKey, TValue).SetValue(TKey, TValue)
  fullName.vb: AngeliA.EchoDictionary(Of TKey, TValue).SetValue(TKey, TValue)
- uid: AngeliA.EchoDictionary`2.Clear
  commentId: M:AngeliA.EchoDictionary`2.Clear
  id: Clear
  parent: AngeliA.EchoDictionary`2
  langs:
  - csharp
  - vb
  name: Clear()
  nameWithType: EchoDictionary<TKey, TValue>.Clear()
  fullName: AngeliA.EchoDictionary<TKey, TValue>.Clear()
  type: Method
  source:
    remote:
      path: AngeliA Framework/src/Common/EchoDictionary.cs
      branch: main
      repo: https://github.com/Mo-enen/AngeliA.git
    id: Clear
    path: ../../AngeliA/AngeliA Framework/src/Common/EchoDictionary.cs
    startLine: 94
  assemblies:
  - AngeliA Framework
  namespace: AngeliA
  syntax:
    content: public void Clear()
    content.vb: Public Sub Clear()
  overload: AngeliA.EchoDictionary`2.Clear*
  nameWithType.vb: EchoDictionary(Of TKey, TValue).Clear()
  fullName.vb: AngeliA.EchoDictionary(Of TKey, TValue).Clear()
- uid: AngeliA.EchoDictionary`2.GetEnumerator
  commentId: M:AngeliA.EchoDictionary`2.GetEnumerator
  id: GetEnumerator
  parent: AngeliA.EchoDictionary`2
  langs:
  - csharp
  - vb
  name: GetEnumerator()
  nameWithType: EchoDictionary<TKey, TValue>.GetEnumerator()
  fullName: AngeliA.EchoDictionary<TKey, TValue>.GetEnumerator()
  type: Method
  source:
    remote:
      path: AngeliA Framework/src/Common/EchoDictionary.cs
      branch: main
      repo: https://github.com/Mo-enen/AngeliA.git
    id: GetEnumerator
    path: ../../AngeliA/AngeliA Framework/src/Common/EchoDictionary.cs
    startLine: 100
  assemblies:
  - AngeliA Framework
  namespace: AngeliA
  summary: Returns an enumerator that iterates through the collection.
  example: []
  syntax:
    content: public IEnumerator<KeyValuePair<TKey, TValue>> GetEnumerator()
    return:
      type: System.Collections.Generic.IEnumerator{System.Collections.Generic.KeyValuePair{{TKey},{TValue}}}
      description: An enumerator that can be used to iterate through the collection.
    content.vb: Public Function GetEnumerator() As IEnumerator(Of KeyValuePair(Of TKey, TValue))
  overload: AngeliA.EchoDictionary`2.GetEnumerator*
  implements:
  - System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{{TKey},{TValue}}}.GetEnumerator
  nameWithType.vb: EchoDictionary(Of TKey, TValue).GetEnumerator()
  fullName.vb: AngeliA.EchoDictionary(Of TKey, TValue).GetEnumerator()
references:
- uid: AngeliA
  commentId: N:AngeliA
  href: AngeliA.html
  name: AngeliA
  nameWithType: AngeliA
  fullName: AngeliA
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object
  name: object
  nameWithType: object
  fullName: object
  nameWithType.vb: Object
  fullName.vb: Object
  name.vb: Object
- uid: System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{{TKey},{TValue}}}
  commentId: T:System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{`0,`1}}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerable`1
  href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1
  name: IEnumerable<KeyValuePair<TKey, TValue>>
  nameWithType: IEnumerable<KeyValuePair<TKey, TValue>>
  fullName: System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<TKey, TValue>>
  nameWithType.vb: IEnumerable(Of KeyValuePair(Of TKey, TValue))
  fullName.vb: System.Collections.Generic.IEnumerable(Of System.Collections.Generic.KeyValuePair(Of TKey, TValue))
  name.vb: IEnumerable(Of KeyValuePair(Of TKey, TValue))
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1
  - name: <
  - uid: System.Collections.Generic.KeyValuePair`2
    name: KeyValuePair
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.keyvaluepair-2
  - name: <
  - name: TKey
  - name: ','
  - name: " "
  - name: TValue
  - name: '>'
  - name: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1
  - name: (
  - name: Of
  - name: " "
  - uid: System.Collections.Generic.KeyValuePair`2
    name: KeyValuePair
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.keyvaluepair-2
  - name: (
  - name: Of
  - name: " "
  - name: TKey
  - name: ','
  - name: " "
  - name: TValue
  - name: )
  - name: )
- uid: System.Collections.IEnumerable
  commentId: T:System.Collections.IEnumerable
  parent: System.Collections
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.collections.ienumerable
  name: IEnumerable
  nameWithType: IEnumerable
  fullName: System.Collections.IEnumerable
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object)
  name: Equals(object)
  nameWithType: object.Equals(object)
  fullName: object.Equals(object)
  nameWithType.vb: Object.Equals(Object)
  fullName.vb: Object.Equals(Object)
  name.vb: Equals(Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object)
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object)
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object-system-object)
  name: Equals(object, object)
  nameWithType: object.Equals(object, object)
  fullName: object.Equals(object, object)
  nameWithType.vb: Object.Equals(Object, Object)
  fullName.vb: Object.Equals(Object, Object)
  name.vb: Equals(Object, Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object-system-object)
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object-system-object)
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.gethashcode
  name: GetHashCode()
  nameWithType: object.GetHashCode()
  fullName: object.GetHashCode()
  nameWithType.vb: Object.GetHashCode()
  fullName.vb: Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gethashcode
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gethashcode
  - name: (
  - name: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.gettype
  name: GetType()
  nameWithType: object.GetType()
  fullName: object.GetType()
  nameWithType.vb: Object.GetType()
  fullName.vb: Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gettype
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gettype
  - name: (
  - name: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.memberwiseclone
  name: MemberwiseClone()
  nameWithType: object.MemberwiseClone()
  fullName: object.MemberwiseClone()
  nameWithType.vb: Object.MemberwiseClone()
  fullName.vb: Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.memberwiseclone
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.memberwiseclone
  - name: (
  - name: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.referenceequals
  name: ReferenceEquals(object, object)
  nameWithType: object.ReferenceEquals(object, object)
  fullName: object.ReferenceEquals(object, object)
  nameWithType.vb: Object.ReferenceEquals(Object, Object)
  fullName.vb: Object.ReferenceEquals(Object, Object)
  name.vb: ReferenceEquals(Object, Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.referenceequals
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.referenceequals
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.tostring
  name: ToString()
  nameWithType: object.ToString()
  fullName: object.ToString()
  nameWithType.vb: Object.ToString()
  fullName.vb: Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.tostring
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.tostring
  - name: (
  - name: )
- uid: System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{`0,`1}}.AngeliA.Extension.JoinArray``1(System.Func{System.Collections.Generic.KeyValuePair{{TKey},{TValue}},System.String},System.Char)
  commentId: M:AngeliA.Extension.JoinArray``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.String},System.Char)
  parent: AngeliA.Extension
  definition: AngeliA.Extension.JoinArray``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.String},System.Char)
  href: AngeliA.Extension.html#AngeliA_Extension_JoinArray__1_System_Collections_Generic_IEnumerable___0__System_Func___0_System_String__System_Char_
  name: JoinArray<KeyValuePair<TKey, TValue>>(IEnumerable<KeyValuePair<TKey, TValue>>, Func<KeyValuePair<TKey, TValue>, string>, char)
  nameWithType: Extension.JoinArray<KeyValuePair<TKey, TValue>>(IEnumerable<KeyValuePair<TKey, TValue>>, Func<KeyValuePair<TKey, TValue>, string>, char)
  fullName: AngeliA.Extension.JoinArray<System.Collections.Generic.KeyValuePair<TKey, TValue>>(System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<TKey, TValue>>, System.Func<System.Collections.Generic.KeyValuePair<TKey, TValue>, string>, char)
  nameWithType.vb: Extension.JoinArray(Of KeyValuePair(Of TKey, TValue))(IEnumerable(Of KeyValuePair(Of TKey, TValue)), Func(Of KeyValuePair(Of TKey, TValue), String), Char)
  fullName.vb: AngeliA.Extension.JoinArray(Of System.Collections.Generic.KeyValuePair(Of TKey, TValue))(System.Collections.Generic.IEnumerable(Of System.Collections.Generic.KeyValuePair(Of TKey, TValue)), System.Func(Of System.Collections.Generic.KeyValuePair(Of TKey, TValue), String), Char)
  name.vb: JoinArray(Of KeyValuePair(Of TKey, TValue))(IEnumerable(Of KeyValuePair(Of TKey, TValue)), Func(Of KeyValuePair(Of TKey, TValue), String), Char)
  spec.csharp:
  - uid: AngeliA.Extension.JoinArray``1(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{`0,`1}},System.Func{System.Collections.Generic.KeyValuePair{`0,`1},System.String},System.Char)
    name: JoinArray
    href: AngeliA.Extension.html#AngeliA_Extension_JoinArray__1_System_Collections_Generic_IEnumerable___0__System_Func___0_System_String__System_Char_
  - name: <
  - uid: System.Collections.Generic.KeyValuePair`2
    name: KeyValuePair
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.keyvaluepair-2
  - name: <
  - name: TKey
  - name: ','
  - name: " "
  - name: TValue
  - name: '>'
  - name: '>'
  - name: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1
  - name: <
  - uid: System.Collections.Generic.KeyValuePair`2
    name: KeyValuePair
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.keyvaluepair-2
  - name: <
  - name: TKey
  - name: ','
  - name: " "
  - name: TValue
  - name: '>'
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.func-2
  - name: <
  - uid: System.Collections.Generic.KeyValuePair`2
    name: KeyValuePair
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.keyvaluepair-2
  - name: <
  - name: TKey
  - name: ','
  - name: " "
  - name: TValue
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.String
    name: string
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.string
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Char
    name: char
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.char
  - name: )
  spec.vb:
  - uid: AngeliA.Extension.JoinArray``1(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{`0,`1}},System.Func{System.Collections.Generic.KeyValuePair{`0,`1},System.String},System.Char)
    name: JoinArray
    href: AngeliA.Extension.html#AngeliA_Extension_JoinArray__1_System_Collections_Generic_IEnumerable___0__System_Func___0_System_String__System_Char_
  - name: (
  - name: Of
  - name: " "
  - uid: System.Collections.Generic.KeyValuePair`2
    name: KeyValuePair
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.keyvaluepair-2
  - name: (
  - name: Of
  - name: " "
  - name: TKey
  - name: ','
  - name: " "
  - name: TValue
  - name: )
  - name: )
  - name: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1
  - name: (
  - name: Of
  - name: " "
  - uid: System.Collections.Generic.KeyValuePair`2
    name: KeyValuePair
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.keyvaluepair-2
  - name: (
  - name: Of
  - name: " "
  - name: TKey
  - name: ','
  - name: " "
  - name: TValue
  - name: )
  - name: )
  - name: ','
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.func-2
  - name: (
  - name: Of
  - name: " "
  - uid: System.Collections.Generic.KeyValuePair`2
    name: KeyValuePair
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.keyvaluepair-2
  - name: (
  - name: Of
  - name: " "
  - name: TKey
  - name: ','
  - name: " "
  - name: TValue
  - name: )
  - name: ','
  - name: " "
  - uid: System.String
    name: String
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.string
  - name: )
  - name: ','
  - name: " "
  - uid: System.Char
    name: Char
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.char
  - name: )
- uid: System.Object.AngeliA.Extension.ForAllFields``1(System.Reflection.BindingFlags,System.Boolean)
  commentId: M:AngeliA.Extension.ForAllFields``1(System.Object,System.Reflection.BindingFlags,System.Boolean)
  parent: AngeliA.Extension
  definition: AngeliA.Extension.ForAllFields``1(System.Object,System.Reflection.BindingFlags,System.Boolean)
  href: AngeliA.Extension.html#AngeliA_Extension_ForAllFields__1_System_Object_System_Reflection_BindingFlags_System_Boolean_
  name: ForAllFields<T>(object, BindingFlags, bool)
  nameWithType: Extension.ForAllFields<T>(object, BindingFlags, bool)
  fullName: AngeliA.Extension.ForAllFields<T>(object, System.Reflection.BindingFlags, bool)
  nameWithType.vb: Extension.ForAllFields(Of T)(Object, BindingFlags, Boolean)
  fullName.vb: AngeliA.Extension.ForAllFields(Of T)(Object, System.Reflection.BindingFlags, Boolean)
  name.vb: ForAllFields(Of T)(Object, BindingFlags, Boolean)
  spec.csharp:
  - uid: AngeliA.Extension.ForAllFields``1(System.Object,System.Reflection.BindingFlags,System.Boolean)
    name: ForAllFields
    href: AngeliA.Extension.html#AngeliA_Extension_ForAllFields__1_System_Object_System_Reflection_BindingFlags_System_Boolean_
  - name: <
  - name: T
  - name: '>'
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Reflection.BindingFlags
    name: BindingFlags
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.reflection.bindingflags
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: bool
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.boolean
  - name: )
  spec.vb:
  - uid: AngeliA.Extension.ForAllFields``1(System.Object,System.Reflection.BindingFlags,System.Boolean)
    name: ForAllFields
    href: AngeliA.Extension.html#AngeliA_Extension_ForAllFields__1_System_Object_System_Reflection_BindingFlags_System_Boolean_
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Reflection.BindingFlags
    name: BindingFlags
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.reflection.bindingflags
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: Boolean
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.boolean
  - name: )
- uid: System.Object.AngeliA.Extension.ForAllProperties``1
  commentId: M:AngeliA.Extension.ForAllProperties``1(System.Object)
  parent: AngeliA.Extension
  definition: AngeliA.Extension.ForAllProperties``1(System.Object)
  href: AngeliA.Extension.html#AngeliA_Extension_ForAllProperties__1_System_Object_
  name: ForAllProperties<T>(object)
  nameWithType: Extension.ForAllProperties<T>(object)
  fullName: AngeliA.Extension.ForAllProperties<T>(object)
  nameWithType.vb: Extension.ForAllProperties(Of T)(Object)
  fullName.vb: AngeliA.Extension.ForAllProperties(Of T)(Object)
  name.vb: ForAllProperties(Of T)(Object)
  spec.csharp:
  - uid: AngeliA.Extension.ForAllProperties``1(System.Object)
    name: ForAllProperties
    href: AngeliA.Extension.html#AngeliA_Extension_ForAllProperties__1_System_Object_
  - name: <
  - name: T
  - name: '>'
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
  spec.vb:
  - uid: AngeliA.Extension.ForAllProperties``1(System.Object)
    name: ForAllProperties
    href: AngeliA.Extension.html#AngeliA_Extension_ForAllProperties__1_System_Object_
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
- uid: System
  commentId: N:System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system
  name: System
  nameWithType: System
  fullName: System
- uid: System.Collections.Generic.IEnumerable`1
  commentId: T:System.Collections.Generic.IEnumerable`1
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1
  name: IEnumerable<T>
  nameWithType: IEnumerable<T>
  fullName: System.Collections.Generic.IEnumerable<T>
  nameWithType.vb: IEnumerable(Of T)
  fullName.vb: System.Collections.Generic.IEnumerable(Of T)
  name.vb: IEnumerable(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1
  - name: <
  - name: T
  - name: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
  spec.csharp:
  - uid: System
    name: System
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system
  - name: .
  - uid: System.Collections
    name: Collections
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections
  - name: .
  - uid: System.Collections.Generic
    name: Generic
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic
  spec.vb:
  - uid: System
    name: System
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system
  - name: .
  - uid: System.Collections
    name: Collections
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections
  - name: .
  - uid: System.Collections.Generic
    name: Generic
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic
- uid: System.Collections
  commentId: N:System.Collections
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system
  name: System.Collections
  nameWithType: System.Collections
  fullName: System.Collections
  spec.csharp:
  - uid: System
    name: System
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system
  - name: .
  - uid: System.Collections
    name: Collections
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections
  spec.vb:
  - uid: System
    name: System
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system
  - name: .
  - uid: System.Collections
    name: Collections
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections
- uid: AngeliA.Extension.JoinArray``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.String},System.Char)
  commentId: M:AngeliA.Extension.JoinArray``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.String},System.Char)
  isExternal: true
  href: AngeliA.Extension.html#AngeliA_Extension_JoinArray__1_System_Collections_Generic_IEnumerable___0__System_Func___0_System_String__System_Char_
  name: JoinArray<T>(IEnumerable<T>, Func<T, string>, char)
  nameWithType: Extension.JoinArray<T>(IEnumerable<T>, Func<T, string>, char)
  fullName: AngeliA.Extension.JoinArray<T>(System.Collections.Generic.IEnumerable<T>, System.Func<T, string>, char)
  nameWithType.vb: Extension.JoinArray(Of T)(IEnumerable(Of T), Func(Of T, String), Char)
  fullName.vb: AngeliA.Extension.JoinArray(Of T)(System.Collections.Generic.IEnumerable(Of T), System.Func(Of T, String), Char)
  name.vb: JoinArray(Of T)(IEnumerable(Of T), Func(Of T, String), Char)
  spec.csharp:
  - uid: AngeliA.Extension.JoinArray``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.String},System.Char)
    name: JoinArray
    href: AngeliA.Extension.html#AngeliA_Extension_JoinArray__1_System_Collections_Generic_IEnumerable___0__System_Func___0_System_String__System_Char_
  - name: <
  - name: T
  - name: '>'
  - name: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1
  - name: <
  - name: T
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.func-2
  - name: <
  - name: T
  - name: ','
  - name: " "
  - uid: System.String
    name: string
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.string
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Char
    name: char
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.char
  - name: )
  spec.vb:
  - uid: AngeliA.Extension.JoinArray``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.String},System.Char)
    name: JoinArray
    href: AngeliA.Extension.html#AngeliA_Extension_JoinArray__1_System_Collections_Generic_IEnumerable___0__System_Func___0_System_String__System_Char_
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
  - name: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
  - name: ','
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.func-2
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: ','
  - name: " "
  - uid: System.String
    name: String
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.string
  - name: )
  - name: ','
  - name: " "
  - uid: System.Char
    name: Char
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.char
  - name: )
- uid: AngeliA.Extension
  commentId: T:AngeliA.Extension
  parent: AngeliA
  href: AngeliA.Extension.html
  name: Extension
  nameWithType: Extension
  fullName: AngeliA.Extension
- uid: AngeliA.Extension.ForAllFields``1(System.Object,System.Reflection.BindingFlags,System.Boolean)
  commentId: M:AngeliA.Extension.ForAllFields``1(System.Object,System.Reflection.BindingFlags,System.Boolean)
  isExternal: true
  href: AngeliA.Extension.html#AngeliA_Extension_ForAllFields__1_System_Object_System_Reflection_BindingFlags_System_Boolean_
  name: ForAllFields<T>(object, BindingFlags, bool)
  nameWithType: Extension.ForAllFields<T>(object, BindingFlags, bool)
  fullName: AngeliA.Extension.ForAllFields<T>(object, System.Reflection.BindingFlags, bool)
  nameWithType.vb: Extension.ForAllFields(Of T)(Object, BindingFlags, Boolean)
  fullName.vb: AngeliA.Extension.ForAllFields(Of T)(Object, System.Reflection.BindingFlags, Boolean)
  name.vb: ForAllFields(Of T)(Object, BindingFlags, Boolean)
  spec.csharp:
  - uid: AngeliA.Extension.ForAllFields``1(System.Object,System.Reflection.BindingFlags,System.Boolean)
    name: ForAllFields
    href: AngeliA.Extension.html#AngeliA_Extension_ForAllFields__1_System_Object_System_Reflection_BindingFlags_System_Boolean_
  - name: <
  - name: T
  - name: '>'
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Reflection.BindingFlags
    name: BindingFlags
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.reflection.bindingflags
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: bool
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.boolean
  - name: )
  spec.vb:
  - uid: AngeliA.Extension.ForAllFields``1(System.Object,System.Reflection.BindingFlags,System.Boolean)
    name: ForAllFields
    href: AngeliA.Extension.html#AngeliA_Extension_ForAllFields__1_System_Object_System_Reflection_BindingFlags_System_Boolean_
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Reflection.BindingFlags
    name: BindingFlags
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.reflection.bindingflags
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: Boolean
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.boolean
  - name: )
- uid: AngeliA.Extension.ForAllProperties``1(System.Object)
  commentId: M:AngeliA.Extension.ForAllProperties``1(System.Object)
  isExternal: true
  href: AngeliA.Extension.html#AngeliA_Extension_ForAllProperties__1_System_Object_
  name: ForAllProperties<T>(object)
  nameWithType: Extension.ForAllProperties<T>(object)
  fullName: AngeliA.Extension.ForAllProperties<T>(object)
  nameWithType.vb: Extension.ForAllProperties(Of T)(Object)
  fullName.vb: AngeliA.Extension.ForAllProperties(Of T)(Object)
  name.vb: ForAllProperties(Of T)(Object)
  spec.csharp:
  - uid: AngeliA.Extension.ForAllProperties``1(System.Object)
    name: ForAllProperties
    href: AngeliA.Extension.html#AngeliA_Extension_ForAllProperties__1_System_Object_
  - name: <
  - name: T
  - name: '>'
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
  spec.vb:
  - uid: AngeliA.Extension.ForAllProperties``1(System.Object)
    name: ForAllProperties
    href: AngeliA.Extension.html#AngeliA_Extension_ForAllProperties__1_System_Object_
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
- uid: AngeliA.EchoDictionary`2.Item*
  commentId: Overload:AngeliA.EchoDictionary`2.Item
  href: AngeliA.EchoDictionary-2.html#AngeliA_EchoDictionary_2_Item__0_
  name: this
  nameWithType: EchoDictionary<TKey, TValue>.this
  fullName: AngeliA.EchoDictionary<TKey, TValue>.this
  nameWithType.vb: EchoDictionary(Of TKey, TValue).this[]
  fullName.vb: AngeliA.EchoDictionary(Of TKey, TValue).this[]
  name.vb: this[]
- uid: '{TKey}'
  commentId: '!:TKey'
  definition: TKey
  name: TKey
  nameWithType: TKey
  fullName: TKey
- uid: '{TValue}'
  commentId: '!:TValue'
  definition: TValue
  name: TValue
  nameWithType: TValue
  fullName: TValue
- uid: TKey
  name: TKey
  nameWithType: TKey
  fullName: TKey
- uid: TValue
  name: TValue
  nameWithType: TValue
  fullName: TValue
- uid: AngeliA.EchoDictionary`2.Count*
  commentId: Overload:AngeliA.EchoDictionary`2.Count
  href: AngeliA.EchoDictionary-2.html#AngeliA_EchoDictionary_2_Count
  name: Count
  nameWithType: EchoDictionary<TKey, TValue>.Count
  fullName: AngeliA.EchoDictionary<TKey, TValue>.Count
  nameWithType.vb: EchoDictionary(Of TKey, TValue).Count
  fullName.vb: AngeliA.EchoDictionary(Of TKey, TValue).Count
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.int32
  name: int
  nameWithType: int
  fullName: int
  nameWithType.vb: Integer
  fullName.vb: Integer
  name.vb: Integer
- uid: AngeliA.EchoDictionary`2.TryAdd*
  commentId: Overload:AngeliA.EchoDictionary`2.TryAdd
  href: AngeliA.EchoDictionary-2.html#AngeliA_EchoDictionary_2_TryAdd__0__1_
  name: TryAdd
  nameWithType: EchoDictionary<TKey, TValue>.TryAdd
  fullName: AngeliA.EchoDictionary<TKey, TValue>.TryAdd
  nameWithType.vb: EchoDictionary(Of TKey, TValue).TryAdd
  fullName.vb: AngeliA.EchoDictionary(Of TKey, TValue).TryAdd
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.boolean
  name: bool
  nameWithType: bool
  fullName: bool
  nameWithType.vb: Boolean
  fullName.vb: Boolean
  name.vb: Boolean
- uid: AngeliA.EchoDictionary`2.Add*
  commentId: Overload:AngeliA.EchoDictionary`2.Add
  href: AngeliA.EchoDictionary-2.html#AngeliA_EchoDictionary_2_Add__0__1_
  name: Add
  nameWithType: EchoDictionary<TKey, TValue>.Add
  fullName: AngeliA.EchoDictionary<TKey, TValue>.Add
  nameWithType.vb: EchoDictionary(Of TKey, TValue).Add
  fullName.vb: AngeliA.EchoDictionary(Of TKey, TValue).Add
- uid: AngeliA.EchoDictionary`2.ContainsKey*
  commentId: Overload:AngeliA.EchoDictionary`2.ContainsKey
  href: AngeliA.EchoDictionary-2.html#AngeliA_EchoDictionary_2_ContainsKey__0_
  name: ContainsKey
  nameWithType: EchoDictionary<TKey, TValue>.ContainsKey
  fullName: AngeliA.EchoDictionary<TKey, TValue>.ContainsKey
  nameWithType.vb: EchoDictionary(Of TKey, TValue).ContainsKey
  fullName.vb: AngeliA.EchoDictionary(Of TKey, TValue).ContainsKey
- uid: AngeliA.EchoDictionary`2.ContainsValue*
  commentId: Overload:AngeliA.EchoDictionary`2.ContainsValue
  href: AngeliA.EchoDictionary-2.html#AngeliA_EchoDictionary_2_ContainsValue__1_
  name: ContainsValue
  nameWithType: EchoDictionary<TKey, TValue>.ContainsValue
  fullName: AngeliA.EchoDictionary<TKey, TValue>.ContainsValue
  nameWithType.vb: EchoDictionary(Of TKey, TValue).ContainsValue
  fullName.vb: AngeliA.EchoDictionary(Of TKey, TValue).ContainsValue
- uid: AngeliA.EchoDictionary`2.ContainsAny*
  commentId: Overload:AngeliA.EchoDictionary`2.ContainsAny
  href: AngeliA.EchoDictionary-2.html#AngeliA_EchoDictionary_2_ContainsAny__0__1_
  name: ContainsAny
  nameWithType: EchoDictionary<TKey, TValue>.ContainsAny
  fullName: AngeliA.EchoDictionary<TKey, TValue>.ContainsAny
  nameWithType.vb: EchoDictionary(Of TKey, TValue).ContainsAny
  fullName.vb: AngeliA.EchoDictionary(Of TKey, TValue).ContainsAny
- uid: AngeliA.EchoDictionary`2.ContainsPair*
  commentId: Overload:AngeliA.EchoDictionary`2.ContainsPair
  href: AngeliA.EchoDictionary-2.html#AngeliA_EchoDictionary_2_ContainsPair__0__1_
  name: ContainsPair
  nameWithType: EchoDictionary<TKey, TValue>.ContainsPair
  fullName: AngeliA.EchoDictionary<TKey, TValue>.ContainsPair
  nameWithType.vb: EchoDictionary(Of TKey, TValue).ContainsPair
  fullName.vb: AngeliA.EchoDictionary(Of TKey, TValue).ContainsPair
- uid: AngeliA.EchoDictionary`2.TryGetValue*
  commentId: Overload:AngeliA.EchoDictionary`2.TryGetValue
  href: AngeliA.EchoDictionary-2.html#AngeliA_EchoDictionary_2_TryGetValue__0__1__
  name: TryGetValue
  nameWithType: EchoDictionary<TKey, TValue>.TryGetValue
  fullName: AngeliA.EchoDictionary<TKey, TValue>.TryGetValue
  nameWithType.vb: EchoDictionary(Of TKey, TValue).TryGetValue
  fullName.vb: AngeliA.EchoDictionary(Of TKey, TValue).TryGetValue
- uid: AngeliA.EchoDictionary`2.TryGetKey*
  commentId: Overload:AngeliA.EchoDictionary`2.TryGetKey
  href: AngeliA.EchoDictionary-2.html#AngeliA_EchoDictionary_2_TryGetKey__1__0__
  name: TryGetKey
  nameWithType: EchoDictionary<TKey, TValue>.TryGetKey
  fullName: AngeliA.EchoDictionary<TKey, TValue>.TryGetKey
  nameWithType.vb: EchoDictionary(Of TKey, TValue).TryGetKey
  fullName.vb: AngeliA.EchoDictionary(Of TKey, TValue).TryGetKey
- uid: AngeliA.EchoDictionary`2.Remove*
  commentId: Overload:AngeliA.EchoDictionary`2.Remove
  href: AngeliA.EchoDictionary-2.html#AngeliA_EchoDictionary_2_Remove__0_
  name: Remove
  nameWithType: EchoDictionary<TKey, TValue>.Remove
  fullName: AngeliA.EchoDictionary<TKey, TValue>.Remove
  nameWithType.vb: EchoDictionary(Of TKey, TValue).Remove
  fullName.vb: AngeliA.EchoDictionary(Of TKey, TValue).Remove
- uid: AngeliA.EchoDictionary`2.GetValue*
  commentId: Overload:AngeliA.EchoDictionary`2.GetValue
  href: AngeliA.EchoDictionary-2.html#AngeliA_EchoDictionary_2_GetValue__0_
  name: GetValue
  nameWithType: EchoDictionary<TKey, TValue>.GetValue
  fullName: AngeliA.EchoDictionary<TKey, TValue>.GetValue
  nameWithType.vb: EchoDictionary(Of TKey, TValue).GetValue
  fullName.vb: AngeliA.EchoDictionary(Of TKey, TValue).GetValue
- uid: AngeliA.EchoDictionary`2.GetKey*
  commentId: Overload:AngeliA.EchoDictionary`2.GetKey
  href: AngeliA.EchoDictionary-2.html#AngeliA_EchoDictionary_2_GetKey__1_
  name: GetKey
  nameWithType: EchoDictionary<TKey, TValue>.GetKey
  fullName: AngeliA.EchoDictionary<TKey, TValue>.GetKey
  nameWithType.vb: EchoDictionary(Of TKey, TValue).GetKey
  fullName.vb: AngeliA.EchoDictionary(Of TKey, TValue).GetKey
- uid: AngeliA.EchoDictionary`2.SetValue*
  commentId: Overload:AngeliA.EchoDictionary`2.SetValue
  href: AngeliA.EchoDictionary-2.html#AngeliA_EchoDictionary_2_SetValue__0__1_
  name: SetValue
  nameWithType: EchoDictionary<TKey, TValue>.SetValue
  fullName: AngeliA.EchoDictionary<TKey, TValue>.SetValue
  nameWithType.vb: EchoDictionary(Of TKey, TValue).SetValue
  fullName.vb: AngeliA.EchoDictionary(Of TKey, TValue).SetValue
- uid: AngeliA.EchoDictionary`2.Clear*
  commentId: Overload:AngeliA.EchoDictionary`2.Clear
  href: AngeliA.EchoDictionary-2.html#AngeliA_EchoDictionary_2_Clear
  name: Clear
  nameWithType: EchoDictionary<TKey, TValue>.Clear
  fullName: AngeliA.EchoDictionary<TKey, TValue>.Clear
  nameWithType.vb: EchoDictionary(Of TKey, TValue).Clear
  fullName.vb: AngeliA.EchoDictionary(Of TKey, TValue).Clear
- uid: AngeliA.EchoDictionary`2.GetEnumerator*
  commentId: Overload:AngeliA.EchoDictionary`2.GetEnumerator
  href: AngeliA.EchoDictionary-2.html#AngeliA_EchoDictionary_2_GetEnumerator
  name: GetEnumerator
  nameWithType: EchoDictionary<TKey, TValue>.GetEnumerator
  fullName: AngeliA.EchoDictionary<TKey, TValue>.GetEnumerator
  nameWithType.vb: EchoDictionary(Of TKey, TValue).GetEnumerator
  fullName.vb: AngeliA.EchoDictionary(Of TKey, TValue).GetEnumerator
- uid: System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{{TKey},{TValue}}}.GetEnumerator
  commentId: M:System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{`0,`1}}.GetEnumerator
  parent: System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{{TKey},{TValue}}}
  definition: System.Collections.Generic.IEnumerable`1.GetEnumerator
  href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1.getenumerator
  name: GetEnumerator()
  nameWithType: IEnumerable<KeyValuePair<TKey, TValue>>.GetEnumerator()
  fullName: System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<TKey, TValue>>.GetEnumerator()
  nameWithType.vb: IEnumerable(Of KeyValuePair(Of TKey, TValue)).GetEnumerator()
  fullName.vb: System.Collections.Generic.IEnumerable(Of System.Collections.Generic.KeyValuePair(Of TKey, TValue)).GetEnumerator()
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{`0,`1}}.GetEnumerator
    name: GetEnumerator
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1.getenumerator
  - name: (
  - name: )
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{`0,`1}}.GetEnumerator
    name: GetEnumerator
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1.getenumerator
  - name: (
  - name: )
- uid: System.Collections.Generic.IEnumerator{System.Collections.Generic.KeyValuePair{{TKey},{TValue}}}
  commentId: T:System.Collections.Generic.IEnumerator{System.Collections.Generic.KeyValuePair{`0,`1}}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerator`1
  href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerator-1
  name: IEnumerator<KeyValuePair<TKey, TValue>>
  nameWithType: IEnumerator<KeyValuePair<TKey, TValue>>
  fullName: System.Collections.Generic.IEnumerator<System.Collections.Generic.KeyValuePair<TKey, TValue>>
  nameWithType.vb: IEnumerator(Of KeyValuePair(Of TKey, TValue))
  fullName.vb: System.Collections.Generic.IEnumerator(Of System.Collections.Generic.KeyValuePair(Of TKey, TValue))
  name.vb: IEnumerator(Of KeyValuePair(Of TKey, TValue))
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerator`1
    name: IEnumerator
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerator-1
  - name: <
  - uid: System.Collections.Generic.KeyValuePair`2
    name: KeyValuePair
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.keyvaluepair-2
  - name: <
  - name: TKey
  - name: ','
  - name: " "
  - name: TValue
  - name: '>'
  - name: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerator`1
    name: IEnumerator
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerator-1
  - name: (
  - name: Of
  - name: " "
  - uid: System.Collections.Generic.KeyValuePair`2
    name: KeyValuePair
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.keyvaluepair-2
  - name: (
  - name: Of
  - name: " "
  - name: TKey
  - name: ','
  - name: " "
  - name: TValue
  - name: )
  - name: )
- uid: System.Collections.Generic.IEnumerable`1.GetEnumerator
  commentId: M:System.Collections.Generic.IEnumerable`1.GetEnumerator
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1.getenumerator
  name: GetEnumerator()
  nameWithType: IEnumerable<T>.GetEnumerator()
  fullName: System.Collections.Generic.IEnumerable<T>.GetEnumerator()
  nameWithType.vb: IEnumerable(Of T).GetEnumerator()
  fullName.vb: System.Collections.Generic.IEnumerable(Of T).GetEnumerator()
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1.GetEnumerator
    name: GetEnumerator
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1.getenumerator
  - name: (
  - name: )
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1.GetEnumerator
    name: GetEnumerator
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1.getenumerator
  - name: (
  - name: )
- uid: System.Collections.Generic.IEnumerator`1
  commentId: T:System.Collections.Generic.IEnumerator`1
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerator-1
  name: IEnumerator<T>
  nameWithType: IEnumerator<T>
  fullName: System.Collections.Generic.IEnumerator<T>
  nameWithType.vb: IEnumerator(Of T)
  fullName.vb: System.Collections.Generic.IEnumerator(Of T)
  name.vb: IEnumerator(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerator`1
    name: IEnumerator
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerator-1
  - name: <
  - name: T
  - name: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerator`1
    name: IEnumerator
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerator-1
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
