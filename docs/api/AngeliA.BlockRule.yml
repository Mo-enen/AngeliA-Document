### YamlMime:ManagedReference
items:
- uid: AngeliA.BlockRule
  commentId: T:AngeliA.BlockRule
  id: BlockRule
  parent: AngeliA
  children:
  - AngeliA.BlockRule.#ctor(AngeliA.Rule,AngeliA.Rule,AngeliA.Rule,AngeliA.Rule,AngeliA.Rule,AngeliA.Rule,AngeliA.Rule,AngeliA.Rule)
  - AngeliA.BlockRule.EMPTY
  - AngeliA.BlockRule.IsEmpty
  - AngeliA.BlockRule.IsSameWith(AngeliA.BlockRule)
  - AngeliA.BlockRule.Item(System.Int32)
  - AngeliA.BlockRule.RuleB
  - AngeliA.BlockRule.RuleBL
  - AngeliA.BlockRule.RuleBR
  - AngeliA.BlockRule.RuleL
  - AngeliA.BlockRule.RuleR
  - AngeliA.BlockRule.RuleT
  - AngeliA.BlockRule.RuleTL
  - AngeliA.BlockRule.RuleTR
  langs:
  - csharp
  - vb
  name: BlockRule
  nameWithType: BlockRule
  fullName: AngeliA.BlockRule
  type: Struct
  source:
    remote:
      path: AngeliA Framework/src/Structure/BlockRule.cs
      branch: main
      repo: https://github.com/Mo-enen/AngeliA.git
    id: BlockRule
    path: ../../AngeliA/AngeliA Framework/src/Structure/BlockRule.cs
    startLine: 49
  assemblies:
  - AngeliA Framework
  namespace: AngeliA
  summary: Checking rules for auto tiling map blocks for a source block
  example: []
  syntax:
    content: public struct BlockRule
    content.vb: Public Structure BlockRule
  inheritedMembers:
  - System.ValueType.Equals(System.Object)
  - System.ValueType.GetHashCode
  - System.ValueType.ToString
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetType
  - System.Object.ReferenceEquals(System.Object,System.Object)
  extensionMethods:
  - System.Object.AngeliA.Extension.ForAllFields``1(System.Reflection.BindingFlags,System.Boolean)
  - System.Object.AngeliA.Extension.ForAllProperties``1
- uid: AngeliA.BlockRule.#ctor(AngeliA.Rule,AngeliA.Rule,AngeliA.Rule,AngeliA.Rule,AngeliA.Rule,AngeliA.Rule,AngeliA.Rule,AngeliA.Rule)
  commentId: M:AngeliA.BlockRule.#ctor(AngeliA.Rule,AngeliA.Rule,AngeliA.Rule,AngeliA.Rule,AngeliA.Rule,AngeliA.Rule,AngeliA.Rule,AngeliA.Rule)
  id: '#ctor(AngeliA.Rule,AngeliA.Rule,AngeliA.Rule,AngeliA.Rule,AngeliA.Rule,AngeliA.Rule,AngeliA.Rule,AngeliA.Rule)'
  parent: AngeliA.BlockRule
  langs:
  - csharp
  - vb
  name: BlockRule(Rule, Rule, Rule, Rule, Rule, Rule, Rule, Rule)
  nameWithType: BlockRule.BlockRule(Rule, Rule, Rule, Rule, Rule, Rule, Rule, Rule)
  fullName: AngeliA.BlockRule.BlockRule(AngeliA.Rule, AngeliA.Rule, AngeliA.Rule, AngeliA.Rule, AngeliA.Rule, AngeliA.Rule, AngeliA.Rule, AngeliA.Rule)
  type: Constructor
  source:
    remote:
      path: AngeliA Framework/src/Structure/BlockRule.cs
      branch: main
      repo: https://github.com/Mo-enen/AngeliA.git
    id: .ctor
    path: ../../AngeliA/AngeliA Framework/src/Structure/BlockRule.cs
    startLine: 49
  assemblies:
  - AngeliA Framework
  namespace: AngeliA
  summary: Checking rules for auto tiling map blocks for a source block
  example: []
  syntax:
    content: public BlockRule(Rule ruleTL, Rule ruleT, Rule ruleTR, Rule ruleL, Rule ruleR, Rule ruleBL, Rule ruleB, Rule ruleBR)
    parameters:
    - id: ruleTL
      type: AngeliA.Rule
      description: Rule apply to the top-left block
    - id: ruleT
      type: AngeliA.Rule
      description: Rule apply to the top block
    - id: ruleTR
      type: AngeliA.Rule
      description: Rule apply to the top-right block
    - id: ruleL
      type: AngeliA.Rule
      description: Rule apply to the left block
    - id: ruleR
      type: AngeliA.Rule
      description: Rule apply to the right block
    - id: ruleBL
      type: AngeliA.Rule
      description: Rule apply to the bottom-left block
    - id: ruleB
      type: AngeliA.Rule
      description: Rule apply to the bottom block
    - id: ruleBR
      type: AngeliA.Rule
      description: Rule apply to the bottom-right block
    content.vb: Public Sub New(ruleTL As Rule, ruleT As Rule, ruleTR As Rule, ruleL As Rule, ruleR As Rule, ruleBL As Rule, ruleB As Rule, ruleBR As Rule)
  overload: AngeliA.BlockRule.#ctor*
  nameWithType.vb: BlockRule.New(Rule, Rule, Rule, Rule, Rule, Rule, Rule, Rule)
  fullName.vb: AngeliA.BlockRule.New(AngeliA.Rule, AngeliA.Rule, AngeliA.Rule, AngeliA.Rule, AngeliA.Rule, AngeliA.Rule, AngeliA.Rule, AngeliA.Rule)
  name.vb: New(Rule, Rule, Rule, Rule, Rule, Rule, Rule, Rule)
- uid: AngeliA.BlockRule.EMPTY
  commentId: F:AngeliA.BlockRule.EMPTY
  id: EMPTY
  parent: AngeliA.BlockRule
  langs:
  - csharp
  - vb
  name: EMPTY
  nameWithType: BlockRule.EMPTY
  fullName: AngeliA.BlockRule.EMPTY
  type: Field
  source:
    remote:
      path: AngeliA Framework/src/Structure/BlockRule.cs
      branch: main
      repo: https://github.com/Mo-enen/AngeliA.git
    id: EMPTY
    path: ../../AngeliA/AngeliA Framework/src/Structure/BlockRule.cs
    startLine: 54
  assemblies:
  - AngeliA Framework
  namespace: AngeliA
  summary: Empty rule what don't perform any rule check
  example: []
  syntax:
    content: public static readonly BlockRule EMPTY
    return:
      type: AngeliA.BlockRule
    content.vb: Public Shared ReadOnly EMPTY As BlockRule
- uid: AngeliA.BlockRule.IsEmpty
  commentId: P:AngeliA.BlockRule.IsEmpty
  id: IsEmpty
  parent: AngeliA.BlockRule
  langs:
  - csharp
  - vb
  name: IsEmpty
  nameWithType: BlockRule.IsEmpty
  fullName: AngeliA.BlockRule.IsEmpty
  type: Property
  source:
    remote:
      path: AngeliA Framework/src/Structure/BlockRule.cs
      branch: main
      repo: https://github.com/Mo-enen/AngeliA.git
    id: IsEmpty
    path: ../../AngeliA/AngeliA Framework/src/Structure/BlockRule.cs
    startLine: 59
  assemblies:
  - AngeliA Framework
  namespace: AngeliA
  summary: True if the rule is all set to whatever
  example: []
  syntax:
    content: public readonly bool IsEmpty { get; }
    parameters: []
    return:
      type: System.Boolean
    content.vb: Public ReadOnly Property IsEmpty As Boolean
  overload: AngeliA.BlockRule.IsEmpty*
- uid: AngeliA.BlockRule.Item(System.Int32)
  commentId: P:AngeliA.BlockRule.Item(System.Int32)
  id: Item(System.Int32)
  parent: AngeliA.BlockRule
  langs:
  - csharp
  - vb
  name: this[int]
  nameWithType: BlockRule.this[int]
  fullName: AngeliA.BlockRule.this[int]
  type: Property
  source:
    remote:
      path: AngeliA Framework/src/Structure/BlockRule.cs
      branch: main
      repo: https://github.com/Mo-enen/AngeliA.git
    id: this[]
    path: ../../AngeliA/AngeliA Framework/src/Structure/BlockRule.cs
    startLine: 64
  assemblies:
  - AngeliA Framework
  namespace: AngeliA
  summary: Get rule at given index. (↖ ↑ ↗ ← → ↙ ↓ ↘)
  example: []
  syntax:
    content: public Rule this[int i] { readonly get; set; }
    parameters:
    - id: i
      type: System.Int32
    return:
      type: AngeliA.Rule
    content.vb: Public Default Property this[](i As Integer) As Rule
  overload: AngeliA.BlockRule.Item*
  nameWithType.vb: BlockRule.this[](Integer)
  fullName.vb: AngeliA.BlockRule.this[](Integer)
  name.vb: this[](Integer)
- uid: AngeliA.BlockRule.RuleTL
  commentId: F:AngeliA.BlockRule.RuleTL
  id: RuleTL
  parent: AngeliA.BlockRule
  langs:
  - csharp
  - vb
  name: RuleTL
  nameWithType: BlockRule.RuleTL
  fullName: AngeliA.BlockRule.RuleTL
  type: Field
  source:
    remote:
      path: AngeliA Framework/src/Structure/BlockRule.cs
      branch: main
      repo: https://github.com/Mo-enen/AngeliA.git
    id: RuleTL
    path: ../../AngeliA/AngeliA Framework/src/Structure/BlockRule.cs
    startLine: 93
  assemblies:
  - AngeliA Framework
  namespace: AngeliA
  summary: Rule apply to the top-left block
  example: []
  syntax:
    content: public Rule RuleTL
    return:
      type: AngeliA.Rule
    content.vb: Public RuleTL As Rule
- uid: AngeliA.BlockRule.RuleT
  commentId: F:AngeliA.BlockRule.RuleT
  id: RuleT
  parent: AngeliA.BlockRule
  langs:
  - csharp
  - vb
  name: RuleT
  nameWithType: BlockRule.RuleT
  fullName: AngeliA.BlockRule.RuleT
  type: Field
  source:
    remote:
      path: AngeliA Framework/src/Structure/BlockRule.cs
      branch: main
      repo: https://github.com/Mo-enen/AngeliA.git
    id: RuleT
    path: ../../AngeliA/AngeliA Framework/src/Structure/BlockRule.cs
    startLine: 98
  assemblies:
  - AngeliA Framework
  namespace: AngeliA
  summary: Rule apply to the top block
  example: []
  syntax:
    content: public Rule RuleT
    return:
      type: AngeliA.Rule
    content.vb: Public RuleT As Rule
- uid: AngeliA.BlockRule.RuleTR
  commentId: F:AngeliA.BlockRule.RuleTR
  id: RuleTR
  parent: AngeliA.BlockRule
  langs:
  - csharp
  - vb
  name: RuleTR
  nameWithType: BlockRule.RuleTR
  fullName: AngeliA.BlockRule.RuleTR
  type: Field
  source:
    remote:
      path: AngeliA Framework/src/Structure/BlockRule.cs
      branch: main
      repo: https://github.com/Mo-enen/AngeliA.git
    id: RuleTR
    path: ../../AngeliA/AngeliA Framework/src/Structure/BlockRule.cs
    startLine: 103
  assemblies:
  - AngeliA Framework
  namespace: AngeliA
  summary: Rule apply to the top-right block
  example: []
  syntax:
    content: public Rule RuleTR
    return:
      type: AngeliA.Rule
    content.vb: Public RuleTR As Rule
- uid: AngeliA.BlockRule.RuleL
  commentId: F:AngeliA.BlockRule.RuleL
  id: RuleL
  parent: AngeliA.BlockRule
  langs:
  - csharp
  - vb
  name: RuleL
  nameWithType: BlockRule.RuleL
  fullName: AngeliA.BlockRule.RuleL
  type: Field
  source:
    remote:
      path: AngeliA Framework/src/Structure/BlockRule.cs
      branch: main
      repo: https://github.com/Mo-enen/AngeliA.git
    id: RuleL
    path: ../../AngeliA/AngeliA Framework/src/Structure/BlockRule.cs
    startLine: 108
  assemblies:
  - AngeliA Framework
  namespace: AngeliA
  summary: Rule apply to the left block
  example: []
  syntax:
    content: public Rule RuleL
    return:
      type: AngeliA.Rule
    content.vb: Public RuleL As Rule
- uid: AngeliA.BlockRule.RuleR
  commentId: F:AngeliA.BlockRule.RuleR
  id: RuleR
  parent: AngeliA.BlockRule
  langs:
  - csharp
  - vb
  name: RuleR
  nameWithType: BlockRule.RuleR
  fullName: AngeliA.BlockRule.RuleR
  type: Field
  source:
    remote:
      path: AngeliA Framework/src/Structure/BlockRule.cs
      branch: main
      repo: https://github.com/Mo-enen/AngeliA.git
    id: RuleR
    path: ../../AngeliA/AngeliA Framework/src/Structure/BlockRule.cs
    startLine: 113
  assemblies:
  - AngeliA Framework
  namespace: AngeliA
  summary: Rule apply to the right block
  example: []
  syntax:
    content: public Rule RuleR
    return:
      type: AngeliA.Rule
    content.vb: Public RuleR As Rule
- uid: AngeliA.BlockRule.RuleBL
  commentId: F:AngeliA.BlockRule.RuleBL
  id: RuleBL
  parent: AngeliA.BlockRule
  langs:
  - csharp
  - vb
  name: RuleBL
  nameWithType: BlockRule.RuleBL
  fullName: AngeliA.BlockRule.RuleBL
  type: Field
  source:
    remote:
      path: AngeliA Framework/src/Structure/BlockRule.cs
      branch: main
      repo: https://github.com/Mo-enen/AngeliA.git
    id: RuleBL
    path: ../../AngeliA/AngeliA Framework/src/Structure/BlockRule.cs
    startLine: 118
  assemblies:
  - AngeliA Framework
  namespace: AngeliA
  summary: Rule apply to the bottom-left block
  example: []
  syntax:
    content: public Rule RuleBL
    return:
      type: AngeliA.Rule
    content.vb: Public RuleBL As Rule
- uid: AngeliA.BlockRule.RuleB
  commentId: F:AngeliA.BlockRule.RuleB
  id: RuleB
  parent: AngeliA.BlockRule
  langs:
  - csharp
  - vb
  name: RuleB
  nameWithType: BlockRule.RuleB
  fullName: AngeliA.BlockRule.RuleB
  type: Field
  source:
    remote:
      path: AngeliA Framework/src/Structure/BlockRule.cs
      branch: main
      repo: https://github.com/Mo-enen/AngeliA.git
    id: RuleB
    path: ../../AngeliA/AngeliA Framework/src/Structure/BlockRule.cs
    startLine: 123
  assemblies:
  - AngeliA Framework
  namespace: AngeliA
  summary: Rule apply to the bottom block
  example: []
  syntax:
    content: public Rule RuleB
    return:
      type: AngeliA.Rule
    content.vb: Public RuleB As Rule
- uid: AngeliA.BlockRule.RuleBR
  commentId: F:AngeliA.BlockRule.RuleBR
  id: RuleBR
  parent: AngeliA.BlockRule
  langs:
  - csharp
  - vb
  name: RuleBR
  nameWithType: BlockRule.RuleBR
  fullName: AngeliA.BlockRule.RuleBR
  type: Field
  source:
    remote:
      path: AngeliA Framework/src/Structure/BlockRule.cs
      branch: main
      repo: https://github.com/Mo-enen/AngeliA.git
    id: RuleBR
    path: ../../AngeliA/AngeliA Framework/src/Structure/BlockRule.cs
    startLine: 128
  assemblies:
  - AngeliA Framework
  namespace: AngeliA
  summary: Rule apply to the bottom-right block
  example: []
  syntax:
    content: public Rule RuleBR
    return:
      type: AngeliA.Rule
    content.vb: Public RuleBR As Rule
- uid: AngeliA.BlockRule.IsSameWith(AngeliA.BlockRule)
  commentId: M:AngeliA.BlockRule.IsSameWith(AngeliA.BlockRule)
  id: IsSameWith(AngeliA.BlockRule)
  parent: AngeliA.BlockRule
  langs:
  - csharp
  - vb
  name: IsSameWith(BlockRule)
  nameWithType: BlockRule.IsSameWith(BlockRule)
  fullName: AngeliA.BlockRule.IsSameWith(AngeliA.BlockRule)
  type: Method
  source:
    remote:
      path: AngeliA Framework/src/Structure/BlockRule.cs
      branch: main
      repo: https://github.com/Mo-enen/AngeliA.git
    id: IsSameWith
    path: ../../AngeliA/AngeliA Framework/src/Structure/BlockRule.cs
    startLine: 133
  assemblies:
  - AngeliA Framework
  namespace: AngeliA
  summary: True if the rule is same with given rule
  example: []
  syntax:
    content: public readonly bool IsSameWith(BlockRule other)
    parameters:
    - id: other
      type: AngeliA.BlockRule
    return:
      type: System.Boolean
    content.vb: Public Function IsSameWith(other As BlockRule) As Boolean
  overload: AngeliA.BlockRule.IsSameWith*
references:
- uid: AngeliA
  commentId: N:AngeliA
  href: AngeliA.html
  name: AngeliA
  nameWithType: AngeliA
  fullName: AngeliA
- uid: System.ValueType.Equals(System.Object)
  commentId: M:System.ValueType.Equals(System.Object)
  parent: System.ValueType
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.valuetype.equals
  name: Equals(object)
  nameWithType: ValueType.Equals(object)
  fullName: System.ValueType.Equals(object)
  nameWithType.vb: ValueType.Equals(Object)
  fullName.vb: System.ValueType.Equals(Object)
  name.vb: Equals(Object)
  spec.csharp:
  - uid: System.ValueType.Equals(System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.valuetype.equals
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
  spec.vb:
  - uid: System.ValueType.Equals(System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.valuetype.equals
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
- uid: System.ValueType.GetHashCode
  commentId: M:System.ValueType.GetHashCode
  parent: System.ValueType
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.valuetype.gethashcode
  name: GetHashCode()
  nameWithType: ValueType.GetHashCode()
  fullName: System.ValueType.GetHashCode()
  spec.csharp:
  - uid: System.ValueType.GetHashCode
    name: GetHashCode
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.valuetype.gethashcode
  - name: (
  - name: )
  spec.vb:
  - uid: System.ValueType.GetHashCode
    name: GetHashCode
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.valuetype.gethashcode
  - name: (
  - name: )
- uid: System.ValueType.ToString
  commentId: M:System.ValueType.ToString
  parent: System.ValueType
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.valuetype.tostring
  name: ToString()
  nameWithType: ValueType.ToString()
  fullName: System.ValueType.ToString()
  spec.csharp:
  - uid: System.ValueType.ToString
    name: ToString
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.valuetype.tostring
  - name: (
  - name: )
  spec.vb:
  - uid: System.ValueType.ToString
    name: ToString
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.valuetype.tostring
  - name: (
  - name: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object-system-object)
  name: Equals(object, object)
  nameWithType: object.Equals(object, object)
  fullName: object.Equals(object, object)
  nameWithType.vb: Object.Equals(Object, Object)
  fullName.vb: Object.Equals(Object, Object)
  name.vb: Equals(Object, Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object-system-object)
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object-system-object)
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.gettype
  name: GetType()
  nameWithType: object.GetType()
  fullName: object.GetType()
  nameWithType.vb: Object.GetType()
  fullName.vb: Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gettype
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gettype
  - name: (
  - name: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.referenceequals
  name: ReferenceEquals(object, object)
  nameWithType: object.ReferenceEquals(object, object)
  fullName: object.ReferenceEquals(object, object)
  nameWithType.vb: Object.ReferenceEquals(Object, Object)
  fullName.vb: Object.ReferenceEquals(Object, Object)
  name.vb: ReferenceEquals(Object, Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.referenceequals
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.referenceequals
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
- uid: System.Object.AngeliA.Extension.ForAllFields``1(System.Reflection.BindingFlags,System.Boolean)
  commentId: M:AngeliA.Extension.ForAllFields``1(System.Object,System.Reflection.BindingFlags,System.Boolean)
  parent: AngeliA.Extension
  definition: AngeliA.Extension.ForAllFields``1(System.Object,System.Reflection.BindingFlags,System.Boolean)
  href: AngeliA.Extension.html#AngeliA_Extension_ForAllFields__1_System_Object_System_Reflection_BindingFlags_System_Boolean_
  name: ForAllFields<T>(object, BindingFlags, bool)
  nameWithType: Extension.ForAllFields<T>(object, BindingFlags, bool)
  fullName: AngeliA.Extension.ForAllFields<T>(object, System.Reflection.BindingFlags, bool)
  nameWithType.vb: Extension.ForAllFields(Of T)(Object, BindingFlags, Boolean)
  fullName.vb: AngeliA.Extension.ForAllFields(Of T)(Object, System.Reflection.BindingFlags, Boolean)
  name.vb: ForAllFields(Of T)(Object, BindingFlags, Boolean)
  spec.csharp:
  - uid: AngeliA.Extension.ForAllFields``1(System.Object,System.Reflection.BindingFlags,System.Boolean)
    name: ForAllFields
    href: AngeliA.Extension.html#AngeliA_Extension_ForAllFields__1_System_Object_System_Reflection_BindingFlags_System_Boolean_
  - name: <
  - name: T
  - name: '>'
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Reflection.BindingFlags
    name: BindingFlags
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.reflection.bindingflags
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: bool
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.boolean
  - name: )
  spec.vb:
  - uid: AngeliA.Extension.ForAllFields``1(System.Object,System.Reflection.BindingFlags,System.Boolean)
    name: ForAllFields
    href: AngeliA.Extension.html#AngeliA_Extension_ForAllFields__1_System_Object_System_Reflection_BindingFlags_System_Boolean_
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Reflection.BindingFlags
    name: BindingFlags
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.reflection.bindingflags
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: Boolean
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.boolean
  - name: )
- uid: System.Object.AngeliA.Extension.ForAllProperties``1
  commentId: M:AngeliA.Extension.ForAllProperties``1(System.Object)
  parent: AngeliA.Extension
  definition: AngeliA.Extension.ForAllProperties``1(System.Object)
  href: AngeliA.Extension.html#AngeliA_Extension_ForAllProperties__1_System_Object_
  name: ForAllProperties<T>(object)
  nameWithType: Extension.ForAllProperties<T>(object)
  fullName: AngeliA.Extension.ForAllProperties<T>(object)
  nameWithType.vb: Extension.ForAllProperties(Of T)(Object)
  fullName.vb: AngeliA.Extension.ForAllProperties(Of T)(Object)
  name.vb: ForAllProperties(Of T)(Object)
  spec.csharp:
  - uid: AngeliA.Extension.ForAllProperties``1(System.Object)
    name: ForAllProperties
    href: AngeliA.Extension.html#AngeliA_Extension_ForAllProperties__1_System_Object_
  - name: <
  - name: T
  - name: '>'
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
  spec.vb:
  - uid: AngeliA.Extension.ForAllProperties``1(System.Object)
    name: ForAllProperties
    href: AngeliA.Extension.html#AngeliA_Extension_ForAllProperties__1_System_Object_
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
- uid: System.ValueType
  commentId: T:System.ValueType
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.valuetype
  name: ValueType
  nameWithType: ValueType
  fullName: System.ValueType
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object
  name: object
  nameWithType: object
  fullName: object
  nameWithType.vb: Object
  fullName.vb: Object
  name.vb: Object
- uid: AngeliA.Extension.ForAllFields``1(System.Object,System.Reflection.BindingFlags,System.Boolean)
  commentId: M:AngeliA.Extension.ForAllFields``1(System.Object,System.Reflection.BindingFlags,System.Boolean)
  isExternal: true
  href: AngeliA.Extension.html#AngeliA_Extension_ForAllFields__1_System_Object_System_Reflection_BindingFlags_System_Boolean_
  name: ForAllFields<T>(object, BindingFlags, bool)
  nameWithType: Extension.ForAllFields<T>(object, BindingFlags, bool)
  fullName: AngeliA.Extension.ForAllFields<T>(object, System.Reflection.BindingFlags, bool)
  nameWithType.vb: Extension.ForAllFields(Of T)(Object, BindingFlags, Boolean)
  fullName.vb: AngeliA.Extension.ForAllFields(Of T)(Object, System.Reflection.BindingFlags, Boolean)
  name.vb: ForAllFields(Of T)(Object, BindingFlags, Boolean)
  spec.csharp:
  - uid: AngeliA.Extension.ForAllFields``1(System.Object,System.Reflection.BindingFlags,System.Boolean)
    name: ForAllFields
    href: AngeliA.Extension.html#AngeliA_Extension_ForAllFields__1_System_Object_System_Reflection_BindingFlags_System_Boolean_
  - name: <
  - name: T
  - name: '>'
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Reflection.BindingFlags
    name: BindingFlags
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.reflection.bindingflags
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: bool
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.boolean
  - name: )
  spec.vb:
  - uid: AngeliA.Extension.ForAllFields``1(System.Object,System.Reflection.BindingFlags,System.Boolean)
    name: ForAllFields
    href: AngeliA.Extension.html#AngeliA_Extension_ForAllFields__1_System_Object_System_Reflection_BindingFlags_System_Boolean_
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Reflection.BindingFlags
    name: BindingFlags
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.reflection.bindingflags
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: Boolean
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.boolean
  - name: )
- uid: AngeliA.Extension
  commentId: T:AngeliA.Extension
  parent: AngeliA
  href: AngeliA.Extension.html
  name: Extension
  nameWithType: Extension
  fullName: AngeliA.Extension
- uid: AngeliA.Extension.ForAllProperties``1(System.Object)
  commentId: M:AngeliA.Extension.ForAllProperties``1(System.Object)
  isExternal: true
  href: AngeliA.Extension.html#AngeliA_Extension_ForAllProperties__1_System_Object_
  name: ForAllProperties<T>(object)
  nameWithType: Extension.ForAllProperties<T>(object)
  fullName: AngeliA.Extension.ForAllProperties<T>(object)
  nameWithType.vb: Extension.ForAllProperties(Of T)(Object)
  fullName.vb: AngeliA.Extension.ForAllProperties(Of T)(Object)
  name.vb: ForAllProperties(Of T)(Object)
  spec.csharp:
  - uid: AngeliA.Extension.ForAllProperties``1(System.Object)
    name: ForAllProperties
    href: AngeliA.Extension.html#AngeliA_Extension_ForAllProperties__1_System_Object_
  - name: <
  - name: T
  - name: '>'
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
  spec.vb:
  - uid: AngeliA.Extension.ForAllProperties``1(System.Object)
    name: ForAllProperties
    href: AngeliA.Extension.html#AngeliA_Extension_ForAllProperties__1_System_Object_
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
- uid: System
  commentId: N:System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system
  name: System
  nameWithType: System
  fullName: System
- uid: AngeliA.BlockRule.#ctor*
  commentId: Overload:AngeliA.BlockRule.#ctor
  href: AngeliA.BlockRule.html#AngeliA_BlockRule__ctor_AngeliA_Rule_AngeliA_Rule_AngeliA_Rule_AngeliA_Rule_AngeliA_Rule_AngeliA_Rule_AngeliA_Rule_AngeliA_Rule_
  name: BlockRule
  nameWithType: BlockRule.BlockRule
  fullName: AngeliA.BlockRule.BlockRule
  nameWithType.vb: BlockRule.New
  fullName.vb: AngeliA.BlockRule.New
  name.vb: New
- uid: AngeliA.Rule
  commentId: T:AngeliA.Rule
  parent: AngeliA
  href: AngeliA.Rule.html
  name: Rule
  nameWithType: Rule
  fullName: AngeliA.Rule
- uid: AngeliA.BlockRule
  commentId: T:AngeliA.BlockRule
  parent: AngeliA
  href: AngeliA.BlockRule.html
  name: BlockRule
  nameWithType: BlockRule
  fullName: AngeliA.BlockRule
- uid: AngeliA.BlockRule.IsEmpty*
  commentId: Overload:AngeliA.BlockRule.IsEmpty
  href: AngeliA.BlockRule.html#AngeliA_BlockRule_IsEmpty
  name: IsEmpty
  nameWithType: BlockRule.IsEmpty
  fullName: AngeliA.BlockRule.IsEmpty
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.boolean
  name: bool
  nameWithType: bool
  fullName: bool
  nameWithType.vb: Boolean
  fullName.vb: Boolean
  name.vb: Boolean
- uid: AngeliA.BlockRule.Item*
  commentId: Overload:AngeliA.BlockRule.Item
  href: AngeliA.BlockRule.html#AngeliA_BlockRule_Item_System_Int32_
  name: this
  nameWithType: BlockRule.this
  fullName: AngeliA.BlockRule.this
  nameWithType.vb: BlockRule.this[]
  fullName.vb: AngeliA.BlockRule.this[]
  name.vb: this[]
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.int32
  name: int
  nameWithType: int
  fullName: int
  nameWithType.vb: Integer
  fullName.vb: Integer
  name.vb: Integer
- uid: AngeliA.BlockRule.IsSameWith*
  commentId: Overload:AngeliA.BlockRule.IsSameWith
  href: AngeliA.BlockRule.html#AngeliA_BlockRule_IsSameWith_AngeliA_BlockRule_
  name: IsSameWith
  nameWithType: BlockRule.IsSameWith
  fullName: AngeliA.BlockRule.IsSameWith
