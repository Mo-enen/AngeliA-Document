{
  "api/AngeliA.AfterLateUpdateAttribute.html": {
    "href": "api/AngeliA.AfterLateUpdateAttribute.html",
    "title": "Class AfterLateUpdateAttribute | AngeliA",
    "summary": "Class AfterLateUpdateAttribute The function will be called after all entity.LateUpdate is called Examples [AfterLateUpdate] internal static void ExampleFunction () { }"
  },
  "api/AngeliA.AfterLayerFrameUpdate_IntLayerAttribute.html": {
    "href": "api/AngeliA.AfterLayerFrameUpdate_IntLayerAttribute.html",
    "title": "Class AfterLayerFrameUpdate_IntLayerAttribute | AngeliA",
    "summary": "Class AfterLayerFrameUpdate_IntLayerAttribute The function will be called after rendering layer update Examples [AfterLayerFrameUpdate_IntLayer] internal static void ExampleFunction () { }"
  },
  "api/AngeliA.AfterLevelRenderedAttribute.html": {
    "href": "api/AngeliA.AfterLevelRenderedAttribute.html",
    "title": "Class AfterLevelRenderedAttribute | AngeliA",
    "summary": "Class AfterLevelRenderedAttribute The function will be called after world squad render all level blocks for the current frame Examples [AfterLevelRendered] internal static void ExampleFunction () { } Constructors AfterLevelRenderedAttribute(int) The function will be called after world squad render all level blocks for the current frame Declaration public AfterLevelRenderedAttribute(int order = 0) Examples [AfterLevelRendered] internal static void ExampleFunction () { }"
  },
  "api/AngeliA.AfterimageScope.html": {
    "href": "api/AngeliA.AfterimageScope.html",
    "title": "Struct AfterimageScope | AngeliA",
    "summary": "Struct AfterimageScope Draw a continuous tailing cell effect for the objects rendering inside Implements IDisposable Examples using AngeliA; namespace AngeliaGame; public class Example { static int CurrentX = 0; static int CurrentY = 0; static int CurrentRot = 0; [OnGameUpdate] internal static void OnGameUpdate () { int speedX = QTest.Int(\"Speed X\", 50, -64, 64); int speedY = QTest.Int(\"Speed Y\", 10, -64, 64); int rotateSpeed = QTest.Int(\"Rotate Speed\", 8, -64, 64); int count = QTest.Int(\"Count\", 8, 1, 24); int frameStep = QTest.Int(\"Frame Step\", 16, 1, 32); int scaleStart = QTest.Int(\"Scale Start\", 1000, 0, 2000); int scaleEnd = QTest.Int(\"Scale End\", 100, 0, 2000); using (new AfterimageScope( speedX, speedY, Color32.WHITE, Color32.CLEAR, rotateSpeed, count, frameStep, scaleStart, scaleEnd )) { var cameraRect = Renderer.CameraRect; // Render object here Renderer.Draw( BuiltInSprite.ICON_ENTITY, cameraRect.x + CurrentX, cameraRect.y + CurrentY, 500, 500, CurrentRot, Const.CEL * 2, Const.CEL * 2 ); // Move the object CurrentX += speedX; CurrentY += speedY; CurrentRot += rotateSpeed; CurrentX = CurrentX.UMod(cameraRect.width); CurrentY = CurrentY.UMod(cameraRect.height); } } } Constructors AfterimageScope(int, int, Color32, Color32, int, int, int, int, int, int) Draw a continuous tailing cell effect for the objects rendering inside Declaration public AfterimageScope(int speedX, int speedY, Color32 tintStart, Color32 tintEnd, int rotateSpeed = 0, int count = 3, int frameStep = 2, int scaleStart = 1000, int scaleEnd = 1000, int renderLayer = 3) Parameters Type Name Description int speedX How fast is the object moves horizontaly int speedY How fast is the object moves verticaly Color32 tintStart Color tint for start of the effect Color32 tintEnd Color tint for end of the effect int rotateSpeed How fast does the object rotate int count How many effect should be drawn int frameStep Frame distance between each effects int scaleStart Size scale when the effect start (0 means 0%, 1000 means 100%) int scaleEnd Size scale when the effect end (0 means 0%, 1000 means 100%) int renderLayer Which layer does this effect renders into. Use RenderLayer.XXX to get the value. AfterimageScope(int, int, int, int, int, int, int, int) Draw a continuous tailing cell effect for the objects rendering inside Declaration public AfterimageScope(int speedX, int speedY, int rotateSpeed = 0, int count = 3, int frameStep = 2, int scaleStart = 1000, int scaleEnd = 1000, int renderLayer = 3) Parameters Type Name Description int speedX How fast is the object moves horizontaly int speedY How fast is the object moves verticaly int rotateSpeed How fast does the object rotate int count How many effect should be drawn int frameStep Frame distance between each effects int scaleStart Size scale when the effect start (0 means 0%, 1000 means 100%) int scaleEnd Size scale when the effect end (0 means 0%, 1000 means 100%) int renderLayer Which layer does this effect renders into. Use RenderLayer.XXX to get the value. Methods Dispose() Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources. Declaration public void Dispose()"
  },
  "api/AngeliA.Alignment.html": {
    "href": "api/AngeliA.Alignment.html",
    "title": "Enum Alignment | AngeliA",
    "summary": "Enum Alignment Fields Name Description"
  },
  "api/AngeliA.AngePath.html": {
    "href": "api/AngeliA.AngePath.html",
    "title": "Class AngePath | AngeliA",
    "summary": "Class AngePath Utility class for path-related logic in an AngeliA project Fields CONVERSATION_FILE_EXT Declaration public const string CONVERSATION_FILE_EXT = \"txt\" DesktopPath Declaration public static string DesktopPath EDITABLE_CONVERSATION_FILE_EXT Declaration public const string EDITABLE_CONVERSATION_FILE_EXT = \"conversation\" EDITABLE_CONVERSATION_SEARCH_PATTERN Declaration public const string EDITABLE_CONVERSATION_SEARCH_PATTERN = \"*.conversation\" EQ_INVENTORY_FILE_EXT Inventory file extension with equipment data Declaration public const string EQ_INVENTORY_FILE_EXT = \"invq\" EQ_INVENTORY_SEARCH_PATTERN Inventory file search pattern with equipment data Declaration public const string EQ_INVENTORY_SEARCH_PATTERN = \"*.invq\" INVENTORY_FILE_EXT Declaration public const string INVENTORY_FILE_EXT = \"inv\" INVENTORY_SEARCH_PATTERN Declaration public const string INVENTORY_SEARCH_PATTERN = \"*.inv\" LANGUAGE_FILE_EXT Declaration public const string LANGUAGE_FILE_EXT = \"txt\" LANGUAGE_SEARCH_PATTERN Declaration public const string LANGUAGE_SEARCH_PATTERN = \"*.txt\" MAP_FILE_EXT Declaration public const string MAP_FILE_EXT = \"ibb\" MAP_SEARCH_PATTERN Declaration public const string MAP_SEARCH_PATTERN = \"*.ibb\" MOVEMENT_CONFIG_FILE_EXT Declaration public const string MOVEMENT_CONFIG_FILE_EXT = \"txt\" MOVEMENT_CONFIG_SEARCH_PATTERN Declaration public const string MOVEMENT_CONFIG_SEARCH_PATTERN = \"*.txt\" PACKAGE_FILE_EXT Declaration public const string PACKAGE_FILE_EXT = \"angepack\" PACKAGE_SEARCH_PATTERN Declaration public const string PACKAGE_SEARCH_PATTERN = \"*.angepack\" SHEET_FILE_EXT Declaration public const string SHEET_FILE_EXT = \"sheet\" SHEET_SEARCH_PATTERN Declaration public const string SHEET_SEARCH_PATTERN = \"*.sheet\" Properties BuiltInUniverseRoot Game universe folder path. This folder contents project data for an AngeliA project Declaration public static string BuiltInUniverseRoot { get; } PersistentDataPath Declaration public static string PersistentDataPath { get; } TempDataPath Declaration public static string TempDataPath { get; } Methods GetAsepriteRoot(string) Declaration public static string GetAsepriteRoot(string universeFolder) GetAtlasRoot(string) Declaration public static string GetAtlasRoot(string universeFolder) GetBuiltInSheetPath(string) Declaration public static string GetBuiltInSheetPath(string universeFolder) GetCharacterMovementConfigRoot(string) Declaration public static string GetCharacterMovementConfigRoot(string universeFolder) GetConversationRoot(string) Declaration public static string GetConversationRoot(string universeFolder) GetEditableConversationRoot(string) Declaration public static string GetEditableConversationRoot(string universeFolder) GetGameSheetPath(string) Declaration public static string GetGameSheetPath(string universeFolder) GetLanguageRoot(string) Declaration public static string GetLanguageRoot(string universeFolder) GetMapRoot(string) Declaration public static string GetMapRoot(string universeFolder) GetPersistentDataPath(string, string) Declaration public static string GetPersistentDataPath(string devName, string productName) GetSheetRoot(string) Declaration public static string GetSheetRoot(string universeFolder) GetSlotInventoryRoot(string, int) Declaration public static string GetSlotInventoryRoot(string savingFolder, int slot) GetSlotMetaCharacterConfigRoot(string, int) Declaration public static string GetSlotMetaCharacterConfigRoot(string savingFolder, int slot) GetSlotMetaRoot(string, int) Declaration public static string GetSlotMetaRoot(string savingFolder, int slot) GetSlotRoot(string, int) Declaration public static string GetSlotRoot(string savingFolder, int slot) GetSlotUserMapRoot(string, int) Declaration public static string GetSlotUserMapRoot(string savingFolder, int slot) GetTempDataPath(string, string) Declaration public static string GetTempDataPath(string devName, string productName) GetUniverseCoverPath(string) Declaration public static string GetUniverseCoverPath(string universeFolder) GetUniverseFontRoot(string) Declaration public static string GetUniverseFontRoot(string universeFolder) GetUniverseInfoPath(string) Declaration public static string GetUniverseInfoPath(string universeFolder) GetUniverseMetaRoot(string) Declaration public static string GetUniverseMetaRoot(string universeFolder) GetUniverseMusicRoot(string) Declaration public static string GetUniverseMusicRoot(string universeFolder) GetUniverseRoot(string) Declaration public static string GetUniverseRoot(string projectFolder) GetUniverseSoundRoot(string) Declaration public static string GetUniverseSoundRoot(string universeFolder)"
  },
  "api/AngeliA.AngeSprite.html": {
    "href": "api/AngeliA.AngeSprite.html",
    "title": "Class AngeSprite | AngeliA",
    "summary": "Class AngeSprite Artwork sprite data for rendering the game Fields Atlas Instance of the atlas this sprite belongs to Declaration public Atlas Atlas AtlasID AngeHash of the atlas this sprite belongs to Declaration public int AtlasID Duration Animation duration of this sprite Declaration public int Duration EMPTY Declaration public static readonly AngeSprite EMPTY GlobalBorder Border value in global space. Declaration public Int4 GlobalBorder GlobalHeight Height in global space. Calculate from the pixel rect height multiply Const.ART_SCALE Declaration public int GlobalHeight GlobalWidth Width in global space. Calculate from the pixel rect width multiply Const.ART_SCALE Declaration public int GlobalWidth Group Instance of the sprite group this sprite belongs to. Null if this sprite is individual. Declaration public SpriteGroup Group ID Global unique ID for this sprite. from RealName.AngeHash(); Declaration public int ID IsTrigger True if this sprite is tagged as trigger. Declaration public bool IsTrigger LocalZ Z value for sort rendering cells Declaration public int LocalZ PivotX Pivot X (0 means left edge. 1000 means right edge) Declaration public int PivotX PivotY Pivot Y (0 means bottom edge. 1000 means top edge) Declaration public int PivotY PixelRect Rect position of the pixel data inside the atlas canvas Declaration public IRect PixelRect Pixels The pixels content data Declaration public Color32[] Pixels RealName Uniaue logical name of this sprite. Declaration public string RealName Rule Rule for auto tiling map blocks Declaration public BlockRule Rule SummaryTint Average color of the pixels Declaration public Color32 SummaryTint Tag Meta tag of this sprite. Multiple tags can be contains at same time. Declaration public Tag Tag Methods CopyTo(AngeSprite) Copy the data to the given sprite Declaration public AngeSprite CopyTo(AngeSprite target) Returns Type Description AngeSprite The target sprite CreateCopy() Create a new sprite instance with same data with this one Declaration public AngeSprite CreateCopy() MakeDedicatedForTexture(object, Sheet) Link the given sprite to the texture Declaration public void MakeDedicatedForTexture(object texture, Sheet sheet) RemoveFromDedicatedTexture(Sheet) Remove the texture dedicated sprite Declaration public void RemoveFromDedicatedTexture(Sheet sheet) ResizePixelRect(IRect, bool, out bool) Set pixel content data to new size without delete the data inside Declaration public void ResizePixelRect(IRect newRect, bool resizeBorder, out bool contentChanged) Parameters Type Name Description IRect newRect New pixel rect position bool resizeBorder True if auto resize the border bool contentChanged True if any pixel data changed SetPixelDirty() Mark this sprite as changed without save Declaration public void SetPixelDirty() ValidBorders(Direction8?) Make sure the borders don't overlaps each others Declaration public void ValidBorders(Direction8? priority = null)"
  },
  "api/AngeliA.AntiBuffItem-1.TriggerMode.html": {
    "href": "api/AngeliA.AntiBuffItem-1.TriggerMode.html",
    "title": "Enum AntiBuffItem<B>.TriggerMode | AngeliA",
    "summary": "Enum AntiBuffItem<B>.TriggerMode How anti buff item been trigger Fields Name Description"
  },
  "api/AngeliA.AntiBuffItem-1.html": {
    "href": "api/AngeliA.AntiBuffItem-1.html",
    "title": "Class AntiBuffItem<B> | AngeliA",
    "summary": "Class AntiBuffItem<B> A type of item that prevents a given type of buff from giving to the host Implements IMapItem Type Parameters Name Description B Type of the buff to prevent Constructors AntiBuffItem() Declaration public AntiBuffItem() Properties Duration How long does it work after been use in frame Declaration public abstract int Duration { get; } Mode How this item been trigger Declaration protected abstract AntiBuffItem<B>.TriggerMode Mode { get; } Methods BeforeItemUpdate_FromInventory(Character, int, int) This function is called every frame when this item is in an holder's inventory Declaration public override void BeforeItemUpdate_FromInventory(Character character, int inventoryID, int itemIndex) int inventoryID ID of the inventory Overrides Item.BeforeItemUpdate_FromInventory(Character, int, int) CanUse(Character) True if this item can be use at current frame Declaration public override bool CanUse(Character character) Overrides Item.CanUse(Character) OnAntiBuffTriggerd(Character) This function is called when the item is triggered Declaration public virtual void OnAntiBuffTriggerd(Character target) Parameters Type Name Description Character target Target character that will get the effect Use(Character, int, int, out bool) Perform the logic when the item get used Declaration public override bool Use(Character character, int inventoryID, int itemIndex, out bool consume) int inventoryID Inventory ID of this holder int itemIndex Index of this item inside the inventory bool consume True if the item should disappear after being used Returns Type Description bool True if the item is used Overrides Item.Use(Character, int, int, out bool)"
  },
  "api/AngeliA.Atlas.html": {
    "href": "api/AngeliA.Atlas.html",
    "title": "Class Atlas | AngeliA",
    "summary": "Class Atlas Container of sprites inside artwork sheet Fields ID Unique ID of this atlas. From Name.AngeHash(); Declaration public int ID Name Unique name of this atlas Declaration public string Name State Internal data used for display folder layout Declaration public AtlasState State Type Declaration public AtlasType Type Properties InFolder True if this atlas is inside a folder Declaration public bool InFolder { get; } IsFolder True if this atlas is folder Declaration public bool IsFolder { get; }"
  },
  "api/AngeliA.AtlasState.html": {
    "href": "api/AngeliA.AtlasState.html",
    "title": "Enum AtlasState | AngeliA",
    "summary": "Enum AtlasState Internal data used for display folder layout Fields Name Description"
  },
  "api/AngeliA.AtlasType.html": {
    "href": "api/AngeliA.AtlasType.html",
    "title": "Enum AtlasType | AngeliA",
    "summary": "Enum AtlasType Type of sprite atlas Fields Name Description Background Sprites inside are background blocks General No special info Level Sprites inside are level blocks"
  },
  "api/AngeliA.AudioCode.html": {
    "href": "api/AngeliA.AudioCode.html",
    "title": "Class AudioCode | AngeliA",
    "summary": "Class AudioCode Quick setup for an audio ID Examples private static readonly AudioCode AudioCodeName = \"Name of audio file without extension\"; Constructors AudioCode(string) Quick setup for an audio ID Declaration public AudioCode(string name) Examples private static readonly AudioCode AudioCodeName = \"Name of audio file without extension\"; Fields ID Declaration public readonly int ID Properties Name Declaration public string Name { get; } Operators implicit operator int(AudioCode) Declaration public static implicit operator int(AudioCode code) implicit operator AudioCode(string) Declaration public static implicit operator AudioCode(string value)"
  },
  "api/AngeliA.AudioData.html": {
    "href": "api/AngeliA.AudioData.html",
    "title": "Class AudioData | AngeliA",
    "summary": "Class AudioData Fields ID Declaration public int ID Name Declaration public string Name Path Declaration public string Path"
  },
  "api/AngeliA.AutoValidList-1.html": {
    "href": "api/AngeliA.AutoValidList-1.html",
    "title": "Class AutoValidList<T> | AngeliA",
    "summary": "Class AutoValidList<T> A list that automatically remove element inside based on the given function Constructors AutoValidList(int, Func<T, bool>) A list that automatically remove element inside based on the given function Declaration public AutoValidList(int capacity, Func<T, bool> updateFunc) Properties Capacity Max element count Declaration public int Capacity { get; } Count How many elements are currently inside this list Declaration public int Count { get; } Methods Add(T) Declaration public bool Add(T element) Update() Valid all elements in the list based on the given funtion. Declaration public void Update()"
  },
  "api/AngeliA.BasicGlobalItemCombinationAttribute.html": {
    "href": "api/AngeliA.BasicGlobalItemCombinationAttribute.html",
    "title": "Class BasicGlobalItemCombinationAttribute | AngeliA",
    "summary": "Class BasicGlobalItemCombinationAttribute Constructors BasicGlobalItemCombinationAttribute(ItemCombinationParam, ItemCombinationParam, ItemCombinationParam, ItemCombinationParam, string, int, string, string, string, string) Declaration protected BasicGlobalItemCombinationAttribute(ItemCombinationParam itemA, ItemCombinationParam itemB, ItemCombinationParam itemC, ItemCombinationParam itemD, string result, int count = 1, string keepId0 = \"\", string keepId1 = \"\", string keepId2 = \"\", string keepId3 = \"\")"
  },
  "api/AngeliA.BasicItemCombinationAttribute.html": {
    "href": "api/AngeliA.BasicItemCombinationAttribute.html",
    "title": "Class BasicItemCombinationAttribute | AngeliA",
    "summary": "Class BasicItemCombinationAttribute Define an item combination to craft the item. Constructors BasicItemCombinationAttribute(ItemCombinationParam, ItemCombinationParam, ItemCombinationParam, ItemCombinationParam, int, string, string, string, string) Define an item combination to craft the item. Declaration protected BasicItemCombinationAttribute(ItemCombinationParam itemA, ItemCombinationParam itemB, ItemCombinationParam itemC, ItemCombinationParam itemD, int count = 1, string keepId0 = \"\", string keepId1 = \"\", string keepId2 = \"\", string keepId3 = \"\") Parameters Type Name Description ItemCombinationParam itemA An item required to craft the result item ItemCombinationParam itemB An item required to craft the result item ItemCombinationParam itemC An item required to craft the result item ItemCombinationParam itemD An item required to craft the result item int count How many item does it craft at once string keepId0 Do not consume this item string keepId1 Do not consume this item string keepId2 Do not consume this item string keepId3 Do not consume this item"
  },
  "api/AngeliA.BeforeBeforeUpdateAttribute.html": {
    "href": "api/AngeliA.BeforeBeforeUpdateAttribute.html",
    "title": "Class BeforeBeforeUpdateAttribute | AngeliA",
    "summary": "Class BeforeBeforeUpdateAttribute The function will be called before any entity.BeforeUpdate is called Examples [BeforeBeforeUpdate] internal static void ExampleFunction () { }"
  },
  "api/AngeliA.BeforeFirstUpdateAttribute.html": {
    "href": "api/AngeliA.BeforeFirstUpdateAttribute.html",
    "title": "Class BeforeFirstUpdateAttribute | AngeliA",
    "summary": "Class BeforeFirstUpdateAttribute The function will be called before any entity.FirstUpdate is called Examples [BeforeFirstUpdate] internal static void ExampleFunction () { }"
  },
  "api/AngeliA.BeforeLateUpdateAttribute.html": {
    "href": "api/AngeliA.BeforeLateUpdateAttribute.html",
    "title": "Class BeforeLateUpdateAttribute | AngeliA",
    "summary": "Class BeforeLateUpdateAttribute The function will be called before any entity.LateUpdate is called Examples [BeforeLateUpdate] internal static void ExampleFunction () { }"
  },
  "api/AngeliA.BeforeLayerFrameUpdate_IntLayerAttribute.html": {
    "href": "api/AngeliA.BeforeLayerFrameUpdate_IntLayerAttribute.html",
    "title": "Class BeforeLayerFrameUpdate_IntLayerAttribute | AngeliA",
    "summary": "Class BeforeLayerFrameUpdate_IntLayerAttribute The function will be called before rendering layer update Examples [BeforeLayerFrameUpdate_IntLayer] internal static void ExampleFunction (int layer) { }"
  },
  "api/AngeliA.BeforeLevelRenderedAttribute.html": {
    "href": "api/AngeliA.BeforeLevelRenderedAttribute.html",
    "title": "Class BeforeLevelRenderedAttribute | AngeliA",
    "summary": "Class BeforeLevelRenderedAttribute The function will be called before world squad rendering any level blocks for the current frame Examples [BeforeLevelRendered] internal static void ExampleFunction () { } Constructors BeforeLevelRenderedAttribute(int) The function will be called before world squad rendering any level blocks for the current frame Declaration public BeforeLevelRenderedAttribute(int order = 0) Examples [BeforeLevelRendered] internal static void ExampleFunction () { }"
  },
  "api/AngeliA.BeforeSavingSlotChangedAttribute.html": {
    "href": "api/AngeliA.BeforeSavingSlotChangedAttribute.html",
    "title": "Class BeforeSavingSlotChangedAttribute | AngeliA",
    "summary": "Class BeforeSavingSlotChangedAttribute The function will be called before user change the saving slot. Universe.BuiltIn.CurrentSavingSlot is still the old value when this function is called. Examples [BeforeSavingSlotChanged] internal static void ExampleFunction () { } Constructors BeforeSavingSlotChangedAttribute(int) The function will be called before user change the saving slot. Universe.BuiltIn.CurrentSavingSlot is still the old value when this function is called. Declaration public BeforeSavingSlotChangedAttribute(int order = 0) Parameters Type Name Description int order Function with smaller order will be called earlier Examples [BeforeSavingSlotChanged] internal static void ExampleFunction () { }"
  },
  "api/AngeliA.BeforeUpdateUpdateAttribute.html": {
    "href": "api/AngeliA.BeforeUpdateUpdateAttribute.html",
    "title": "Class BeforeUpdateUpdateAttribute | AngeliA",
    "summary": "Class BeforeUpdateUpdateAttribute The function will be called before any entity.Update is called Examples [BeforeUpdateUpdate] internal static void ExampleFunction () { }"
  },
  "api/AngeliA.BlockBuilder.html": {
    "href": "api/AngeliA.BlockBuilder.html",
    "title": "Class BlockBuilder | AngeliA",
    "summary": "Class BlockBuilder Item that represent a map block inside inventory. Also handles the build block to map logic Implements IMapItem Constructors BlockBuilder(int, string, BlockType, int) Declaration public BlockBuilder(int blockID, string blockName, BlockType blockType, int maxStackCount) Properties AvailableWhenClimbing True if character can use this tool when climbing Declaration public override bool AvailableWhenClimbing { get; } Overrides HandTool.AvailableWhenClimbing AvailableWhenSliding True if character can use this tool when sliding on wall Declaration public override bool AvailableWhenSliding { get; } Overrides HandTool.AvailableWhenSliding AvailableWhenSquatting True if character can use this tool when squatting Declaration public override bool AvailableWhenSquatting { get; } Overrides HandTool.AvailableWhenSquatting AvailableWhenWalking True if character can use this tool when walking Declaration public override bool AvailableWhenWalking { get; } Overrides HandTool.AvailableWhenWalking BlockID ID of the block it holds Declaration public int BlockID { get; init; } BlockType Type of the block it holds Declaration public BlockType BlockType { get; init; } DefaultMovementSpeedRateOnUse How fast can the character move when using this tool. (0 means do not move. 1000 means move as normal speed. null means do not effect movement speed.) Declaration public override int? DefaultMovementSpeedRateOnUse { get; } Overrides HandTool.DefaultMovementSpeedRateOnUse Duration How long does the tool perform it's function for once Declaration public override int Duration { get; } Overrides HandTool.Duration MaxStackCount Count limitation for multiple items inside one inventory slot Declaration public override int MaxStackCount { get; } Overrides Equipment.MaxStackCount RunningMovementSpeedRateOnUse How fast can the character move when using this tool when running. (0 means do not move. 1000 means move as normal speed. null means do not effect movement speed.) Declaration public override int? RunningMovementSpeedRateOnUse { get; } Overrides HandTool.RunningMovementSpeedRateOnUse WalkingMovementSpeedRateOnUse How fast can the character move when using this tool when walking. (0 means do not move. 1000 means move as normal speed. null means do not effect movement speed.) Declaration public override int? WalkingMovementSpeedRateOnUse { get; } Overrides HandTool.WalkingMovementSpeedRateOnUse Methods DrawItem(Entity, IRect, Color32, int) Call this function to render the item Declaration public override void DrawItem(Entity holder, IRect rect, Color32 tint, int z) Parameters Type Name Description Entity holder Holder that own this item IRect rect Rect position in global space Color32 tint Color tint int z Z value for sort rendering cells Overrides Item.DrawItem(Entity, IRect, Color32, int) GetHandheldPoseAnimationID(Character) Get the ID of the pose animation for handheld Declaration public override int GetHandheldPoseAnimationID(Character character) Overrides HandTool.GetHandheldPoseAnimationID(Character) GetPerformPoseAnimationID(Character) Get the ID of the pose animation for using the tool Declaration public override int GetPerformPoseAnimationID(Character character) Overrides HandTool.GetPerformPoseAnimationID(Character) OnPoseAnimationUpdate_FromEquipment(PoseCharacterRenderer) This function is called every frame when a pose-style character equipping this item Declaration public override void OnPoseAnimationUpdate_FromEquipment(PoseCharacterRenderer rendering) Overrides Item.OnPoseAnimationUpdate_FromEquipment(PoseCharacterRenderer) OnToolPerform(Character) This function is called when this tool is used for once by the given character Declaration public override void OnToolPerform(Character sender) Overrides HandTool.OnToolPerform(Character)"
  },
  "api/AngeliA.BlockColor.html": {
    "href": "api/AngeliA.BlockColor.html",
    "title": "Class BlockColor | AngeliA",
    "summary": "Class BlockColor Element block that set the color tint of the overlapping level block Implements IMapItem Properties Color Target color tint Declaration public abstract Color32 Color { get; }"
  },
  "api/AngeliA.BlockColorBlack.html": {
    "href": "api/AngeliA.BlockColorBlack.html",
    "title": "Class BlockColorBlack | AngeliA",
    "summary": "Class BlockColorBlack Implements IMapItem Fields TYPE_ID Declaration public static readonly int TYPE_ID Properties Color Declaration public override Color32 Color { get; } Overrides BlockColor.Color"
  },
  "api/AngeliA.BlockColorBlue.html": {
    "href": "api/AngeliA.BlockColorBlue.html",
    "title": "Class BlockColorBlue | AngeliA",
    "summary": "Class BlockColorBlue Implements IMapItem Fields TYPE_ID Declaration public static readonly int TYPE_ID Properties Color Declaration public override Color32 Color { get; } Overrides BlockColor.Color"
  },
  "api/AngeliA.BlockColorCyan.html": {
    "href": "api/AngeliA.BlockColorCyan.html",
    "title": "Class BlockColorCyan | AngeliA",
    "summary": "Class BlockColorCyan Implements IMapItem Fields TYPE_ID Declaration public static readonly int TYPE_ID Properties Color Declaration public override Color32 Color { get; } Overrides BlockColor.Color"
  },
  "api/AngeliA.BlockColorGreen.html": {
    "href": "api/AngeliA.BlockColorGreen.html",
    "title": "Class BlockColorGreen | AngeliA",
    "summary": "Class BlockColorGreen Implements IMapItem Fields TYPE_ID Declaration public static readonly int TYPE_ID Properties Color Declaration public override Color32 Color { get; } Overrides BlockColor.Color"
  },
  "api/AngeliA.BlockColorGrey.html": {
    "href": "api/AngeliA.BlockColorGrey.html",
    "title": "Class BlockColorGrey | AngeliA",
    "summary": "Class BlockColorGrey Implements IMapItem Fields TYPE_ID Declaration public static readonly int TYPE_ID Properties Color Declaration public override Color32 Color { get; } Overrides BlockColor.Color"
  },
  "api/AngeliA.BlockColorOrange.html": {
    "href": "api/AngeliA.BlockColorOrange.html",
    "title": "Class BlockColorOrange | AngeliA",
    "summary": "Class BlockColorOrange Implements IMapItem Fields TYPE_ID Declaration public static readonly int TYPE_ID Properties Color Declaration public override Color32 Color { get; } Overrides BlockColor.Color"
  },
  "api/AngeliA.BlockColorPink.html": {
    "href": "api/AngeliA.BlockColorPink.html",
    "title": "Class BlockColorPink | AngeliA",
    "summary": "Class BlockColorPink Implements IMapItem Fields TYPE_ID Declaration public static readonly int TYPE_ID Properties Color Declaration public override Color32 Color { get; } Overrides BlockColor.Color"
  },
  "api/AngeliA.BlockColorPurple.html": {
    "href": "api/AngeliA.BlockColorPurple.html",
    "title": "Class BlockColorPurple | AngeliA",
    "summary": "Class BlockColorPurple Implements IMapItem Fields TYPE_ID Declaration public static readonly int TYPE_ID Properties Color Declaration public override Color32 Color { get; } Overrides BlockColor.Color"
  },
  "api/AngeliA.BlockColorRed.html": {
    "href": "api/AngeliA.BlockColorRed.html",
    "title": "Class BlockColorRed | AngeliA",
    "summary": "Class BlockColorRed Implements IMapItem Fields TYPE_ID Declaration public static readonly int TYPE_ID Properties Color Declaration public override Color32 Color { get; } Overrides BlockColor.Color"
  },
  "api/AngeliA.BlockColorYellow.html": {
    "href": "api/AngeliA.BlockColorYellow.html",
    "title": "Class BlockColorYellow | AngeliA",
    "summary": "Class BlockColorYellow Implements IMapItem Fields TYPE_ID Declaration public static readonly int TYPE_ID Properties Color Declaration public override Color32 Color { get; } Overrides BlockColor.Color"
  },
  "api/AngeliA.BlockColoringSystem.html": {
    "href": "api/AngeliA.BlockColoringSystem.html",
    "title": "Class BlockColoringSystem | AngeliA",
    "summary": "Class BlockColoringSystem Core system for the level block tint from element Methods TryGetColor(int, out Color32) Get the tint color from given element ID Declaration public static bool TryGetColor(int elementID, out Color32 color)"
  },
  "api/AngeliA.BlockPicker.html": {
    "href": "api/AngeliA.BlockPicker.html",
    "title": "Class BlockPicker | AngeliA",
    "summary": "Class BlockPicker Item that represent a map tool inside inventory. Also handles the pick block from map logic Implements IMapItem Properties AllowPickBackgroundBlock True if the tool can pick background blocks from map Declaration public virtual bool AllowPickBackgroundBlock { get; } AllowPickBlockEntity True if the tool can pick entity blocks from map Declaration public virtual bool AllowPickBlockEntity { get; } AllowPickLevelBlock True if the tool can pick level blocks from map Declaration public virtual bool AllowPickLevelBlock { get; } AvailableWhenSliding True if character can use this tool when sliding on wall Declaration public override bool AvailableWhenSliding { get; } Overrides HandTool.AvailableWhenSliding AvailableWhenSquatting True if character can use this tool when squatting Declaration public override bool AvailableWhenSquatting { get; } Overrides HandTool.AvailableWhenSquatting AvailableWhenWalking True if character can use this tool when walking Declaration public override bool AvailableWhenWalking { get; } Overrides HandTool.AvailableWhenWalking DefaultMovementSpeedRateOnUse How fast can the character move when using this tool. (0 means do not move. 1000 means move as normal speed. null means do not effect movement speed.) Declaration public override int? DefaultMovementSpeedRateOnUse { get; } Overrides HandTool.DefaultMovementSpeedRateOnUse DropItemAfterPicked True if the tool create an ItemHolder holds the block after pick the block Declaration public virtual bool DropItemAfterPicked { get; } Duration How long does the tool perform it's function for once Declaration public override int Duration { get; } Overrides HandTool.Duration MaxStackCount Count limitation for multiple items inside one inventory slot Declaration public override int MaxStackCount { get; } Overrides Equipment.MaxStackCount MouseUnitRange Range limitation for mouse in unit space Declaration public virtual int MouseUnitRange { get; } PerformDelayRate How many frame based on \"duration\" does the internal tool logic invoke after character start to use the tool. (0 means immediately invoke. 1000 means invoke after \"duration\" frames) Declaration public override int PerformDelayRate { get; } Overrides HandTool.PerformDelayRate RunningMovementSpeedRateOnUse How fast can the character move when using this tool when running. (0 means do not move. 1000 means move as normal speed. null means do not effect movement speed.) Declaration public override int? RunningMovementSpeedRateOnUse { get; } Overrides HandTool.RunningMovementSpeedRateOnUse UseMouseToPick True if the tool allow user to use mouse Declaration public virtual bool UseMouseToPick { get; } UseStackAsUsage True if this tool treat it's inventory stack count as durability bar Declaration public override bool UseStackAsUsage { get; } Overrides HandTool.UseStackAsUsage WalkingMovementSpeedRateOnUse How fast can the character move when using this tool when walking. (0 means do not move. 1000 means move as normal speed. null means do not effect movement speed.) Declaration public override int? WalkingMovementSpeedRateOnUse { get; } Overrides HandTool.WalkingMovementSpeedRateOnUse Methods DrawPickTargetHighlight(int, int, bool) Draw the UI cursor for target block Declaration protected virtual void DrawPickTargetHighlight(int unitX, int unitY, bool hasTarget) Parameters Type Name Description int unitX Position in unit space int unitY Position in unit space bool hasTarget True if target map block founded OnPoseAnimationUpdate_FromEquipment(PoseCharacterRenderer) This function is called every frame when a pose-style character equipping this item Declaration public override void OnPoseAnimationUpdate_FromEquipment(PoseCharacterRenderer rendering) Overrides Item.OnPoseAnimationUpdate_FromEquipment(PoseCharacterRenderer) OnToolPerform(Character) This function is called when this tool is used for once by the given character Declaration public override void OnToolPerform(Character sender) Overrides HandTool.OnToolPerform(Character)"
  },
  "api/AngeliA.BlockRule.html": {
    "href": "api/AngeliA.BlockRule.html",
    "title": "Struct BlockRule | AngeliA",
    "summary": "Struct BlockRule Checking rules for auto tiling map blocks for a source block Constructors BlockRule(Rule, Rule, Rule, Rule, Rule, Rule, Rule, Rule) Checking rules for auto tiling map blocks for a source block Declaration public BlockRule(Rule ruleTL, Rule ruleT, Rule ruleTR, Rule ruleL, Rule ruleR, Rule ruleBL, Rule ruleB, Rule ruleBR) Parameters Type Name Description Rule ruleTL Rule apply to the top-left block Rule ruleT Rule apply to the top block Rule ruleTR Rule apply to the top-right block Rule ruleL Rule apply to the left block Rule ruleR Rule apply to the right block Rule ruleBL Rule apply to the bottom-left block Rule ruleB Rule apply to the bottom block Rule ruleBR Rule apply to the bottom-right block Fields EMPTY Empty rule what don't perform any rule check Declaration public static readonly BlockRule EMPTY RuleB Rule apply to the bottom block Declaration public Rule RuleB RuleBL Rule apply to the bottom-left block Declaration public Rule RuleBL RuleBR Rule apply to the bottom-right block Declaration public Rule RuleBR RuleL Rule apply to the left block Declaration public Rule RuleL RuleR Rule apply to the right block Declaration public Rule RuleR RuleT Rule apply to the top block Declaration public Rule RuleT RuleTL Rule apply to the top-left block Declaration public Rule RuleTL RuleTR Rule apply to the top-right block Declaration public Rule RuleTR Properties IsEmpty True if the rule is all set to whatever Declaration public readonly bool IsEmpty { get; } this[int] Get rule at given index. (↖ ↑ ↗ ← → ↙ ↓ ↘) Declaration public Rule this[int i] { readonly get; set; } Methods IsSameWith(BlockRule) True if the rule is same with given rule Declaration public readonly bool IsSameWith(BlockRule other)"
  },
  "api/AngeliA.BlockType.html": {
    "href": "api/AngeliA.BlockType.html",
    "title": "Enum BlockType | AngeliA",
    "summary": "Enum BlockType Type of blocks in map Fields Name Description Background Static block without collider Element Internal IMapItem that do not spawn into stage Entity Dynamic object with logic attached Level Static block with collider"
  },
  "api/AngeliA.BodyCloth.html": {
    "href": "api/AngeliA.BodyCloth.html",
    "title": "Class BodyCloth | AngeliA",
    "summary": "Class BodyCloth Body cloth of a pose-style character. Include body, shoulder and arms Properties ClothType Where should characters wear this cloth Declaration public override sealed ClothType ClothType { get; } Overrides Cloth.ClothType LocalZ Z value for sorting rendering cells Declaration protected virtual int LocalZ { get; } SpriteLoaded True if the artwork sprites are loaded Declaration public override bool SpriteLoaded { get; } Overrides Cloth.SpriteLoaded TwistShiftTopAmount How much does it shift left and right with character's body movement (0 means 0%, 1000 means 100%) Declaration protected virtual int TwistShiftTopAmount { get; } Methods DrawCape(PoseCharacterRenderer, OrientedSprite, int) Draw artwork sprite as cape for given character Declaration public static void DrawCape(PoseCharacterRenderer renderer, OrientedSprite clothSprite, int motionAmount = 1000) Parameters Type Name Description PoseCharacterRenderer renderer Target character OrientedSprite clothSprite Artwork sprite int motionAmount How much does the cape flow with character's movement (0 means 0%, 1000 means 100%) DrawCloth(PoseCharacterRenderer) Draw cloth for the given character Declaration public override void DrawCloth(PoseCharacterRenderer renderer) Overrides Cloth.DrawCloth(PoseCharacterRenderer) DrawClothForBody(PoseCharacterRenderer, OrientedSprite, int, int) Draw artwork sprite as cloth for only \"Body\" of the given character Declaration public static void DrawClothForBody(PoseCharacterRenderer renderer, OrientedSprite clothSprite, int localZ, int twistShiftTopAmount) Parameters Type Name Description PoseCharacterRenderer renderer Target character OrientedSprite clothSprite Artwork sprite int localZ Z value for sorting rendering cells int twistShiftTopAmount How much does it shift left and right with character's body movement DrawClothForLowerArm(PoseCharacterRenderer, OrientedSprite, OrientedSprite, int) Draw artwork sprite as cloth for lower-arms of the given character Declaration public static void DrawClothForLowerArm(PoseCharacterRenderer renderer, OrientedSprite spriteLeft, OrientedSprite spriteRight, int localZ = 1) Parameters Type Name Description PoseCharacterRenderer renderer Target character OrientedSprite spriteLeft Artwork sprite for left lower-arm OrientedSprite spriteRight Artwork sprite for right lower-arm int localZ Z value for sorting rendering cells DrawClothForShoulder(PoseCharacterRenderer, OrientedSprite, OrientedSprite, int) Draw artwork sprite as cloth for shoulders of the given character Declaration public static void DrawClothForShoulder(PoseCharacterRenderer renderer, OrientedSprite spriteLeft, OrientedSprite spriteRight, int localZ = 1) Parameters Type Name Description PoseCharacterRenderer renderer Target character OrientedSprite spriteLeft Artwork sprite for left shoulder OrientedSprite spriteRight Artwork sprite for right shoulder int localZ Z value for sorting rendering cells DrawClothForUpperArm(PoseCharacterRenderer, OrientedSprite, OrientedSprite, int) Draw artwork sprite as cloth for upper-arms of the given character Declaration public static void DrawClothForUpperArm(PoseCharacterRenderer renderer, OrientedSprite spriteLeft, OrientedSprite spriteRight, int localZ = 1) Parameters Type Name Description PoseCharacterRenderer renderer Target character OrientedSprite spriteLeft Artwork sprite for left upper-arm OrientedSprite spriteRight Artwork sprite for right upper-arm int localZ Z value for sorting rendering cells DrawClothFromPool(PoseCharacterRenderer) Draw all body cloths for given character from system pool Declaration public static void DrawClothFromPool(PoseCharacterRenderer renderer) DrawClothGizmos(IRect, Color32, int) Draw cloth as gizmos Declaration public override void DrawClothGizmos(IRect rect, Color32 tint, int z) Parameters Type Name Description IRect rect Rect position in global space Color32 tint Color tint int z Z value for sort rendering cell Overrides Cloth.DrawClothGizmos(IRect, Color32, int) FillFromSheet(string) Load sprite data from Renderer.CurrentSheet Declaration public override bool FillFromSheet(string name) Overrides Cloth.FillFromSheet(string)"
  },
  "api/AngeliA.BodyGadget.html": {
    "href": "api/AngeliA.BodyGadget.html",
    "title": "Class BodyGadget | AngeliA",
    "summary": "Class BodyGadget Representation of a pose character's extra body part. Always use instance from pool. Examples BodyGadget.TryGetGadget(id, out var result); Properties BodyGadgetSystemReady Declaration public static bool BodyGadgetSystemReady { get; } GadgetID Global unique AngeHash of this body gadget Declaration public int GadgetID { get; } GadgetName Global unique AngeName of this body gadget Declaration public string GadgetName { get; } GadgetType Type of this body gadget Declaration public abstract BodyGadgetType GadgetType { get; } SheetIndex Which artwork sheet does this body gadget get it's artwork from Declaration public int SheetIndex { get; } SpriteLoaded True if artwork sprite is loaded Declaration public virtual bool SpriteLoaded { get; } Methods DrawGadget(PoseCharacterRenderer) Render the gadget for the given character Declaration public abstract void DrawGadget(PoseCharacterRenderer renderer) DrawGadgetGizmos(IRect, Color32, int) Render the gadget as gizmos Declaration public virtual void DrawGadgetGizmos(IRect rect, Color32 tint, int z) Parameters Type Name Description IRect rect Global rect position Color32 tint Color tint int z Z position for sorting FillFromSheet(string) Load sprite data from Renderer.CurrentSheet Declaration public virtual bool FillFromSheet(string basicName) ForAllGadget() Iterate through all body gadgets Declaration public static IEnumerable<KeyValuePair<int, BodyGadget>> ForAllGadget() GetDefaultGadgetID(int, BodyGadgetType) Get body gadget id of the default gadget for the given character Declaration public static int GetDefaultGadgetID(int characterID, BodyGadgetType type) GetDisplayName(string, out int) Declaration public string GetDisplayName(string typeName, out int languageID) TryGetGadget(int, out BodyGadget) Get body gadget instance from system pool Declaration public static bool TryGetGadget(int gadgetID, out BodyGadget gadget)"
  },
  "api/AngeliA.BodyGadgetItem.html": {
    "href": "api/AngeliA.BodyGadgetItem.html",
    "title": "Class BodyGadgetItem | AngeliA",
    "summary": "Class BodyGadgetItem A type of item that holds a body gadget. Implements IMapItem Constructors BodyGadgetItem(int) A type of item that holds a body gadget. Declaration public BodyGadgetItem(int id) Parameters Type Name Description int id ID of the body gadget it holds Properties GadgetID ID of the body gadget it holds Declaration public int GadgetID { get; init; } Methods CanUse(Character) True if this item can be use at current frame Declaration public override bool CanUse(Character holder) Parameters Type Name Description Character holder Holder that trying to use this item Overrides Item.CanUse(Character) DrawItem(Entity, IRect, Color32, int) Call this function to render the item Declaration public override void DrawItem(Entity holder, IRect rect, Color32 tint, int z) Parameters Type Name Description Entity holder Holder that own this item IRect rect Rect position in global space Color32 tint Color tint int z Z value for sort rendering cells Overrides Item.DrawItem(Entity, IRect, Color32, int) Use(Character, int, int, out bool) Perform the logic when the item get used Declaration public override bool Use(Character holder, int inventoryID, int itemIndex, out bool consume) Parameters Type Name Description Character holder Holder that using this item int inventoryID Inventory ID of this holder int itemIndex Index of this item inside the inventory bool consume True if the item should disappear after being used Returns Type Description bool True if the item is used Overrides Item.Use(Character, int, int, out bool)"
  },
  "api/AngeliA.BodyGadgetType.html": {
    "href": "api/AngeliA.BodyGadgetType.html",
    "title": "Enum BodyGadgetType | AngeliA",
    "summary": "Enum BodyGadgetType Fields Name Description"
  },
  "api/AngeliA.BodyPart.CoverMode.html": {
    "href": "api/AngeliA.BodyPart.CoverMode.html",
    "title": "Enum BodyPart.CoverMode | AngeliA",
    "summary": "Enum BodyPart.CoverMode How cloths is covering the bodypart Fields Name Description"
  },
  "api/AngeliA.BodyPart.html": {
    "href": "api/AngeliA.BodyPart.html",
    "title": "Class BodyPart | AngeliA",
    "summary": "Class BodyPart Representation of a bodypart for a pose-style character Constructors BodyPart(BodyPart, bool, bool, int, int) Representation of a bodypart for a pose-style character Declaration public BodyPart(BodyPart parent, bool useLimbFlip, bool rotateWithBody, int defaultPivotX, int defaultPivotY) Parameters Type Name Description BodyPart parent Which bodypart does this bodypart attached on. Set to null if it's not a limb bool useLimbFlip True if the limb flip horizontaly when rotate over specified angle bool rotateWithBody True if the limb apply rotation from body of the character Fields Covered How this bodypart is being covered by cloths Declaration public BodyPart.CoverMode Covered FrontSide True if the bodypart is facing front Declaration public bool FrontSide GlobalX Position X in global space Declaration public int GlobalX GlobalY Position Y in global space Declaration public int GlobalY Height Vertical size of this bodypart Declaration public int Height PivotX Current pivot X of this bodypart (0 means left, 1000 means right) Declaration public int PivotX PivotY Current pivot Y of this bodypart (0 means bottom, 1000 means top) Declaration public int PivotY Rotation Angle of this bodypart Declaration public int Rotation Tint Color tint Declaration public Color32 Tint Width Horizontal size of this bodypart Declaration public int Width X Position X in local space Declaration public int X Y Position Y in local space Declaration public int Y Z Z value for sort rendering cells Declaration public int Z Properties Border Artwork sprite border Declaration public Int4 Border { get; } FacingRight True if this bodypart is facing right Declaration public bool FacingRight { get; } FacingSign Return 1 if this bodypart is facing right Declaration public int FacingSign { get; } FlexableSizeY Height that changes with character's body height Declaration public int FlexableSizeY { get; set; } ID Global unique id for this bodypart Declaration public int ID { get; } IsFullCovered True if this bodypart is totaly covered by cloth Declaration public bool IsFullCovered { get; } LimbParent Which bodypart does this bodypart attached on. Set to null if it's not a limb Declaration public BodyPart LimbParent { get; init; } RotateWithBody True if the limb apply rotation from body of the character Declaration public bool RotateWithBody { get; init; } SizeX Artwork sprite Width in global size Declaration public int SizeX { get; } SizeY Artwork sprite Height in global size Declaration public int SizeY { get; } SpritePivotX Artwork sprite pivot X Declaration public int SpritePivotX { get; } SpritePivotY Artwork sprite pivot Y Declaration public int SpritePivotY { get; } UseLimbFlip True if the limb flip horizontaly when rotate over specified angle Declaration public bool UseLimbFlip { get; init; } Methods GetGlobalCenter() Get current center position in global space Declaration public Int2 GetGlobalCenter() GetGlobalRect() Get current position rect in global space Declaration public IRect GetGlobalRect() GetLocalCenter() Get current center position in local space Declaration public Int2 GetLocalCenter() GlobalLerp(float, float, bool) Get global position that lerp from given value Declaration public Int2 GlobalLerp(float x01, float y01, bool natural = false) Parameters Type Name Description float x01 X lerp value (0 means left, 1 means right) float y01 Y lerp value (0 means bottom, 1 means top) bool natural True if this lerping logic respect character's natural orientation (like Tokino Sora's hairpin should always on her left side) Imitate(BodyPart) Copy motion data from another bodypart without changing anything about data about source sprite Declaration public void Imitate(BodyPart other) LimbRotate(int, int) Rotate the bodypart with \"LimbRotate\" logic Declaration public void LimbRotate(int rotation, int grow = 1000) int grow How much does the limb grow it's size from the rotation (0 means don't grow. 1000 means general amount) SetData(int) Set bodypart data by giving a sprite ID Declaration public void SetData(int id) TryGetSpriteIdFromSheet(Type, string, bool, out int) Get sprite id to rendering bodypart for given type of character Declaration public static bool TryGetSpriteIdFromSheet(Type characterType, string bodyPartName, bool checkForGroup, out int id) Parameters Type Name Description Type characterType Target type of character string bodyPartName Basic name of this bodypart bool checkForGroup True if the sprite can be get from sprite group int id Global ID of the result bodypart Returns Type Description bool True if the id is found"
  },
  "api/AngeliA.BodySetAttribute.html": {
    "href": "api/AngeliA.BodySetAttribute.html",
    "title": "Class BodySetAttribute | AngeliA",
    "summary": "Class BodySetAttribute Treat specified sprites as bodyset for pose-characters Constructors BodySetAttribute(string) Treat specified sprites as bodyset for pose-characters Declaration public BodySetAttribute(string name) Parameters Type Name Description string name The name of the bodyset"
  },
  "api/AngeliA.BodySetItem.html": {
    "href": "api/AngeliA.BodySetItem.html",
    "title": "Class BodySetItem | AngeliA",
    "summary": "Class BodySetItem Represent an item that holds a whole set of bodypart for pose-style characters to apply Implements IMapItem Constructors BodySetItem(string) Declaration public BodySetItem(string basicName) BodySetItem(Type) Declaration public BodySetItem(Type characterType) Properties Data Rendering config data for the bodypart it holds Declaration public CharacterRenderingConfig Data { get; init; } TargetCharacterID ID of the target character for the bodypart it holds Declaration public int TargetCharacterID { get; init; } TargetCharacterName Name of the target character for the bodypart it holds Declaration public string TargetCharacterName { get; init; } Methods CanUse(Character) True if this item can be use at current frame Declaration public override bool CanUse(Character holder) Parameters Type Name Description Character holder Holder that trying to use this item Overrides Item.CanUse(Character) DrawItem(Entity, IRect, Color32, int) Call this function to render the item Declaration public override void DrawItem(Entity holder, IRect rect, Color32 tint, int z) Parameters Type Name Description Entity holder Holder that own this item IRect rect Rect position in global space Color32 tint Color tint int z Z value for sort rendering cells Overrides Item.DrawItem(Entity, IRect, Color32, int) ForAllBodySetCharacterType() Iterate through all body-set the current project have Declaration public static IEnumerable<KeyValuePair<int, (Type, string)>> ForAllBodySetCharacterType() Examples using AngeliA; namespace AngeliaGame; public class Example { [OnGameInitializeLater(4096)] internal static void OnGameUpdate () { Debug.Log(\"All body-set inside this game:\"); foreach (var (id, (type, typeName)) in BodySetItem.ForAllBodySetCharacterType()) { string setName = ItemSystem.GetItemDisplayName(id); Debug.Log($\"{setName} - {typeName}\"); } } } GetDisplayName(string, out int) Get display name for bodyset from language system Declaration public string GetDisplayName(string typeName, out int languageID) Use(Character, int, int, out bool) Perform the logic when the item get used Declaration public override bool Use(Character holder, int inventoryID, int itemIndex, out bool consume) Parameters Type Name Description Character holder Holder that using this item int inventoryID Inventory ID of this holder int itemIndex Index of this item inside the inventory bool consume True if the item should disappear after being used Returns Type Description bool True if the item is used Overrides Item.Use(Character, int, int, out bool)"
  },
  "api/AngeliA.Buff.html": {
    "href": "api/AngeliA.Buff.html",
    "title": "Class Buff | AngeliA",
    "summary": "Class Buff Represent a type of buff Implements IMapItem Constructors Buff() Declaration public Buff() Properties DefaultDuration How many frames should this buff apply by default Declaration public abstract int DefaultDuration { get; } DescriptionID Unique angehash for language system to get the description of this buff Declaration public int DescriptionID { get; init; } NameID Unique angehash for language system to get the display name of this buff Declaration public int NameID { get; init; } TypeID Unique angehash of this buff class Declaration public int TypeID { get; init; } TypeName AngeName of this type of buff Declaration public string TypeName { get; init; } Methods BeforeUpdate(Character) Declaration public virtual void BeforeUpdate(Character target) LateUpdate(Character) Declaration public virtual void LateUpdate(Character target) OnCharacterAttack(Character, Bullet) Declaration public virtual void OnCharacterAttack(Character target, Bullet bullet) OnCharacterRenderered(CharacterRenderer) Declaration public virtual void OnCharacterRenderered(CharacterRenderer renderer)"
  },
  "api/AngeliA.BuffItem-1.html": {
    "href": "api/AngeliA.BuffItem-1.html",
    "title": "Class BuffItem<B> | AngeliA",
    "summary": "Class BuffItem<B> Item that gives the holder a buff Implements IMapItem Type Parameters Name Description B Type of the buff Constructors BuffItem() Declaration public BuffItem()"
  },
  "api/AngeliA.BuffItem.html": {
    "href": "api/AngeliA.BuffItem.html",
    "title": "Class BuffItem | AngeliA",
    "summary": "Class BuffItem Item that gives the holder a buff Implements IMapItem Properties AllowDuplicateUpdate True if same type of item can update multiple times during same frame for same holder Declaration public override bool AllowDuplicateUpdate { get; } Overrides Item.AllowDuplicateUpdate BuffID Type of the buff Declaration public int BuffID { get; init; } MaxStackCount Count limitation for multiple items inside one inventory slot Declaration public override int MaxStackCount { get; } Overrides Item.MaxStackCount Methods OnItemUpdate_FromInventory(Character, int, int) This function is called every frame when this item is in an holder's inventory Declaration public override void OnItemUpdate_FromInventory(Character holder, int inventoryID, int itemIndex) Parameters Type Name Description Character holder The holder of the inventory int inventoryID ID of the inventory Overrides Item.OnItemUpdate_FromInventory(Character, int, int)"
  },
  "api/AngeliA.BuiltInSprite.html": {
    "href": "api/AngeliA.BuiltInSprite.html",
    "title": "Class BuiltInSprite | AngeliA",
    "summary": "Class BuiltInSprite Utility class to get built-in sprites Fields CHECKER_BOARD_16 Declaration public static readonly SpriteCode CHECKER_BOARD_16 CHECKER_BOARD_8 Declaration public static readonly SpriteCode CHECKER_BOARD_8 CHECK_MARK_16 Declaration public static readonly SpriteCode CHECK_MARK_16 CHECK_MARK_32 Declaration public static readonly SpriteCode CHECK_MARK_32 CIRCLE_16 Declaration public static readonly SpriteCode CIRCLE_16 CIRCLE_32 Declaration public static readonly SpriteCode CIRCLE_32 CIRCLE_OUTLINE Declaration public static readonly SpriteCode CIRCLE_OUTLINE COLOR_HUE Declaration public static readonly SpriteCode COLOR_HUE COLOR_HUE_ALT Declaration public static readonly SpriteCode COLOR_HUE_ALT COLOR_WHITE_BAR Declaration public static readonly SpriteCode COLOR_WHITE_BAR DOTTED_LINE_16 Declaration public static readonly SpriteCode DOTTED_LINE_16 DOTTED_LINE_16_SMOOTH Declaration public static readonly SpriteCode DOTTED_LINE_16_SMOOTH DOWN_ARROW Declaration public static readonly SpriteCode DOWN_ARROW EQUAL_16 Declaration public static readonly SpriteCode EQUAL_16 FILE_ICON_AUDIO Declaration public static readonly SpriteCode FILE_ICON_AUDIO FILE_ICON_DISK Declaration public static readonly SpriteCode FILE_ICON_DISK FILE_ICON_FILE Declaration public static readonly SpriteCode FILE_ICON_FILE FILE_ICON_FOLDER Declaration public static readonly SpriteCode FILE_ICON_FOLDER FILE_ICON_FOLDER_EMPTY Declaration public static readonly SpriteCode FILE_ICON_FOLDER_EMPTY FILE_ICON_FONT Declaration public static readonly SpriteCode FILE_ICON_FONT FILE_ICON_IMAGE Declaration public static readonly SpriteCode FILE_ICON_IMAGE FILE_ICON_TEXT Declaration public static readonly SpriteCode FILE_ICON_TEXT FRAME_16 Declaration public static readonly SpriteCode FRAME_16 FRAME_HOLLOW_16 Declaration public static readonly SpriteCode FRAME_HOLLOW_16 GAMEPAD_BODY Declaration public static readonly SpriteCode GAMEPAD_BODY GAMEPAD_DOWN Declaration public static readonly SpriteCode GAMEPAD_DOWN GAMEPAD_EAST Declaration public static readonly SpriteCode GAMEPAD_EAST GAMEPAD_HINT_A Declaration public static readonly SpriteCode GAMEPAD_HINT_A GAMEPAD_HINT_B Declaration public static readonly SpriteCode GAMEPAD_HINT_B GAMEPAD_HINT_DOWN Declaration public static readonly SpriteCode GAMEPAD_HINT_DOWN GAMEPAD_HINT_LEFT Declaration public static readonly SpriteCode GAMEPAD_HINT_LEFT GAMEPAD_HINT_RIGHT Declaration public static readonly SpriteCode GAMEPAD_HINT_RIGHT GAMEPAD_HINT_SELECT Declaration public static readonly SpriteCode GAMEPAD_HINT_SELECT GAMEPAD_HINT_START Declaration public static readonly SpriteCode GAMEPAD_HINT_START GAMEPAD_HINT_UP Declaration public static readonly SpriteCode GAMEPAD_HINT_UP GAMEPAD_LEFT Declaration public static readonly SpriteCode GAMEPAD_LEFT GAMEPAD_LEFT_SHOULDER Declaration public static readonly SpriteCode GAMEPAD_LEFT_SHOULDER GAMEPAD_LEFT_TRIGGER Declaration public static readonly SpriteCode GAMEPAD_LEFT_TRIGGER GAMEPAD_NORTH Declaration public static readonly SpriteCode GAMEPAD_NORTH GAMEPAD_RIGHT Declaration public static readonly SpriteCode GAMEPAD_RIGHT GAMEPAD_RIGHT_SHOULDER Declaration public static readonly SpriteCode GAMEPAD_RIGHT_SHOULDER GAMEPAD_RIGHT_TRIGGER Declaration public static readonly SpriteCode GAMEPAD_RIGHT_TRIGGER GAMEPAD_SELECT Declaration public static readonly SpriteCode GAMEPAD_SELECT GAMEPAD_SOUTH Declaration public static readonly SpriteCode GAMEPAD_SOUTH GAMEPAD_START Declaration public static readonly SpriteCode GAMEPAD_START GAMEPAD_UP Declaration public static readonly SpriteCode GAMEPAD_UP GAMEPAD_WEST Declaration public static readonly SpriteCode GAMEPAD_WEST HINT_BUTTON Declaration public static readonly SpriteCode HINT_BUTTON ICON_BACK Declaration public static readonly SpriteCode ICON_BACK ICON_BODYPART_HEIGHT Declaration public static readonly SpriteCode ICON_BODYPART_HEIGHT ICON_BODY_PART_ARM_HAND Declaration public static readonly SpriteCode ICON_BODY_PART_ARM_HAND ICON_BODY_PART_BODY Declaration public static readonly SpriteCode ICON_BODY_PART_BODY ICON_BODY_PART_EAR Declaration public static readonly SpriteCode ICON_BODY_PART_EAR ICON_BODY_PART_FACE Declaration public static readonly SpriteCode ICON_BODY_PART_FACE ICON_BODY_PART_HAIR Declaration public static readonly SpriteCode ICON_BODY_PART_HAIR ICON_BODY_PART_HAIR_COLOR Declaration public static readonly SpriteCode ICON_BODY_PART_HAIR_COLOR ICON_BODY_PART_HEAD Declaration public static readonly SpriteCode ICON_BODY_PART_HEAD ICON_BODY_PART_HORN Declaration public static readonly SpriteCode ICON_BODY_PART_HORN ICON_BODY_PART_LEG_FOOT Declaration public static readonly SpriteCode ICON_BODY_PART_LEG_FOOT ICON_BODY_PART_SKIN_COLOR Declaration public static readonly SpriteCode ICON_BODY_PART_SKIN_COLOR ICON_BODY_PART_TAIL Declaration public static readonly SpriteCode ICON_BODY_PART_TAIL ICON_BODY_PART_WING Declaration public static readonly SpriteCode ICON_BODY_PART_WING ICON_BRUSH Declaration public static readonly SpriteCode ICON_BRUSH ICON_BUFF Declaration public static readonly SpriteCode ICON_BUFF ICON_CHARACTER_AVATAR Declaration public static readonly SpriteCode ICON_CHARACTER_AVATAR ICON_CLEAR Declaration public static readonly SpriteCode ICON_CLEAR ICON_CROSS Declaration public static readonly SpriteCode ICON_CROSS ICON_DELETE Declaration public static readonly SpriteCode ICON_DELETE ICON_ENTITY Declaration public static readonly SpriteCode ICON_ENTITY ICON_ERROR Declaration public static readonly SpriteCode ICON_ERROR ICON_FILE Declaration public static readonly SpriteCode ICON_FILE ICON_GAMEPAD Declaration public static readonly SpriteCode ICON_GAMEPAD ICON_HOME Declaration public static readonly SpriteCode ICON_HOME ICON_INFO Declaration public static readonly SpriteCode ICON_INFO ICON_MAP Declaration public static readonly SpriteCode ICON_MAP ICON_MENU Declaration public static readonly SpriteCode ICON_MENU ICON_PALETTE Declaration public static readonly SpriteCode ICON_PALETTE ICON_PLUS Declaration public static readonly SpriteCode ICON_PLUS ICON_QUESTION_MARK Declaration public static readonly SpriteCode ICON_QUESTION_MARK ICON_REFRESH Declaration public static readonly SpriteCode ICON_REFRESH ICON_SEARCH Declaration public static readonly SpriteCode ICON_SEARCH ICON_STAR Declaration public static readonly SpriteCode ICON_STAR ICON_SUIT_BODYSUIT Declaration public static readonly SpriteCode ICON_SUIT_BODYSUIT ICON_SUIT_GLOVE Declaration public static readonly SpriteCode ICON_SUIT_GLOVE ICON_SUIT_HAT Declaration public static readonly SpriteCode ICON_SUIT_HAT ICON_SUIT_PANTS Declaration public static readonly SpriteCode ICON_SUIT_PANTS ICON_SUIT_SHOES Declaration public static readonly SpriteCode ICON_SUIT_SHOES ICON_TRIANGLE_DOWN Declaration public static readonly SpriteCode ICON_TRIANGLE_DOWN ICON_TRIANGLE_LEFT Declaration public static readonly SpriteCode ICON_TRIANGLE_LEFT ICON_TRIANGLE_RIGHT Declaration public static readonly SpriteCode ICON_TRIANGLE_RIGHT ICON_TRIANGLE_UP Declaration public static readonly SpriteCode ICON_TRIANGLE_UP ICON_WARNING Declaration public static readonly SpriteCode ICON_WARNING ITEM_ICON_ARMOR Declaration public static readonly SpriteCode ITEM_ICON_ARMOR ITEM_ICON_FOOD Declaration public static readonly SpriteCode ITEM_ICON_FOOD ITEM_ICON_GLOVES Declaration public static readonly SpriteCode ITEM_ICON_GLOVES ITEM_ICON_HAND_TOOL Declaration public static readonly SpriteCode ITEM_ICON_HAND_TOOL ITEM_ICON_HELMET Declaration public static readonly SpriteCode ITEM_ICON_HELMET ITEM_ICON_ITEM Declaration public static readonly SpriteCode ITEM_ICON_ITEM ITEM_ICON_JEWELRY Declaration public static readonly SpriteCode ITEM_ICON_JEWELRY ITEM_ICON_SHOES Declaration public static readonly SpriteCode ITEM_ICON_SHOES ITEM_ICON_WEAPON Declaration public static readonly SpriteCode ITEM_ICON_WEAPON LAMP_LIGHT Declaration public static readonly SpriteCode LAMP_LIGHT LEFT_ARROW Declaration public static readonly SpriteCode LEFT_ARROW MENU_ARROW_MARK Declaration public static readonly SpriteCode MENU_ARROW_MARK MENU_DIALOG_BG Declaration public static readonly SpriteCode MENU_DIALOG_BG MENU_GENERIC_DIALOG_BG Declaration public static readonly SpriteCode MENU_GENERIC_DIALOG_BG MENU_MORE_MARK Declaration public static readonly SpriteCode MENU_MORE_MARK MENU_SELECTION_MARK Declaration public static readonly SpriteCode MENU_SELECTION_MARK MENU_THREE_DOTS Declaration public static readonly SpriteCode MENU_THREE_DOTS PIXEL Declaration public static readonly SpriteCode PIXEL PLUS_16 Declaration public static readonly SpriteCode PLUS_16 RADIAL_DOTTED_RING_24 Declaration public static readonly SpriteCode RADIAL_DOTTED_RING_24 RADIAL_DOTTED_RING_32 Declaration public static readonly SpriteCode RADIAL_DOTTED_RING_32 RIGHT_ARROW Declaration public static readonly SpriteCode RIGHT_ARROW RING_24 Declaration public static readonly SpriteCode RING_24 RING_32 Declaration public static readonly SpriteCode RING_32 SHADOW_LINE_16 Declaration public static readonly SpriteCode SHADOW_LINE_16 SOFT_LINE_H Declaration public static readonly SpriteCode SOFT_LINE_H SOFT_LINE_V Declaration public static readonly SpriteCode SOFT_LINE_V TRIANGLE_13 Declaration public static readonly SpriteCode TRIANGLE_13 TRIANGLE_RIGHT_13 Declaration public static readonly SpriteCode TRIANGLE_RIGHT_13 UI_BUTTON Declaration public static readonly SpriteCode UI_BUTTON UI_BUTTON_DOWN Declaration public static readonly SpriteCode UI_BUTTON_DOWN UI_BUTTON_HOVER Declaration public static readonly SpriteCode UI_BUTTON_HOVER UI_DARK_BUTTON Declaration public static readonly SpriteCode UI_DARK_BUTTON UI_DARK_BUTTON_DOWN Declaration public static readonly SpriteCode UI_DARK_BUTTON_DOWN UI_DARK_BUTTON_HOVER Declaration public static readonly SpriteCode UI_DARK_BUTTON_HOVER UI_HOLO_BUTTON Declaration public static readonly SpriteCode UI_HOLO_BUTTON UI_INPUT_FIELD Declaration public static readonly SpriteCode UI_INPUT_FIELD UI_INPUT_FIELD_LARGE Declaration public static readonly SpriteCode UI_INPUT_FIELD_LARGE UI_INPUT_FIELD_SMALL Declaration public static readonly SpriteCode UI_INPUT_FIELD_SMALL UI_ITEM_FRAME Declaration public static readonly SpriteCode UI_ITEM_FRAME UI_LARGE_TOGGLE Declaration public static readonly SpriteCode UI_LARGE_TOGGLE UI_LARGE_TOGGLE_DOWN Declaration public static readonly SpriteCode UI_LARGE_TOGGLE_DOWN UI_LARGE_TOGGLE_HOVER Declaration public static readonly SpriteCode UI_LARGE_TOGGLE_HOVER UI_MINI_BUTTON_DARK Declaration public static readonly SpriteCode UI_MINI_BUTTON_DARK UI_MINI_BUTTON_DARK_DOWN Declaration public static readonly SpriteCode UI_MINI_BUTTON_DARK_DOWN UI_MINI_BUTTON_DARK_HOVER Declaration public static readonly SpriteCode UI_MINI_BUTTON_DARK_HOVER UI_SCROLL_BAR Declaration public static readonly SpriteCode UI_SCROLL_BAR UI_SLIDER_BODY Declaration public static readonly SpriteCode UI_SLIDER_BODY UI_SLIDER_FILL Declaration public static readonly SpriteCode UI_SLIDER_FILL UI_SLIDER_HANDLE Declaration public static readonly SpriteCode UI_SLIDER_HANDLE UI_SMALL_BUTTON Declaration public static readonly SpriteCode UI_SMALL_BUTTON UI_SMALL_BUTTON_DOWN Declaration public static readonly SpriteCode UI_SMALL_BUTTON_DOWN UI_SMALL_BUTTON_HOVER Declaration public static readonly SpriteCode UI_SMALL_BUTTON_HOVER UI_TAB Declaration public static readonly SpriteCode UI_TAB UI_TOGGLE Declaration public static readonly SpriteCode UI_TOGGLE UI_TOGGLE_DOWN Declaration public static readonly SpriteCode UI_TOGGLE_DOWN UI_TOGGLE_HOVER Declaration public static readonly SpriteCode UI_TOGGLE_HOVER UI_TOGGLE_MARK Declaration public static readonly SpriteCode UI_TOGGLE_MARK UP_ARROW Declaration public static readonly SpriteCode UP_ARROW"
  },
  "api/AngeliA.BuiltInText.html": {
    "href": "api/AngeliA.BuiltInText.html",
    "title": "Class BuiltInText | AngeliA",
    "summary": "Class BuiltInText Utility class to get built-in text through language system Fields HINT_ADJUST Declaration public static readonly LanguageCode HINT_ADJUST HINT_ATTACK Declaration public static readonly LanguageCode HINT_ATTACK HINT_DRIVE Declaration public static readonly LanguageCode HINT_DRIVE HINT_JUMP Declaration public static readonly LanguageCode HINT_JUMP HINT_MOVE Declaration public static readonly LanguageCode HINT_MOVE HINT_SHOW_MENU Declaration public static readonly LanguageCode HINT_SHOW_MENU HINT_STOP_DRIVE Declaration public static readonly LanguageCode HINT_STOP_DRIVE HINT_SWITCH_PLAYER Declaration public static readonly LanguageCode HINT_SWITCH_PLAYER HINT_USE Declaration public static readonly LanguageCode HINT_USE LABEL_B Declaration public static readonly LanguageCode LABEL_B LABEL_BOTTOM Declaration public static readonly LanguageCode LABEL_BOTTOM LABEL_D Declaration public static readonly LanguageCode LABEL_D LABEL_DOWN Declaration public static readonly LanguageCode LABEL_DOWN LABEL_L Declaration public static readonly LanguageCode LABEL_L LABEL_LEFT Declaration public static readonly LanguageCode LABEL_LEFT LABEL_R Declaration public static readonly LanguageCode LABEL_R LABEL_RIGHT Declaration public static readonly LanguageCode LABEL_RIGHT LABEL_T Declaration public static readonly LanguageCode LABEL_T LABEL_TOP Declaration public static readonly LanguageCode LABEL_TOP LABEL_U Declaration public static readonly LanguageCode LABEL_U LABEL_UP Declaration public static readonly LanguageCode LABEL_UP UI_ADD Declaration public static readonly LanguageCode UI_ADD UI_APPLY Declaration public static readonly LanguageCode UI_APPLY UI_BACK Declaration public static readonly LanguageCode UI_BACK UI_CANCEL Declaration public static readonly LanguageCode UI_CANCEL UI_CONTINUE Declaration public static readonly LanguageCode UI_CONTINUE UI_DEBUG Declaration public static readonly LanguageCode UI_DEBUG UI_DELETE Declaration public static readonly LanguageCode UI_DELETE UI_DONT_SAVE Declaration public static readonly LanguageCode UI_DONT_SAVE UI_EMPTY Declaration public static readonly LanguageCode UI_EMPTY UI_EXPLORE Declaration public static readonly LanguageCode UI_EXPLORE UI_GAMEOVER Declaration public static readonly LanguageCode UI_GAMEOVER UI_IGNORE Declaration public static readonly LanguageCode UI_IGNORE UI_LOCK Declaration public static readonly LanguageCode UI_LOCK UI_MENU Declaration public static readonly LanguageCode UI_MENU UI_NO Declaration public static readonly LanguageCode UI_NO UI_NONE Declaration public static readonly LanguageCode UI_NONE UI_OFF Declaration public static readonly LanguageCode UI_OFF UI_OK Declaration public static readonly LanguageCode UI_OK UI_ON Declaration public static readonly LanguageCode UI_ON UI_OPEN Declaration public static readonly LanguageCode UI_OPEN UI_QUIT Declaration public static readonly LanguageCode UI_QUIT UI_QUIT_GAME Declaration public static readonly LanguageCode UI_QUIT_GAME UI_REFRESH Declaration public static readonly LanguageCode UI_REFRESH UI_RENAME Declaration public static readonly LanguageCode UI_RENAME UI_RESET Declaration public static readonly LanguageCode UI_RESET UI_RESTART Declaration public static readonly LanguageCode UI_RESTART UI_SAVE Declaration public static readonly LanguageCode UI_SAVE UI_SETTING Declaration public static readonly LanguageCode UI_SETTING UI_UNLOCK Declaration public static readonly LanguageCode UI_UNLOCK UI_YES Declaration public static readonly LanguageCode UI_YES"
  },
  "api/AngeliA.Bullet.html": {
    "href": "api/AngeliA.Bullet.html",
    "title": "Class Bullet | AngeliA",
    "summary": "Class Bullet An entity represent bullet from weapons that deal damage to IDamageReceiver Implements IMapItem Fields Damage Final damage value Declaration public readonly FrameBasedInt Damage Properties AttackCharged True if the attack is charged Declaration public bool AttackCharged { get; } AttackIndex Index for style of the attack from the sender Declaration public int AttackIndex { get; } BasicDamage Intrinsic damage value Declaration protected virtual int BasicDamage { get; } DamageType What extra type of damage does this bullet deal Declaration public Tag DamageType { get; set; } Duration How long can this bullet exists on stage in frame Declaration public virtual int Duration { get; } EnvironmentHitCount How many environment collider can this bullet hit without getting despawn Declaration protected virtual int EnvironmentHitCount { get; } EnvironmentMask Group of physics layers for checking environment that this bullet can react with Declaration protected virtual int EnvironmentMask { get; } FailbackTargetTeam Default team for checking attack target Declaration public int FailbackTargetTeam { get; set; } ReceiverHitCount How many target collider can this bullet hit without getting despawn Declaration protected virtual int ReceiverHitCount { get; } ReceiverMask Group of physics layers for checking target that this bullet can react with Declaration protected virtual int ReceiverMask { get; } RoundHitCheck True if the bullet check for target in a round shaped range Declaration protected virtual bool RoundHitCheck { get; } Sender This entity send the bullet Declaration public Entity Sender { get; set; } TargetTeam Team data for checking which group of target should be attack Declaration public int TargetTeam { get; } Methods BeforeDespawn(IDamageReceiver) This function is called before the bullet get despawn by performing damage logic Declaration protected virtual void BeforeDespawn(IDamageReceiver receiver) Parameters Type Name Description IDamageReceiver receiver The target it hits BeforeUpdate() [2/4] This function is called every frame when entity is in stage. Prioritize using this function to update physics logic. Declaration public override void BeforeUpdate() Overrides Entity.BeforeUpdate() EnvironmentHitCheck(out bool) Check for hitting any environment block Declaration protected void EnvironmentHitCheck(out bool requireSelfDestroy) Parameters Type Name Description bool requireSelfDestroy True if this bullet should be despawn GetDamage() Get the damage data using by this bullet to deal damage Declaration public Damage GetDamage() GroundCheck(out Color32) True if the bullet is touching ground Declaration public bool GroundCheck(out Color32 groundTint) OnActivated() This function is called when entity enter the stage Declaration public override void OnActivated() Overrides Entity.OnActivated() PerformHitEnvironment(out bool) This function is called when the bullet hit environment colliders Declaration protected virtual void PerformHitEnvironment(out bool requireSelfDestroy) Parameters Type Name Description bool requireSelfDestroy True if this bullet should be despawn PerformHitReceiver(IDamageReceiver, out bool) This function is called when the bullet hit IDamageReceiver Declaration protected virtual void PerformHitReceiver(IDamageReceiver receiver, out bool requireSelfDestroy) Parameters Type Name Description IDamageReceiver receiver The target it hits bool requireSelfDestroy True if this bullet should be despawn ReceiverHitCheck(out bool) Check for hitting any IDamageReceiver Declaration protected void ReceiverHitCheck(out bool requireSelfDestroy) Parameters Type Name Description bool requireSelfDestroy True if this bullet should be despawn Update() [3/4] This function is called every frame when entity is in stage. Prioritize using this function to update physics logic. Declaration public override void Update() Overrides Entity.Update()"
  },
  "api/AngeliA.Cell.html": {
    "href": "api/AngeliA.Cell.html",
    "title": "Class Cell | AngeliA",
    "summary": "Class Cell Rendering cell Fields BorderSide Which side does this cell belongs to when it's rendered in 9-slice mode Declaration public Alignment BorderSide Color Declaration public Color32 Color EMPTY Declaration public static readonly Cell EMPTY Height Declaration public int Height PivotX Which place of the cell should be align with the X position. 0 means left edge, 1 means right edge. Declaration public float PivotX PivotY Which place of the cell should be align with the Y position. 0 means bottom edge, 1 means top edge. Declaration public float PivotY Rotation1000 Actual rotation data of the cell, 0 means up, 90000 means right Declaration public int Rotation1000 SheetIndex Which sprite sheet does this cell use. -1 means main sheet. Declaration public int SheetIndex Shift How many edge should be clip off. 0 means no clip off, set left into \"width\" means clip off all of them Declaration public Int4 Shift Sprite Declaration public AngeSprite Sprite Width Declaration public int Width X Declaration public int X Y Declaration public int Y Z Z position for sorting Declaration public int Z Properties Rotation Rotation of the cell, 0 means up, 90 means right Declaration public int Rotation { get; set; } TextSprite Sprite for rendering text character Declaration public CharSprite TextSprite { get; set; } Methods Clamp(IRect) Clamp the content inside the given rect range Declaration public void Clamp(IRect rect) CopyFrom(Cell) Declaration public void CopyFrom(Cell other) GetGlobalBounds() Get the boundary occupied by the cell Declaration public IRect GetGlobalBounds() GlobalLerp(float, float) Declaration public Int2 GlobalLerp(float x01, float y01) GlobalToLocal(int, int) Declaration public Int2 GlobalToLocal(int globalX, int globalY) LocalToGlobal(int, int) Declaration public Int2 LocalToGlobal(int localX, int localY) ReturnPivots() Set pivot of the cell into (0,0) and let position adapt, so the final position of the cell remain the same Declaration public void ReturnPivots() ReturnPivots(float, float) Set pivot of the cell and let position adapt, so the final position of the cell remain the same Declaration public void ReturnPivots(float newPivotX, float newPivotY) ReturnPosition(int, int) Set position of the cell and let pivot adapt, so the final position of the cell remain the same Declaration public void ReturnPosition(int globalX, int globalY) RotateAround(int, int, int) Rotate the cell around the given position Declaration public void RotateAround(int rotation, int pointX, int pointY) ScaleFrom(int, int, int) Scale the cell based on the given position Declaration public void ScaleFrom(int scale, int pointX, int pointY) ScaleFrom(float, int, int) Scale the cell based on the given position Declaration public void ScaleFrom(float scale, int pointX, int pointY) SetRect(IRect) Set X,Y,Width,Height with a rect Declaration public void SetRect(IRect rect)"
  },
  "api/AngeliA.CellScreenshotSystem.Screenshot.html": {
    "href": "api/AngeliA.CellScreenshotSystem.Screenshot.html",
    "title": "Class CellScreenshotSystem.Screenshot | AngeliA",
    "summary": "Class CellScreenshotSystem.Screenshot Data to hold a single screenshot Fields CreatedDate Declaration public long CreatedDate FilePath Declaration public string FilePath Locked True if the user want to prevent accidental deletion Declaration public bool Locked Range Global range of the rendering cells inside this screenshot Declaration public IRect Range SkyBottom Sky gradient color on bottom Declaration public Color32 SkyBottom SkyTop Sky gradient color on top Declaration public Color32 SkyTop"
  },
  "api/AngeliA.CellScreenshotSystem.html": {
    "href": "api/AngeliA.CellScreenshotSystem.html",
    "title": "Class CellScreenshotSystem | AngeliA",
    "summary": "Class CellScreenshotSystem Core system to take screenshot based on rendering cells and save them into file Properties Count Screenshot data count inside the current system Declaration public static int Count { get; } Methods DeleteScreenshot(int, bool) Delete screenshot from system list at given index Declaration public static void DeleteScreenshot(int index, bool dontDeleteLocked = true) bool dontDeleteLocked True if skip the locked ones DrawScreenshot(Screenshot, IRect, Color32, int, int, bool) Render given screen shot on screen Declaration public static void DrawScreenshot(CellScreenshotSystem.Screenshot screenshot, IRect rect, Color32 tint, int z = 0, int layer = 7, bool fit = true) Parameters Type Name Description CellScreenshotSystem.Screenshot screenshot Screenshot data IRect rect Global range to display this screenshot Color32 tint Color tint int z Z value for sort rendering cells int layer Rendering layer to draw into. Use RenderLayer.XXX to get this value. bool fit True if resize the result without changing the aspect ratio DrawScreenshot(Screenshot, IRect, FRect, Color32, int, int, bool) Render given screen shot on screen Declaration public static void DrawScreenshot(CellScreenshotSystem.Screenshot screenshot, IRect rect, FRect sourceRange, Color32 tint, int z = 0, int layer = 7, bool fit = true) Parameters Type Name Description CellScreenshotSystem.Screenshot screenshot Screenshot data IRect rect Global range to display this screenshot FRect sourceRange Which part of the screenshot should be display. ((0, 0, 1, 1) means all of them. (0, 0, 0.5, 1) means left half of them) Color32 tint Color tint int z Z value for sort rendering cells int layer Rendering layer to draw into. Use RenderLayer.XXX to get this value. bool fit True if resize the result without changing the aspect ratio DrawScreenshot(Screenshot, IRect, FRect, int, int, bool) Render given screen shot on screen Declaration public static void DrawScreenshot(CellScreenshotSystem.Screenshot screenshot, IRect rect, FRect sourceRange, int z = 0, int layer = 7, bool fit = true) Parameters Type Name Description CellScreenshotSystem.Screenshot screenshot Screenshot data IRect rect Global range to display this screenshot FRect sourceRange Which part of the screenshot should be display. ((0, 0, 1, 1) means all of them. (0, 0, 0.5, 1) means left half of them) int z Z value for sort rendering cells int layer Rendering layer to draw into. Use RenderLayer.XXX to get this value. bool fit True if resize the result without changing the aspect ratio DrawScreenshot(Screenshot, IRect, int, int, bool) Render given screen shot on screen Declaration public static void DrawScreenshot(CellScreenshotSystem.Screenshot screenshot, IRect rect, int z = 0, int layer = 7, bool fit = true) Parameters Type Name Description CellScreenshotSystem.Screenshot screenshot Screenshot data IRect rect Global range to display this screenshot int z Z value for sort rendering cells int layer Rendering layer to draw into. Use RenderLayer.XXX to get this value. bool fit True if resize the result without changing the aspect ratio GetScreenshot(int) Get screenshot from system list at given index. Declaration public static CellScreenshotSystem.Screenshot GetScreenshot(int index) RequireTakeScreenshot(IRect, int) Take screenshot at given range in global space when all cells at this frame is rendered. Result will be saved into system list. Declaration public static void RequireTakeScreenshot(IRect cameraRange, int delay = 0) int delay Time delay in frame SetScreenshotLock(int, bool) Lock/unlock screenshot in system list at given index Declaration public static void SetScreenshotLock(int index, bool locked) TakeScreenshotImmediately(IRect, bool) Take screenshot at given range in global space no matter rendering cells are all exists for current frame Declaration public static CellScreenshotSystem.Screenshot TakeScreenshotImmediately(IRect cameraRange, bool saveToSystem = true) bool saveToSystem True if save this screenshot into system list"
  },
  "api/AngeliA.CellZScope.html": {
    "href": "api/AngeliA.CellZScope.html",
    "title": "Struct CellZScope | AngeliA",
    "summary": "Struct CellZScope Scope to change rendering cell z value Implements IDisposable Examples using AngeliA; namespace AngeliaGame; public class Example { [OnGameUpdate] internal static void OnGameUpdate () { int newZ = 0; using (new CellZScope(newZ)) { // Rendering cell created inside will have their z value override } } } Constructors CellZScope(int) Scope to change rendering cell z value Declaration public CellZScope(int z) Methods Dispose() Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources. Declaration public void Dispose()"
  },
  "api/AngeliA.ChangeSavingSlotTask.html": {
    "href": "api/AngeliA.ChangeSavingSlotTask.html",
    "title": "Class ChangeSavingSlotTask | AngeliA",
    "summary": "Class ChangeSavingSlotTask Task that change player saving slot. Require UserData as slot index. Fields TYPE_ID Declaration public static readonly int TYPE_ID Methods FrameUpdate() This function is used to handle the internal logic. Declaration public override TaskResult FrameUpdate() Returns Type Description TaskResult \"Continue\" if the task should keep on after this frame. \"End\" if the task should end. Overrides Task.FrameUpdate()"
  },
  "api/AngeliA.CharSprite.html": {
    "href": "api/AngeliA.CharSprite.html",
    "title": "Class CharSprite | AngeliA",
    "summary": "Class CharSprite Fields Advance Declaration public float Advance Char Declaration public char Char FontIndex Declaration public int FontIndex NONE Declaration public static readonly CharSprite NONE Offset Declaration public FRect Offset Texture Declaration public object Texture"
  },
  "api/AngeliA.Character.html": {
    "href": "api/AngeliA.Character.html",
    "title": "Class Character | AngeliA",
    "summary": "Class Character General representation of characters in AngeliA games Implements IMapItem IDamageReceiver ICarrier IWithCharacterMovement IWithCharacterAttackness IWithCharacterHealth IWithCharacterBuff IWithCharacterRenderer Constructors Character() Declaration public Character() Fields Attackness Instance of the current functioning attackness behaviour Declaration public CharacterAttackness Attackness Buff Instance of the buff behaviour Declaration public readonly CharacterBuff Buff FullSleepDuration How long does it takes to get into full sleep Declaration public readonly FrameBasedInt FullSleepDuration Health Instance of the current functioning health behaviour Declaration public CharacterHealth Health Movement Instance of the current functioning movement behaviour Declaration public CharacterMovement Movement NativeAttackness Instance of the attackness behaviour from the character themselfs Declaration public readonly CharacterAttackness NativeAttackness NativeHealth Instance of the health behaviour from the character themselfs Declaration public readonly CharacterHealth NativeHealth NativeMovement Instance of the movement behaviour from the character themselfs Declaration public readonly CharacterMovement NativeMovement NativeRenderer Instance of the rendering behaviour from the character themselfs Declaration public readonly CharacterRenderer NativeRenderer Rendering Instance of the current functioning rendering behaviour Declaration public CharacterRenderer Rendering TeleportDuration How long does it takes to complete teleport Declaration public readonly FrameBasedInt TeleportDuration Properties AirDragX Amount of horizontal speed lost every frame Declaration public override int AirDragX { get; } Overrides Rigidbody.AirDragX AirDragY Amount of vertical speed lost every frame Declaration public override int AirDragY { get; } Overrides Rigidbody.AirDragY AllowBeingPush True if this entity can be push by other Declaration public override bool AllowBeingPush { get; } Overrides Rigidbody.AllowBeingPush AnimationType Current animation type of this character is showing Declaration public CharacterAnimationType AnimationType { get; set; } AttackTargetTeam Target team for dealing damage to other Declaration public virtual int AttackTargetTeam { get; } BodySuitInteractable True if this character can equip body armor from equipment items (not effect cloths) Declaration public bool BodySuitInteractable { get; set; } Bouncy How bouncy is this character appears to be (150 by default) Declaration public virtual int Bouncy { get; } CarryOtherOnTop Trhe if this entity can carry other ICarrier on top Declaration public override bool CarryOtherOnTop { get; } Overrides Rigidbody.CarryOtherOnTop CharacterState Current general game state of this character Declaration public CharacterState CharacterState { get; } CurrentAttackSpeedRate How fast should the character attacks (0 means couldn't attack, 1000 means normal speed) Declaration public int CurrentAttackSpeedRate { get; } DefaultCharacterHeight Intrinsic body height of this character in cm Declaration public virtual int DefaultCharacterHeight { get; } DespawnAfterPassoutDelay How many frames does this character despawn after passout. Set to -1 if they don't despawn Declaration public int DespawnAfterPassoutDelay { get; set; } EjectWhenInsideGround True if this entity try to move out of ground automatically when it stuck inside ground Declaration public override bool EjectWhenInsideGround { get; } Overrides Rigidbody.EjectWhenInsideGround FacingRight True if this entity is facing right side Declaration public override bool FacingRight { get; } Overrides Rigidbody.FacingRight FinalCharacterHeight Get the height of this character in global space Declaration public virtual int FinalCharacterHeight { get; } GlovesInteractable True if this character can equip gloves from equipment items (not effect cloths) Declaration public bool GlovesInteractable { get; set; } HandToolInteractable True if this character can equip handtool from equipment items Declaration public bool HandToolInteractable { get; set; } HelmetInteractable True if this character can equip helmet from equipment items (not effect cloths) Declaration public bool HelmetInteractable { get; set; } IgnoreDamageType Do not take damage in these types Declaration public virtual Tag IgnoreDamageType { get; } InventoryColumn Column count for this character's inventory Declaration public virtual int InventoryColumn { get; } InventoryID Unique ID of this character from inventory system Declaration public int InventoryID { get; } InventoryRow Row count for this character's inventory Declaration public virtual int InventoryRow { get; } InventoryType Which type of inventory does this character have Declaration public virtual CharacterInventoryType InventoryType { get; } JewelryInteractable True if this character can equip jewelry from equipment items Declaration public bool JewelryInteractable { get; set; } LastRequireBounceFrame Frame when character last start to bounce Declaration public int LastRequireBounceFrame { get; set; } PassOutFrame Frame when character passout Declaration public int PassOutFrame { get; } PhysicalLayer Which physical layer should this entity fill it's collider in Declaration public override sealed int PhysicalLayer { get; } Overrides Rigidbody.PhysicalLayer RenderingCellIndex First rendering cell's index for current frame Declaration public int RenderingCellIndex { get; } SelfCollisionMask Intrinsic physics layers this entity should collide with Declaration public override sealed int SelfCollisionMask { get; } Overrides Rigidbody.SelfCollisionMask ShoesInteractable True if this character can equip shoes from equipment items (not effect cloths) Declaration public bool ShoesInteractable { get; set; } SleepStartFrame Frame when character start to sleep Declaration public int SleepStartFrame { get; set; } Team Target team for taking damage from other Declaration public virtual int Team { get; } TeleportEndFrame End frame of the end of teleport Declaration public int TeleportEndFrame { get; } TeleportToFrontSide True if the character is teleporting to front side layer (closer to camera) Declaration public bool TeleportToFrontSide { get; } Teleporting True if the character is teleporting Declaration public bool Teleporting { get; } TeleportingWithPortal True if the character is teleporting with a portal Declaration public bool TeleportingWithPortal { get; } Methods AfterReposition(Int3, Int3) This function is called when the entity's map position got repositioned by stage Declaration public override void AfterReposition(Int3 fromUnitPos, Int3 toUnitPos) Overrides Entity.AfterReposition(Int3, Int3) BeforeUpdate() [2/4] This function is called every frame when entity is in stage. Prioritize using this function to update physics logic. Declaration public override void BeforeUpdate() Overrides Entity.BeforeUpdate() Bounce() Make the character bounce Declaration public void Bounce() CancelBounce() Stop the character from bouncing Declaration public void CancelBounce() CreateNativeAttackness() Create new instance for character's intrinsic attackness behaviour Declaration protected virtual CharacterAttackness CreateNativeAttackness() CreateNativeHealth() Create new instance for character's intrinsic health behaviour Declaration protected virtual CharacterHealth CreateNativeHealth() CreateNativeMovement() Create new instance for character's intrinsic movement behaviour Declaration protected virtual CharacterMovement CreateNativeMovement() CreateNativeRenderer() Create new instance for character's intrinsic rendering behaviour Declaration protected virtual CharacterRenderer CreateNativeRenderer() EnterTeleportState(bool, bool, bool) Make character apears to be teleported. This will not actually teleport the character. Declaration public void EnterTeleportState(bool front, bool portal, bool lastHalfOnly = false) Parameters Type Name Description bool front True if teleport to front layer bool portal True if teleport by a portal bool lastHalfOnly True if only shows the last half part of the teleport EquipmentAvailable(EquipmentType) True if given type of equipment is available for this character Declaration public bool EquipmentAvailable(EquipmentType equipmentType) FirstUpdate() [1/4] This function is called every frame when entity is in stage. Prioritize using this function to fill collider in to physics system. Declaration public override void FirstUpdate() Overrides Rigidbody.FirstUpdate() GetBonusFromFullSleep() Give the character all bonus from full sleep Declaration public void GetBonusFromFullSleep() GetCurrentPoseAnimationType() Calculate which type of animation should this character shows Declaration public virtual CharacterAnimationType GetCurrentPoseAnimationType() GetDescription() Get character's description from language system Declaration public string GetDescription() GetDisplayName() Get character's display name from language system Declaration public string GetDisplayName() IgnoreDamageFromLevel(int) Make character not taking damage from level blocks for specified frames long Declaration public void IgnoreDamageFromLevel(int duration = 1) InsideGroundCheck() Function that holds the stuck inside ground checking logic Declaration protected override bool InsideGroundCheck() Overrides Rigidbody.InsideGroundCheck() IsAttackAllowedByEquipment() True if character can perform attack unfer current equipment set Declaration public virtual bool IsAttackAllowedByEquipment() IsAttackAllowedByMovement() True if character can perform attack under current movement Declaration public virtual bool IsAttackAllowedByMovement() LateUpdate() [4/4] This function is called every frame when entity is in stage. Prioritize using this function to render the entity. Declaration public override void LateUpdate() Overrides Entity.LateUpdate() LockAnimationType(CharacterAnimationType, int) Force character to show the given type of animation for specified frames long Declaration public void LockAnimationType(CharacterAnimationType type, int duration = 1) OnActivated() This function is called when entity enter the stage Declaration public override void OnActivated() Overrides Rigidbody.OnActivated() OnCharacterRendered() This function is called after character is rendered Declaration public virtual void OnCharacterRendered() OnDamaged(Damage) This function is called when character take damage Declaration public virtual void OnDamaged(Damage damage) OnInactivated() This function is called when entity leave the stage Declaration public override void OnInactivated() Overrides Entity.OnInactivated() OverrideAttackness(CharacterAttackness, int) Override the attackness behaviour for specified frames Declaration public void OverrideAttackness(CharacterAttackness attacknessOverride, int duration = 1) OverrideHealth(CharacterHealth, int) Override the health behaviour for specified frames Declaration public void OverrideHealth(CharacterHealth healthOverride, int duration = 1) OverrideMovement(CharacterMovement, int) Override the movement behaviour for specified frames Declaration public void OverrideMovement(CharacterMovement movementOverride, int duration = 1) OverrideRenderer(CharacterRenderer, int) Override the rendering behaviour for specified frames Declaration public void OverrideRenderer(CharacterRenderer rendererOverride, int duration = 1) SetCharacterState(CharacterState) Set character's general game state, ignore when state already is the current one Declaration public virtual void SetCharacterState(CharacterState state) TryRepairAllEquipments(bool) Repair equipments once for this character Declaration public int TryRepairAllEquipments(bool requireMultiple = false) Parameters Type Name Description bool requireMultiple Set to true to repair all equipments for once Update() [3/4] This function is called every frame when entity is in stage. Prioritize using this function to update physics logic. Declaration public override void Update() Overrides Rigidbody.Update()"
  },
  "api/AngeliA.CharacterAnimationType.html": {
    "href": "api/AngeliA.CharacterAnimationType.html",
    "title": "Enum CharacterAnimationType | AngeliA",
    "summary": "Enum CharacterAnimationType Which type of animation does this character shows Fields Name Description"
  },
  "api/AngeliA.CharacterAttackness.html": {
    "href": "api/AngeliA.CharacterAttackness.html",
    "title": "Class CharacterAttackness | AngeliA",
    "summary": "Class CharacterAttackness Behavior class that handles attack logic for character Constructors CharacterAttackness(Character) Behavior class that handles attack logic for character Declaration public CharacterAttackness(Character character) Fields AirSpeedRateOnAttack Moving speed will be mutiply be this rate when character is attacking while not grounded (0 means 0%, 1000 means 100%) Declaration public readonly FrameBasedInt AirSpeedRateOnAttack AttackComboGap Attack happens between this many frames should be combo attacks Declaration public readonly FrameBasedInt AttackComboGap AttackInAir Allow character attack when not grounded Declaration public readonly FrameBasedBool AttackInAir AttackInWater Allow character attack when inside water Declaration public readonly FrameBasedBool AttackInWater AttackWhenClimbing Allow character attack when climbing Declaration public readonly FrameBasedBool AttackWhenClimbing AttackWhenDashing Allow character attack when dashing Declaration public readonly FrameBasedBool AttackWhenDashing AttackWhenFlying Allow character attack when flying Declaration public readonly FrameBasedBool AttackWhenFlying AttackWhenGrabbing Allow character attack when grabbing Declaration public readonly FrameBasedBool AttackWhenGrabbing AttackWhenPounding Allow character attack when pounding Declaration public readonly FrameBasedBool AttackWhenPounding AttackWhenRolling Allow character attack when rolling Declaration public readonly FrameBasedBool AttackWhenRolling AttackWhenRunning Allow character attack when running Declaration public readonly FrameBasedBool AttackWhenRunning AttackWhenRush Allow character attack when rushing Declaration public readonly FrameBasedBool AttackWhenRush AttackWhenSliding Allow character attack when sliding Declaration public readonly FrameBasedBool AttackWhenSliding AttackWhenSquatting Allow character attack when squatting Declaration public readonly FrameBasedBool AttackWhenSquatting AttackWhenWalking Allow character attack when walking Declaration public readonly FrameBasedBool AttackWhenWalking CancelAttackOnJump When character jumps, unfinished attack will be cancel Declaration public readonly FrameBasedBool CancelAttackOnJump DefaultSpeedRateOnAttack Moving speed will be mutiply be this rate when character is attacking (0 means 0%, 1000 means 100%) Declaration public readonly FrameBasedInt DefaultSpeedRateOnAttack HoldAttackPunishFrame If hold attack button to perform multiple attacks, the cooldown will be add this frames longer Declaration public readonly FrameBasedInt HoldAttackPunishFrame RunningSpeedRateOnAttack Moving speed will be mutiply be this rate when character is attacking while running (0 means 0%, 1000 means 100%) Declaration public readonly FrameBasedInt RunningSpeedRateOnAttack TargetCharacter Character hosting this attackness Declaration public readonly Character TargetCharacter WalkingSpeedRateOnAttack Moving speed will be mutiply be this rate when character is attacking while walking (0 means 0%, 1000 means 100%) Declaration public readonly FrameBasedInt WalkingSpeedRateOnAttack Properties AimingDirection Which direction does the character attacks Declaration public Direction8 AimingDirection { get; set; } AttackChargeStartFrame The start frame of the last attack charging Declaration public int? AttackChargeStartFrame { get; } AttackCooldown How many frames should be wait from the prev attack end to the next attack start Declaration public int AttackCooldown { get; set; } AttackDuration How many frames should be the current attack last Declaration public int AttackDuration { get; set; } AttackStartFacingRight True if character facing right when the current attack start Declaration public bool AttackStartFacingRight { get; set; } AttackStyleIndex Attack style index of the current attack, indicate what kind of rendering style should be apply to the current attack Declaration public int AttackStyleIndex { get; set; } HoldingAttack True if the character is holding attack button Declaration public bool HoldingAttack { get; } IsAttackIgnored True if the character is not allow to attack at the current frame Declaration public bool IsAttackIgnored { get; } IsAttacking True if the character is attacking at the current frame Declaration public bool IsAttacking { get; } IsChargingAttack True if the character is charging attack at the current frame Declaration public bool IsChargingAttack { get; set; } LastAttackCharged True if the last performed attack is charged Declaration public bool LastAttackCharged { get; } LastAttackFrame The start frame of the last attack Declaration public int LastAttackFrame { get; } LockFacingOnAttack True if the character can not change it's facing direction when attacking Declaration public bool LockFacingOnAttack { get; set; } MinimalChargeAttackDuration Charge attack longer than this frame should be count as attack charged Declaration public int MinimalChargeAttackDuration { get; set; } RepeatAttackWhenHolding True if the character can hold attack button to keep attacking multiple times Declaration public bool RepeatAttackWhenHolding { get; set; } Methods Attack(bool, bool) Perform an attack Declaration public virtual bool Attack(bool facingRight, bool charged = false) Parameters Type Name Description bool facingRight True if the attack is performed when character facing right bool charged True if the attack is charged CancelAttack() Cancel current performing attack Declaration public void CancelAttack() CancelIgnoreAttack() Allowing attack which ignored by IgnoreAttack function Declaration public void CancelIgnoreAttack() IgnoreAimingDirection(Direction8, int) Do not allow aiming at given direction for specified frames Declaration public void IgnoreAimingDirection(Direction8 dir, int duration = 1) IgnoreAttack(int) Do not allow attack for specified frames Declaration public void IgnoreAttack(int duration = 1) IsAimingDirectionIgnored(Direction8) True if the given aiming direction is currently ignored Declaration public bool IsAimingDirectionIgnored(Direction8 dir) OnActivated() Callback for character entity get activated Declaration public virtual void OnActivated() PhysicsUpdate_Attack() Callback for update the attackness Declaration public virtual void PhysicsUpdate_Attack()"
  },
  "api/AngeliA.CharacterAttribute.DefaultSelectedPlayerAttribute.html": {
    "href": "api/AngeliA.CharacterAttribute.DefaultSelectedPlayerAttribute.html",
    "title": "Class CharacterAttribute.DefaultSelectedPlayerAttribute | AngeliA",
    "summary": "Class CharacterAttribute.DefaultSelectedPlayerAttribute Make the character the default selected player Constructors DefaultSelectedPlayerAttribute(int) Make the character the default selected player Declaration public DefaultSelectedPlayerAttribute(int priority = 0)"
  },
  "api/AngeliA.CharacterAttribute.html": {
    "href": "api/AngeliA.CharacterAttribute.html",
    "title": "Class CharacterAttribute | AngeliA",
    "summary": "Class CharacterAttribute Attribute for character class"
  },
  "api/AngeliA.CharacterBuff.html": {
    "href": "api/AngeliA.CharacterBuff.html",
    "title": "Class CharacterBuff | AngeliA",
    "summary": "Class CharacterBuff Behavior class that handles buff logic for characters Properties BuffCount Total count for all buff the character is having Declaration public int BuffCount { get; } Methods ClearAllBuffs() Remove all buff from character Declaration public void ClearAllBuffs() ClearBuff(int) Remove the given buff from character Declaration public void ClearBuff(int id) ForAllBuffs() Iterate thought all buffs this character currently have Declaration public IEnumerable<Buff> ForAllBuffs() GetBuffData(int) Get the user data of the given buff from the character Declaration public object GetBuffData(int id) GetBuffDescription(int) Get description of the given buff from the language system Declaration public static string GetBuffDescription(int id) GetBuffDisplayName(int) Get display name of the given buff from the language system Declaration public static string GetBuffDisplayName(int id) GetBuffEndFrame(int) Get which frame does the given buff ends Declaration public int GetBuffEndFrame(int id) GiveBuff(int, int) Give the character given buff for specified frames long Declaration public void GiveBuff(int id, int duration = -1) HasBuff(int) True if the character is having the given buff Declaration public bool HasBuff(int id) IsBuffPrevented(int) True if the given buff is being prevented Declaration public bool IsBuffPrevented(int id) PreventBuff(int, int) Do not allow the character have given buff for specified frames Declaration public void PreventBuff(int id, int duration = 1) SetBuffData(int, object) Set user data of the given buff to the character Declaration public void SetBuffData(int id, object data)"
  },
  "api/AngeliA.CharacterFaceExpression.html": {
    "href": "api/AngeliA.CharacterFaceExpression.html",
    "title": "Enum CharacterFaceExpression | AngeliA",
    "summary": "Enum CharacterFaceExpression Face expression type for pose animation characters Fields Name Description"
  },
  "api/AngeliA.CharacterHealth.html": {
    "href": "api/AngeliA.CharacterHealth.html",
    "title": "Class CharacterHealth | AngeliA",
    "summary": "Class CharacterHealth Behavior class that handles health logic for character Fields DamageStunDuration How many frames does the character stun when they take damage Declaration public readonly FrameBasedInt DamageStunDuration InvincibleDuration How many frames does the character's Invincibility last Declaration public readonly FrameBasedInt InvincibleDuration InvincibleOnDash Should character be invincible when dashing Declaration public readonly FrameBasedBool InvincibleOnDash InvincibleOnRush Should character be invincible when rushing Declaration public readonly FrameBasedBool InvincibleOnRush KnockbackDeceleration Movement deceleration when the character is knocking back after take damage Declaration public readonly FrameBasedInt KnockbackDeceleration KnockbackSpeed How fast should the character get knock back when they take damage Declaration public readonly FrameBasedInt KnockbackSpeed MaxHP Upper limit of the HP Declaration public readonly FrameBasedInt MaxHP Properties HP Current health point of the character Declaration public int HP { get; set; } InvincibleEndFrame The frame when character's invincibility ends Declaration public int InvincibleEndFrame { get; set; } IsEmptyHealth True if the character have no health point Declaration public bool IsEmptyHealth { get; } IsFullHealth True if the character is full of health Declaration public bool IsFullHealth { get; } IsInvincible True if the character is currently invincible Declaration public bool IsInvincible { get; } LastDamageFrame The frame when character took damage last time Declaration public int LastDamageFrame { get; set; } TakingDamage True if the character is currently taking damage Declaration public bool TakingDamage { get; } Methods Heal(int) Add given amount of HP for the character Declaration public bool Heal(int heal) Returns Type Description bool True when character get healed MakeInvincible(int) Let the character become invincible for given frames Declaration public void MakeInvincible(int duration = 1) OnActivated() Callback when character entity get activated Declaration public void OnActivated()"
  },
  "api/AngeliA.CharacterInventoryType.html": {
    "href": "api/AngeliA.CharacterInventoryType.html",
    "title": "Enum CharacterInventoryType | AngeliA",
    "summary": "Enum CharacterInventoryType Which type of inventory does this character have Fields Name Description Map Every instance of this type of characters have it's own inventory data based on where this character spawn from map None No inventory logic should be perform Unique All instance of this type of characters share the same inventory data"
  },
  "api/AngeliA.CharacterMovement.html": {
    "href": "api/AngeliA.CharacterMovement.html",
    "title": "Class CharacterMovement | AngeliA",
    "summary": "Class CharacterMovement Behavior class that handles movement logic for character Constructors CharacterMovement(Rigidbody) Behavior class that handles movement logic for character Declaration public CharacterMovement(Rigidbody rig) Fields AllowJumpWhenClimbing Allow character jump when climbing Declaration [PropVisibility(\"ClimbAvailable\", CompareMode.Equal)] public readonly FrameBasedBool AllowJumpWhenClimbing AllowSquatJump Allow character jump when squatting, and keep squatting when jump in air Declaration [PropVisibility(\"JumpCount\", CompareMode.GreaterThan, 0)] public readonly FrameBasedBool AllowSquatJump ClimbAvailable Allow character to climb Declaration [PropGroup(\"Climb\")] public readonly FrameBasedBool ClimbAvailable ClimbSpeedX Horizontal speed when climbing Declaration [PropVisibility(\"ClimbAvailable\", CompareMode.Equal)] public readonly FrameBasedInt ClimbSpeedX ClimbSpeedY Vertical speed when climbing Declaration [PropVisibility(\"ClimbAvailable\", CompareMode.Equal)] public readonly FrameBasedInt ClimbSpeedY CrashAvailable Allow character crash Declaration [PropGroup(\"Crash\")] public readonly FrameBasedBool CrashAvailable CrashDeceleration Speed deceleration when character crashing Declaration [PropVisibility(\"CrashAvailable\", CompareMode.Equal)] public readonly FrameBasedInt CrashDeceleration CrashDuration How many frames does it takes for one crash Declaration [PropVisibility(\"CrashAvailable\", CompareMode.Equal)] public readonly FrameBasedInt CrashDuration CrashRunDurationRequire How many frames does it takes to make character crash Declaration [PropVisibility(\"CrashAvailable\", CompareMode.And, \"CrashWhenSlippy\")] public readonly FrameBasedInt CrashRunDurationRequire CrashWhenSlippy Make character crash when running too long on slippery ground or rush on slippery ground Declaration [PropVisibility(\"CrashAvailable\", CompareMode.Equal)] public readonly FrameBasedBool CrashWhenSlippy DashAcceleration Speed acceleration when dashing Declaration [PropVisibility(\"DashAvailable\", CompareMode.Equal)] public readonly FrameBasedInt DashAcceleration DashAvailable Allow character to dash (player hold down button and press jump button for once) Declaration [PropGroup(\"Dash\")] public readonly FrameBasedBool DashAvailable DashCancelLoseRate Speed multiply this rate when dash being cancel (0 means 0%, 1000 means 100%) Declaration [PropVisibility(\"DashAvailable\", CompareMode.Equal)] public readonly FrameBasedInt DashCancelLoseRate DashCooldown Frames length between prev dash end and next dash start Declaration [PropVisibility(\"DashAvailable\", CompareMode.Equal)] public readonly FrameBasedInt DashCooldown DashDuration How many frames does dash last Declaration [PropVisibility(\"DashAvailable\", CompareMode.Equal)] public readonly FrameBasedInt DashDuration DashHeightAmount Character hitbox height multiply this rate when dashing (0 means 0%, 1000 means 100%) Declaration [PropVisibility(\"DashAvailable\", CompareMode.Equal)] public readonly FrameBasedInt DashHeightAmount DashPutoutFire Allow character dash through fire to put it out Declaration [PropVisibility(\"DashAvailable\", CompareMode.Equal)] public readonly FrameBasedBool DashPutoutFire DashSpeed Movement speed for dashing Declaration [PropVisibility(\"DashAvailable\", CompareMode.Equal)] public readonly FrameBasedInt DashSpeed DashWithRoll Character roll when dashing Declaration [PropVisibility(\"DashAvailable\", CompareMode.Equal)] public readonly FrameBasedBool DashWithRoll FirstJumpWithRoll When character jump from ground, does it jump with rolling in air Declaration [PropVisibility(\"JumpCount\", CompareMode.GreaterThan, 0)] public readonly FrameBasedBool FirstJumpWithRoll FlyAcceleration Speed acceleration when flying Declaration [PropVisibility(\"FlyAvailable\", CompareMode.Equal)] public readonly FrameBasedInt FlyAcceleration FlyAvailable Allow character to fly (player press jump button when no jump count left) Declaration [PropGroup(\"Fly\")] public readonly FrameBasedBool FlyAvailable FlyCooldown Character has to wait this many frames to fly again Declaration [PropVisibility(\"FlyAvailable\", CompareMode.Equal)] public readonly FrameBasedInt FlyCooldown FlyDeceleration Speed deceleration when flying Declaration [PropVisibility(\"FlyAvailable\", CompareMode.Equal)] public readonly FrameBasedInt FlyDeceleration FlyFallSpeed Fall down speed shen flying Declaration [PropVisibility(\"FlyAvailable\", CompareMode.Equal)] public readonly FrameBasedInt FlyFallSpeed FlyGravityFallRate Gravity multiply this rate when flying and moving down (0 means 0%, 1000 means 100%) Declaration [PropVisibility(\"FlyAvailable\", CompareMode.Equal)] public readonly FrameBasedInt FlyGravityFallRate FlyGravityRiseRate Gravity multiply this rate when flying and moving up (0 means 0%, 1000 means 100%) Declaration [PropVisibility(\"FlyAvailable\", CompareMode.Equal)] public readonly FrameBasedInt FlyGravityRiseRate FlyHeightAmount Character hitbox height multiply this rate when flying (0 means 0%, 1000 means 100%) Declaration [PropVisibility(\"FlyAvailable\", CompareMode.Equal)] public readonly FrameBasedInt FlyHeightAmount FlyMoveSpeed Horizontal move speed when flying Declaration [PropVisibility(\"FlyAvailable\", CompareMode.Equal)] public readonly FrameBasedInt FlyMoveSpeed FlyRiseSpeed Initial speed when fly start Declaration [PropVisibility(\"FlyAvailable\", CompareMode.Equal)] public readonly FrameBasedInt FlyRiseSpeed GlideOnFlying When glide flying, character always move to the direction it facing Declaration [PropVisibility(\"FlyAvailable\", CompareMode.Equal)] public readonly FrameBasedBool GlideOnFlying GrabFlipThroughDownAvailable Allow character to flip through block downward (player press down when standing on top-grabable blocks) Declaration [PropVisibility(\"GrabTopAvailable\", CompareMode.Equal)] public readonly FrameBasedBool GrabFlipThroughDownAvailable GrabFlipThroughDuration How long does flip through takes in frames Declaration [PropVisibility(\"GrabTopAvailable\", CompareMode.Equal)] public readonly FrameBasedInt GrabFlipThroughDuration GrabFlipThroughUpAvailable Allow character to flip through block upward (player press up when top-grabbing) Declaration [PropVisibility(\"GrabTopAvailable\", CompareMode.Equal)] public readonly FrameBasedBool GrabFlipThroughUpAvailable GrabMoveSpeedX Horizontal move speed when top-grabbing Declaration [PropVisibility(\"GrabTopAvailable\", CompareMode.Equal)] public readonly FrameBasedInt GrabMoveSpeedX GrabMoveSpeedY Vertical move speed when side-grabbing Declaration [PropVisibility(\"GrabSideAvailable\", CompareMode.Equal)] public readonly FrameBasedInt GrabMoveSpeedY GrabSideAvailable Allow character grab on the side of blocks with Tag.GrabSide Declaration public readonly FrameBasedBool GrabSideAvailable GrabSideHeightAmount Character hitbox height multiply this rate when side-grabbing (0 means 0%, 1000 means 100%) Declaration [PropVisibility(\"GrabSideAvailable\", CompareMode.Equal)] public readonly FrameBasedInt GrabSideHeightAmount GrabSideJumpKickSpeed Horizontal initial speed when character jump when side-grabbing Declaration [PropVisibility(\"GrabSideAvailable\", CompareMode.Equal)] public readonly FrameBasedInt GrabSideJumpKickSpeed GrabTopAvailable Allow character grab on the bottom of blocks with Tag.GrabTop Declaration [PropGroup(\"Grab\")] public readonly FrameBasedBool GrabTopAvailable GrabTopHeightAmount Character hitbox height multiply this rate when top-grabbing (0 means 0%, 1000 means 100%) Declaration [PropVisibility(\"GrabTopAvailable\", CompareMode.Equal)] public readonly FrameBasedInt GrabTopHeightAmount InWaterSpeedRate When character inside water, the movement speed will multiply this rate (0 means 0%, 1000 means 100%) Declaration public readonly FrameBasedInt InWaterSpeedRate JumpBoostFromMoveRate When character start jump, if it's moving, the running speed will multiply this rate and add into the initial jump speed. (0 means 0%, 1000 means 100%) Declaration [PropVisibility(\"JumpCount\", CompareMode.GreaterThan, 0)] public readonly FrameBasedInt JumpBoostFromMoveRate JumpBreakDash Allow character jump when dashing and stop the dash Declaration [PropVisibility(\"JumpCount\", CompareMode.GreaterThan, 0)] public readonly FrameBasedBool JumpBreakDash JumpBreakRush Allow character jump when rushing and stop the rush Declaration [PropVisibility(\"JumpCount\", CompareMode.GreaterThan, 0)] public readonly FrameBasedBool JumpBreakRush JumpCount How many times can the character jump without touching ground Declaration [PropGroup(\"Jump\")] public readonly FrameBasedInt JumpCount JumpDownThroughOneway Allow character jump down and go through oneway gate (player holding down button and press jump button once) Declaration public readonly FrameBasedBool JumpDownThroughOneway JumpReleaseSpeedRate When character stop trying to jump (player release the jump button), and the character is still moving up, then the current speed will be multiply to this rate (0 means 0%, 1000 means 100%) Declaration [PropVisibility(\"JumpCount\", CompareMode.GreaterThan, 0)] public readonly FrameBasedInt JumpReleaseSpeedRate JumpRiseGravityRate Gravity applys on the character will multiply this rate when character moving up in air (0 means 0%, 1000 means 100%) Declaration [PropVisibility(\"JumpCount\", CompareMode.GreaterThan, 0)] public readonly FrameBasedInt JumpRiseGravityRate JumpSpeed Initial speed when character start to jump Declaration [PropVisibility(\"JumpCount\", CompareMode.GreaterThan, 0)] public readonly FrameBasedInt JumpSpeed MovementHeight Height of the character in global space when character is 160cm Declaration public readonly FrameBasedInt MovementHeight MovementWidth Default with of the character Declaration [PropGroup(\"Size\")] public readonly FrameBasedInt MovementWidth PoundAvailable Allow character ground pound in air (player press down button in air) Declaration [PropGroup(\"Pound\")] public readonly FrameBasedBool PoundAvailable PoundPutoutFire Allow character pound on fire to put it out Declaration [PropVisibility(\"PoundAvailable\", CompareMode.Equal)] public readonly FrameBasedBool PoundPutoutFire PoundSpeed Movement speed when pounding Declaration [PropVisibility(\"PoundAvailable\", CompareMode.Equal)] public readonly FrameBasedInt PoundSpeed PushAvailable Allow character push other rigidbody Declaration [PropGroup(\"Push\")] public readonly FrameBasedBool PushAvailable PushSpeed Movement speed when character pushing Declaration [PropVisibility(\"PushAvailable\", CompareMode.Equal)] public readonly FrameBasedInt PushSpeed ResetJumpCountWhenGrab Set jump count to 0 when character grabbing Declaration [PropVisibility(\"GrabTopAvailable\", CompareMode.Or, \"GrabSideAvailable\")] public readonly FrameBasedBool ResetJumpCountWhenGrab ResetJumpCountWhenSlide Set jump count to 0 when slide Declaration [PropVisibility(\"SlideAvailable\", CompareMode.Equal)] public readonly FrameBasedBool ResetJumpCountWhenSlide RunAcceleration Speed acceleration when character is running Declaration [PropVisibility(\"RunAvailable\", CompareMode.Equal)] public readonly FrameBasedInt RunAcceleration RunAvailable Allow character to run Declaration [PropGroup(\"Run\")] public readonly FrameBasedBool RunAvailable RunBrakeAcceleration Speed acceleration when character is trying to run to the opposite direction Declaration [PropVisibility(\"RunAvailable\", CompareMode.Equal)] public readonly FrameBasedInt RunBrakeAcceleration RunDeceleration Speed deceleration when character is running Declaration [PropVisibility(\"RunAvailable\", CompareMode.Equal)] public readonly FrameBasedInt RunDeceleration RunSpeed How fast should the character run Declaration [PropVisibility(\"RunAvailable\", CompareMode.Equal)] public readonly FrameBasedInt RunSpeed RushAcceleration Speed acceleration when rushing Declaration [PropVisibility(\"RushAvailable\", CompareMode.Equal)] public readonly FrameBasedInt RushAcceleration RushAvailable Allow character to rush Declaration [PropGroup(\"Rush\")] public readonly FrameBasedBool RushAvailable RushCooldown How many frames does character has to wair after prev rush end to rush again Declaration [PropVisibility(\"RushAvailable\", CompareMode.Equal)] public readonly FrameBasedInt RushCooldown RushDeceleration Speed deceleration when rushing Declaration [PropVisibility(\"RushAvailable\", CompareMode.Equal)] public readonly FrameBasedInt RushDeceleration RushDuration How many frames does rush last Declaration [PropVisibility(\"RushAvailable\", CompareMode.Equal)] public readonly FrameBasedInt RushDuration RushHeightAmount Character hitbox height multiply this rate when rushing (0 means 0%, 1000 means 100%) Declaration [PropVisibility(\"RushAvailable\", CompareMode.Equal)] public readonly FrameBasedInt RushHeightAmount RushInAir Allow character rush when not grounded Declaration [PropVisibility(\"RushAvailable\", CompareMode.Equal)] public readonly FrameBasedBool RushInAir RushInWater Allow character rush when inside water Declaration [PropVisibility(\"RushAvailable\", CompareMode.Equal)] public readonly FrameBasedBool RushInWater RushPutoutFire Allow character rush through fire to put it out Declaration [PropVisibility(\"RushAvailable\", CompareMode.Equal)] public readonly FrameBasedBool RushPutoutFire RushSpeed Movement speed when rushing Declaration [PropVisibility(\"RushAvailable\", CompareMode.Equal)] public readonly FrameBasedInt RushSpeed RushStiff How many frames does character not allow to move after rush end Declaration [PropVisibility(\"RushAvailable\", CompareMode.Equal)] public readonly FrameBasedInt RushStiff RushStopSpeed Movement speed when rush end Declaration [PropVisibility(\"RushAvailable\", CompareMode.Equal)] public readonly FrameBasedInt RushStopSpeed RushWhenClimb character rush when climb Declaration [PropVisibility(\"RushAvailable\", CompareMode.Equal)] public readonly FrameBasedBool RushWhenClimb RushWhenSquat character rush when squat Declaration [PropVisibility(\"RushAvailable\", CompareMode.Equal)] public readonly FrameBasedBool RushWhenSquat SlideAvailable Allow character to slide on wall Declaration [PropGroup(\"Slide\")] public readonly FrameBasedBool SlideAvailable SlideDropSpeed Drop down speed when sliding Declaration [PropVisibility(\"SlideAvailable\", CompareMode.Equal)] public readonly FrameBasedInt SlideDropSpeed SlideJumpKickSpeed Horizontal initial speed when character jump when slide Declaration [PropVisibility(\"SlideAvailable\", CompareMode.Equal)] public readonly FrameBasedInt SlideJumpKickSpeed SlideOnAnyBlock Allow character to slide on all type of blocks Declaration [PropVisibility(\"SlideAvailable\", CompareMode.Equal)] public readonly FrameBasedBool SlideOnAnyBlock SlipAcceleration Speed acceleration when moving on slippery ground Declaration [PropVisibility(\"SlipAvailable\", CompareMode.Equal)] public readonly FrameBasedInt SlipAcceleration SlipAvailable Allow character slip when run on slippery ground Declaration [PropGroup(\"Slip\")] public readonly FrameBasedBool SlipAvailable SlipDeceleration Speed deceleration when moving on slippery ground Declaration [PropVisibility(\"SlipAvailable\", CompareMode.Equal)] public readonly FrameBasedInt SlipDeceleration SquatAcceleration Movement acceleration when squat moving Declaration [PropVisibility(\"SquatAvailable\", CompareMode.Equal)] public readonly FrameBasedInt SquatAcceleration SquatAvailable Allow character to squat Declaration [PropGroup(\"Squat\")] public readonly FrameBasedBool SquatAvailable SquatDeceleration Movement deceleration when squat moving Declaration [PropVisibility(\"SquatAvailable\", CompareMode.Equal)] public readonly FrameBasedInt SquatDeceleration SquatHeightAmount Character hitbox height multiply this rate when squatting (0 means 0%, 1000 means 100%) Declaration [PropVisibility(\"SquatAvailable\", CompareMode.Equal)] public readonly FrameBasedInt SquatHeightAmount SquatMoveSpeed Move speed when character squatting, set to 0 when not allow squat move Declaration [PropVisibility(\"SquatAvailable\", CompareMode.Equal)] public readonly FrameBasedInt SquatMoveSpeed SubsequentJumpWithRoll When character jump from air, does it jump with rolling in air Declaration [PropVisibility(\"JumpCount\", CompareMode.GreaterThan, 1)] public readonly FrameBasedBool SubsequentJumpWithRoll SwimAcceleration Speed acceleration when chracter inside water Declaration [PropVisibility(\"SwimAvailable\", CompareMode.Equal)] public readonly FrameBasedInt SwimAcceleration SwimAvailable Allow character swim in water Declaration [PropGroup(\"Swim\")] public readonly FrameBasedBool SwimAvailable SwimDeceleration Speed deceleration when chracter inside water Declaration [PropVisibility(\"SwimAvailable\", CompareMode.Equal)] public readonly FrameBasedInt SwimDeceleration SwimHeightAmount Character hitbox height multiply this rate when swimming (0 means 0%, 1000 means 100%) Declaration [PropVisibility(\"SwimAvailable\", CompareMode.Equal)] public readonly FrameBasedInt SwimHeightAmount SwimJumpSpeed Movement speed when character jump inside water Declaration [PropVisibility(\"SwimAvailable\", CompareMode.Equal)] public readonly FrameBasedInt SwimJumpSpeed SwimSpeed Movement speed when character swimming Declaration [PropVisibility(\"SwimAvailable\", CompareMode.Equal)] public readonly FrameBasedInt SwimSpeed SwimWidthAmount Character hitbox width multiply this rate when swimming (0 means 0%, 1000 means 100%) Declaration [PropVisibility(\"SwimAvailable\", CompareMode.Equal)] public readonly FrameBasedInt SwimWidthAmount Target Declaration public readonly Rigidbody Target TargetCharacter Declaration public readonly Character TargetCharacter WalkAcceleration Speed acceleration when character is walking Declaration [PropVisibility(\"WalkAvailable\", CompareMode.Equal)] public readonly FrameBasedInt WalkAcceleration WalkAvailable Allow character to walk Declaration [PropGroup(\"Walk\")] public readonly FrameBasedBool WalkAvailable WalkBrakeAcceleration Speed acceleration when character is trying to walk to the opposite direction Declaration [PropVisibility(\"WalkAvailable\", CompareMode.Equal)] public readonly FrameBasedInt WalkBrakeAcceleration WalkDeceleration Speed deceleration when character is walking Declaration [PropVisibility(\"WalkAvailable\", CompareMode.Equal)] public readonly FrameBasedInt WalkDeceleration WalkSpeed How fast should the character walk Declaration [PropVisibility(\"WalkAvailable\", CompareMode.Equal)] public readonly FrameBasedInt WalkSpeed Properties CollisionMask Declaration protected int CollisionMask { get; } CurrentJumpCount How many times does character jumps after touching ground Declaration public int CurrentJumpCount { get; set; } FacingFront True if character currently facing front Declaration public bool FacingFront { get; set; } FacingRight True if character currently facing right Declaration public bool FacingRight { get; set; } Height Declaration protected int Height { get; set; } InWater Declaration protected bool InWater { get; } IntendedX 1 if character want to move right, -1 for left Declaration public int IntendedX { get; } IntendedY 1 if character want to move up, -1 for down Declaration public int IntendedY { get; } IsClimbing True if character is climbing Declaration public bool IsClimbing { get; } IsCrashing True if character is crashing Declaration public bool IsCrashing { get; } IsDashing True if character is dashing Declaration public bool IsDashing { get; } IsFlying True if character is flying Declaration public bool IsFlying { get; } IsGrabFlipping True if character flipping through blocks Declaration public bool IsGrabFlipping { get; } IsGrabFlippingDown True if character flipping through blocks downward Declaration public bool IsGrabFlippingDown { get; } IsGrabFlippingUp True if character flipping through blocks upward Declaration public bool IsGrabFlippingUp { get; } IsGrabbingSide True if character is side-grabbing Declaration public bool IsGrabbingSide { get; } IsGrabbingTop True if character is top-grabbing Declaration public bool IsGrabbingTop { get; } IsGrounded Declaration protected bool IsGrounded { get; } IsInsideGround Declaration protected bool IsInsideGround { get; } IsMoving True if character is moving Declaration public bool IsMoving { get; } IsPounding True if character is pounding Declaration public bool IsPounding { get; } IsRolling True if character is rolling Declaration public bool IsRolling { get; } IsRunning True if character is running Declaration public bool IsRunning { get; } IsRushing True if character is rushing Declaration public bool IsRushing { get; } IsSliding True if character is sliding on wall Declaration public bool IsSliding { get; } IsSquatting True if character is squatting Declaration public bool IsSquatting { get; } IsWalking True if character is walking Declaration public bool IsWalking { get; } LastClimbFrame Last frame when character climb Declaration public int LastClimbFrame { get; } LastCrashFrame Last frame when character crash Declaration public int LastCrashFrame { get; } LastDashFrame Last frame when character start to dash Declaration public int LastDashFrame { get; } LastEndMoveFrame Last frame when character moving ends Declaration public int LastEndMoveFrame { get; } LastFacingChangeFrame Last frame when character change horizontal facing Declaration public int LastFacingChangeFrame { get; } LastFlyFrame Last frame when character start to fly Declaration public int LastFlyFrame { get; } LastGrabCancelFrame Last frame when character stop grabbing Declaration public int LastGrabCancelFrame { get; } LastGrabFlipDownFrame Last frame when character start to grab flip downward Declaration public int LastGrabFlipDownFrame { get; } LastGrabFlipUpFrame Last frame when character start to grab flip upward Declaration public int LastGrabFlipUpFrame { get; } LastGrabbingFrame Last frame when character is grabbing Declaration public int LastGrabbingFrame { get; } LastGroundFrame Last frame when character start touching ground Declaration public int LastGroundFrame { get; } LastGroundingFrame Last frame when character is touching ground Declaration public int LastGroundingFrame { get; } LastJumpFrame Last frame when character start to jump Declaration public int LastJumpFrame { get; } LastMoveDirection Direction for last movement Declaration public Int2 LastMoveDirection { get; } LastPoundingFrame Last frame when character is pounding Declaration public int LastPoundingFrame { get; } LastRushStartFrame Last frame when character start to rush Declaration public int LastRushStartFrame { get; } LastSlidingFrame Last frame when character is sliding on wall Declaration public int LastSlidingFrame { get; } LastSlippyMoveStartFrame Last frame when character start to move on slippery ground Declaration public int LastSlippyMoveStartFrame { get; } LastSquatStartFrame Last frame when character start to squat Declaration public int LastSquatStartFrame { get; } LastSquattingFrame Last frame when character is squatting Declaration public int LastSquattingFrame { get; } LastStartMoveFrame Last frame when character start to move Declaration public int LastStartMoveFrame { get; } LastStartRunFrame Last frame when character start to run Declaration public int LastStartRunFrame { get; } MovementState Current movement type Declaration public CharacterMovementState MovementState { get; set; } OffsetX Declaration protected int OffsetX { get; set; } OffsetY Declaration protected int OffsetY { get; set; } Rect Declaration protected IRect Rect { get; } ShouldRun True if character want to run instead of walk when move Declaration public bool ShouldRun { get; } SyncFromConfigFile Does movement config sync with json file in game universe folder Declaration public virtual bool SyncFromConfigFile { get; } VelocityX Declaration protected int VelocityX { get; set; } VelocityY Declaration protected int VelocityY { get; set; } Width Declaration protected int Width { get; set; } X Declaration protected int X { get; set; } Y Declaration protected int Y { get; set; } Methods CalculateMovementState(CharacterMovement) Get current movement type base on current cached data Declaration public static CharacterMovementState CalculateMovementState(CharacterMovement movement) Crash() Perform crash (call this once when crash start) Declaration public virtual void Crash() Dash() Perform dash (call this once when dash start) Declaration public virtual void Dash() GetMovementState() Get current movement type base on current cached data Declaration protected virtual CharacterMovementState GetMovementState() HoldJump(bool) Is character holding jump (call this every frame no matter character is jumpping or not) Declaration public virtual void HoldJump(bool holding) Jump(bool) Perform jump (call this once when jump start) Declaration public virtual void Jump(bool isSquatJump = false) Parameters Type Name Description bool isSquatJump Is this jump a squat jump or not LockFacingRight(bool, int) Force character facing right or left for given frames Declaration public void LockFacingRight(bool facingRight, int duration = 1) LockSquat(int) Force character to squat for given frames Declaration public void LockSquat(int duration = 1) Move(Direction3, Direction3, bool) Move the character Declaration public virtual void Move(Direction3 x, Direction3 y, bool walk = false) bool walk True if character want to walk instead of run MoveLogic(int, int, bool) Declaration protected void MoveLogic(int x, int y, bool walk = false) OnActivated() Declaration public virtual void OnActivated() PhysicsUpdateGamePlay() Declaration public virtual void PhysicsUpdateGamePlay() Pound() Perform pound (call this once when pound start) Declaration public virtual void Pound() ReloadMovementConfigFromFile() Load movement data from json file inside game universe folder Declaration public void ReloadMovementConfigFromFile() Rush() Perform rush (call this once when rush start) Declaration public virtual void Rush() SetSpeedRate(int, int) Force movement speed rate for given frames Declaration public void SetSpeedRate(int newRate, int duration = 1) Parameters Type Name Description int newRate 0 means 0%, 1000 means 100% Stop() Stop current movement Declaration public virtual void Stop() StopCrash() Stop current crash Declaration public void StopCrash() StopDash() Stop current dashing Declaration public void StopDash() StopRush() Stop current rush Declaration public void StopRush() UpdateLater() Declaration public virtual void UpdateLater()"
  },
  "api/AngeliA.CharacterMovementState.html": {
    "href": "api/AngeliA.CharacterMovementState.html",
    "title": "Enum CharacterMovementState | AngeliA",
    "summary": "Enum CharacterMovementState Fields Name Description"
  },
  "api/AngeliA.CharacterPose.html": {
    "href": "api/AngeliA.CharacterPose.html",
    "title": "Class CharacterPose | AngeliA",
    "summary": "Class CharacterPose Complete pose infomation at one moment for a pose-style character Constructors CharacterPose() Declaration public CharacterPose() Fields BodyTwist Declaration public int BodyTwist HandGrabAttackTwistL Declaration public int HandGrabAttackTwistL HandGrabAttackTwistR Declaration public int HandGrabAttackTwistR HandGrabRotationL Declaration public int HandGrabRotationL HandGrabRotationR Declaration public int HandGrabRotationR HandGrabScaleL Declaration public int HandGrabScaleL HandGrabScaleR Declaration public int HandGrabScaleR HeadTwist Declaration public int HeadTwist PoseRootX Declaration public int PoseRootX PoseRootY Declaration public int PoseRootY Properties Body Declaration public BodyPart Body { get; init; } FootL Declaration public BodyPart FootL { get; init; } FootR Declaration public BodyPart FootR { get; init; } HandL Declaration public BodyPart HandL { get; init; } HandR Declaration public BodyPart HandR { get; init; } Head Declaration public BodyPart Head { get; init; } Hip Declaration public BodyPart Hip { get; init; } LowerArmL Declaration public BodyPart LowerArmL { get; init; } LowerArmR Declaration public BodyPart LowerArmR { get; init; } LowerLegL Declaration public BodyPart LowerLegL { get; init; } LowerLegR Declaration public BodyPart LowerLegR { get; init; } ShoulderL Declaration public BodyPart ShoulderL { get; init; } ShoulderR Declaration public BodyPart ShoulderR { get; init; } UpperArmL Declaration public BodyPart UpperArmL { get; init; } UpperArmR Declaration public BodyPart UpperArmR { get; init; } UpperLegL Declaration public BodyPart UpperLegL { get; init; } UpperLegR Declaration public BodyPart UpperLegR { get; init; } Methods ApplyToCharacter(PoseCharacterRenderer) Make the character perform this pose Declaration public void ApplyToCharacter(PoseCharacterRenderer rendering) BlendToCharacter(PoseCharacterRenderer, float) Make the character perform this pose with weight Declaration public void BlendToCharacter(PoseCharacterRenderer rendering, float blend01) RecordFromCharacter(PoseCharacterRenderer) Read pose data from the character Declaration public void RecordFromCharacter(PoseCharacterRenderer rendering)"
  },
  "api/AngeliA.CharacterRenderer.html": {
    "href": "api/AngeliA.CharacterRenderer.html",
    "title": "Class CharacterRenderer | AngeliA",
    "summary": "Class CharacterRenderer Behaviour class handles rendering of character Constructors CharacterRenderer(Character) Behaviour class handles rendering of character Declaration protected CharacterRenderer(Character target) Fields TargetCharacter Declaration public readonly Character TargetCharacter Properties CurrentAnimationFrame Declaration public int CurrentAnimationFrame { get; set; } CurrentRenderingBounce Declaration public int CurrentRenderingBounce { get; } Scale Final size scaling (0 means 0%, 1000 means 100%) Declaration public FrameBasedInt Scale { get; set; } SpinOnGroundPound Does character spin when ground pound Declaration public bool SpinOnGroundPound { get; set; } Tint Final color tint Declaration public FrameBasedColor Tint { get; set; } Methods BeforeUpdate() Declaration public virtual void BeforeUpdate() LateUpdate() Declaration public virtual void LateUpdate() OnActivated() Callback function for character entity get activated Declaration public virtual void OnActivated()"
  },
  "api/AngeliA.CharacterRenderingConfig.html": {
    "href": "api/AngeliA.CharacterRenderingConfig.html",
    "title": "Class CharacterRenderingConfig | AngeliA",
    "summary": "Class CharacterRenderingConfig Fields Body Declaration public int Body CharacterHeight Declaration public int CharacterHeight Ear Declaration public int Ear Face Declaration public int Face Foot Declaration public int Foot Hair Declaration public int Hair Hand Declaration public int Hand Head Declaration public int Head Hip Declaration public int Hip Horn Declaration public int Horn LowerArm Declaration public int LowerArm LowerLeg Declaration public int LowerLeg Shoulder Declaration public int Shoulder SuitBody Declaration public int SuitBody SuitFoot Declaration public int SuitFoot SuitHand Declaration public int SuitHand SuitHead Declaration public int SuitHead SuitHip Declaration public int SuitHip Tail Declaration public int Tail UpperArm Declaration public int UpperArm UpperLeg Declaration public int UpperLeg Wing Declaration public int Wing Methods AllBodyPartIsDefault() Declaration public bool AllBodyPartIsDefault() GetBodyPartID(int) Declaration public int GetBodyPartID(int index) LoadFromSheet(Type, bool, bool, bool) Declaration public void LoadFromSheet(Type characterType, bool ignoreBodyPart = false, bool ignoreBodyGadget = false, bool ignoreCloth = false) LoadToCharacter(PoseCharacterRenderer) Declaration public void LoadToCharacter(PoseCharacterRenderer renderer)"
  },
  "api/AngeliA.CharacterState.html": {
    "href": "api/AngeliA.CharacterState.html",
    "title": "Enum CharacterState | AngeliA",
    "summary": "Enum CharacterState General game state of a character Fields Name Description GamePlay The character is online PassOut The character is offline Sleep The character is sleeping"
  },
  "api/AngeliA.CheatCodeAttribute.html": {
    "href": "api/AngeliA.CheatCodeAttribute.html",
    "title": "Class CheatCodeAttribute | AngeliA",
    "summary": "Class CheatCodeAttribute The function will be called when user perform the given cheat code. Cheat code can be perform like those in NES games. Examples [CheatCode] internal static void ExampleFunction (string code) { } Constructors CheatCodeAttribute(string) The function will be called when user perform the given cheat code. Cheat code can be perform like those in NES games. Declaration public CheatCodeAttribute(string code) Examples [CheatCode] internal static void ExampleFunction (string code) { }"
  },
  "api/AngeliA.CheatSystem.html": {
    "href": "api/AngeliA.CheatSystem.html",
    "title": "Class CheatSystem | AngeliA",
    "summary": "Class CheatSystem Core system to invoke function when user type cheat code during gameplay. Works like NES games. (it does nothing with anti-cheat) Properties CheatCodeCount Total loaded cheat code Declaration public static int CheatCodeCount { get; } CurrentParam Custom data from cheat code when it's invoking Declaration public static object CurrentParam { get; } Methods ForAllCheatCodes() Interate through all loaded cheat code inside the system Declaration public static IEnumerable<string> ForAllCheatCodes() GetCodeAt(int) Get cheat code at given index inside system list Declaration public static string GetCodeAt(int index) SetCheatCodeEnable(string, bool) Make given cheat code enable or disable Declaration public static void SetCheatCodeEnable(string code, bool enable) Parameters Type Name Description string code The target cheat code TryAddCheatAction(string, MethodInfo, object) Add given cheat code into system Declaration public static bool TryAddCheatAction(string code, MethodInfo method, object param = null) Parameters Type Name Description string code Code that user need to type. Ignore cases MethodInfo method Method that invokes when cheat code get triggered object param Custom data for this cheat code. Get this data inside the \"method\" with CheatSystem.CurrentParam Returns Type Description bool True if the data is successfuly added"
  },
  "api/AngeliA.CircuitOperate_Int3UnitPos_IntStamp_Direction5FromAttribute.html": {
    "href": "api/AngeliA.CircuitOperate_Int3UnitPos_IntStamp_Direction5FromAttribute.html",
    "title": "Class CircuitOperate_Int3UnitPos_IntStamp_Direction5FromAttribute | AngeliA",
    "summary": "Class CircuitOperate_Int3UnitPos_IntStamp_Direction5FromAttribute The function will be called when CircuitSystem triggers the entity that holds this function Examples [CircuitOperate_Int3UnitPos_IntStamp_Direction5From] internal static void ExampleFunction (Int3 unitPos, int stamp, Direction5 from) { }"
  },
  "api/AngeliA.CircuitSystem.html": {
    "href": "api/AngeliA.CircuitSystem.html",
    "title": "Class CircuitSystem | AngeliA",
    "summary": "Class CircuitSystem Core system for triggering specified function of entities on stage/map Methods BitInt_to_WireConnection(int, out bool, out bool, out bool, out bool) Convert an intager into wire connection info Declaration public static void BitInt_to_WireConnection(int bitInt, out bool connectL, out bool connectR, out bool connectD, out bool connectU) GetStamp(Int3) Get unique ID for circuit system at given position in unit space Declaration public static int GetStamp(Int3 unitPos) IsCircuitOperator(int) True if the given ID is a valid circuit operator entity Declaration public static bool IsCircuitOperator(int typeID) IsWire(int) True if the given ID is registed as wire Declaration public static bool IsWire(int typeID) OperateCircuit(Int3, int, Direction5) Perform the function from the operator at given position Declaration public static bool OperateCircuit(Int3 unitPos, int stamp = -2147483648, Direction5 circuitFrom = Direction5.Center) Parameters Type Name Description Int3 unitPos Target position in unit space int stamp unique ID for this operation Direction5 circuitFrom Which direction does the circuit came from. Set to center to make current as original. RegisterWire(int, bool, bool, bool, bool) Register target IMapItem as wire for operating circuit Declaration public static void RegisterWire(int id, bool connectL, bool connectR, bool connectD, bool connectU) Parameters Type Name Description int id ID of the target entity/element bool connectL True if this wire connect to the wire/operator on left bool connectR True if this wire connect to the wire/operator on right bool connectD True if this wire connect to the wire/operator on bottom bool connectU True if this wire connect to the wire/operator on top TriggerCircuit(int, int, int, int, Direction5) Trigger the system at given position Declaration public static void TriggerCircuit(int unitX, int unitY, int unitZ, int stamp = -2147483648, Direction5 startDirection = Direction5.Center) Parameters Type Name Description int unitX Position to start circuit trigger in unit space int unitY Position to start circuit trigger in unit space int unitZ Position Z int stamp unique ID for this operation Direction5 startDirection Only start at this direction (Set to center to start all direction) TryAddBackgroundTrigger(int, Int3) Add a trigger in background thread Declaration public static bool TryAddBackgroundTrigger(int entityID, Int3 unitPos) Parameters Type Name Description int entityID Source ID of this trigger Int3 unitPos Position in unit space Returns Type Description bool True if the capacity is not reached TryRemoveBackgroundTrigger(int, Int3) Remove the given entity from background thread triggers Declaration public static bool TryRemoveBackgroundTrigger(int entityID, Int3 unitPos) Parameters Type Name Description int entityID Source ID of this trigger Int3 unitPos Position in unit space Returns Type Description bool True if the trigger is removed WireConnection_to_BitInt(bool, bool, bool, bool) Convert wire connection info into an Intager Declaration public static int WireConnection_to_BitInt(bool connectL, bool connectR, bool connectD, bool connectU) WireEntityID_to_WireConnection(int, out bool, out bool, out bool, out bool) Get connection directions from given wire ID Declaration public static bool WireEntityID_to_WireConnection(int id, out bool connectL, out bool connectR, out bool connectD, out bool connectU) Returns Type Description bool True if the wire ID is valid"
  },
  "api/AngeliA.ClampCellsScope.html": {
    "href": "api/AngeliA.ClampCellsScope.html",
    "title": "Struct ClampCellsScope | AngeliA",
    "summary": "Struct ClampCellsScope Scope to clamp rendering cell into given rect position Implements IDisposable Examples using AngeliA; namespace AngeliaGame; public class Example { [OnGameUpdate] internal static void OnGameUpdate () { int x = QTest.Int(\"X\", 0, 0, Const.CEL * 128); int y = QTest.Int(\"Y\", 0, 0, Const.CEL * 128); int w = QTest.Int(\"W\", Const.CEL * 24, 0, Const.CEL * 128); int h = QTest.Int(\"H\", Const.CEL * 24, 0, Const.CEL * 128); var cameraRect = Renderer.CameraRect; Renderer.SetLayer(RenderLayer.UI); using (new ClampCellsScope(new IRect(cameraRect.x + x, cameraRect.y + y, w, h))) { // Rendering cell created inside will have be clamped inside Renderer.Draw(BuiltInSprite.ICON_ENTITY, cameraRect.Shrink(Const.CEL * 3).Fit(1, 1)); } } } Constructors ClampCellsScope(IRect) Scope to clamp rendering cell into given rect position Declaration public ClampCellsScope(IRect rect) Parameters Type Name Description IRect rect Rect position in global space Methods Dispose() Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources. Declaration public void Dispose()"
  },
  "api/AngeliA.Cloth.html": {
    "href": "api/AngeliA.Cloth.html",
    "title": "Class Cloth | AngeliA",
    "summary": "Class Cloth Cloth for pose-style character (not for equipment items). Get instance with Cloth.TryGetCloth(id, out var result) Properties ClothID Global unique id for this type of cloth Declaration public int ClothID { get; } ClothName Type name for this type of cloth Declaration public string ClothName { get; } ClothSystemReady Declaration public static bool ClothSystemReady { get; } ClothType Where should characters wear this cloth Declaration public abstract ClothType ClothType { get; } SheetIndex Which artwork sheet does this cloth get it's artwork from Declaration public int SheetIndex { get; } SpriteLoaded True if the artwork sprites are loaded Declaration public virtual bool SpriteLoaded { get; } Methods AttachClothOn(BodyPart, AngeSprite, int, int, int, int, int, int, int, int, bool) Attach the given artwork sprite as a general cloth to given bodypart. Cloth will use it's own size no matter how big the bodypart is. Declaration public static Cell[] AttachClothOn(BodyPart bodyPart, AngeSprite sprite, int locationX, int locationY, int localZ, int widthAmount = 1000, int heightAmount = 1000, int localRotation = 0, int shiftPixelX = 0, int shiftPixelY = 0, bool defaultHideLimb = true) Parameters Type Name Description BodyPart bodyPart Target bodypart AngeSprite sprite Artwork sprite int locationX Position X in bodypart's local space int locationY Position Y in bodypart's local space int localZ Local Z value the sort rendering cells int widthAmount Horizontal size scaling (0 means 0%, 1000 means 100%) int heightAmount Vertical size scaling (0 means 0%, 1000 means 100%) int localRotation Rotation of the cloth in bodypart's local space int shiftPixelX Position offset X int shiftPixelY Position offset Y bool defaultHideLimb True if it requires the bodypart to be hiden. Artwork sprite's tag will override this value. Returns Type Description Cell[] Rendering cells which holds the cloth rendering data CoverClothOn(BodyPart, AngeSprite) Cover the given artwork sprite as a general cloth to given bodypart. Size of the sprite will change based on how big the bodypart is. Declaration public static Cell[] CoverClothOn(BodyPart bodyPart, AngeSprite sprite) Parameters Type Name Description BodyPart bodyPart Target bodypart AngeSprite sprite Artwork sprite Returns Type Description Cell[] Rendering cells which holds the cloth rendering data CoverClothOn(BodyPart, AngeSprite, int) Cover the given artwork sprite as a general cloth to given bodypart. Size of the sprite will change based on how big the bodypart is. Declaration public static Cell[] CoverClothOn(BodyPart bodyPart, AngeSprite sprite, int localZ) Parameters Type Name Description BodyPart bodyPart Target bodypart AngeSprite sprite Artwork sprite int localZ Local Z value the sort rendering cells Returns Type Description Cell[] Rendering cells which holds the cloth rendering data CoverClothOn(BodyPart, AngeSprite, int, Color32, bool) Cover the given artwork sprite as a general cloth to given bodypart. Size of the sprite will change based on how big the bodypart is. Declaration public static Cell[] CoverClothOn(BodyPart bodyPart, AngeSprite sprite, int localZ, Color32 tint, bool defaultHideLimb = true) Parameters Type Name Description BodyPart bodyPart Target bodypart AngeSprite sprite Artwork sprite int localZ Local Z value the sort rendering cells Color32 tint Color tint bool defaultHideLimb True if it requires the bodypart to be hiden. Artwork sprite's tag will override this value. Returns Type Description Cell[] Rendering cells which holds the cloth rendering data DrawCloth(PoseCharacterRenderer) Draw cloth for the given character Declaration public abstract void DrawCloth(PoseCharacterRenderer renderer) DrawClothGizmos(IRect, Color32, int) Draw cloth as gizmos Declaration public virtual void DrawClothGizmos(IRect rect, Color32 tint, int z) Parameters Type Name Description IRect rect Rect position in global space Color32 tint Color tint int z Z value for sort rendering cell FillFromSheet(string) Load sprite data from Renderer.CurrentSheet Declaration public virtual bool FillFromSheet(string name) ForAllCloth() Iterate through all cloth instance in pool Declaration public static IEnumerable<KeyValuePair<int, Cloth>> ForAllCloth() GetDefaultClothID(int, ClothType) Get ID of given character's default cloth. Return 0 if not found Declaration public static int GetDefaultClothID(int characterID, ClothType suitType) GetDisplayName(out int) Get display name for this cloth from language system. Declaration public string GetDisplayName(out int languageID) HasCloth(int) Does cloth with given id exists in the pool Declaration public static bool HasCloth(int clothID) TryGetCloth(int, out Cloth) Get cloth instance from pool Declaration public static bool TryGetCloth(int clothID, out Cloth cloth)"
  },
  "api/AngeliA.ClothItem.html": {
    "href": "api/AngeliA.ClothItem.html",
    "title": "Class ClothItem | AngeliA",
    "summary": "Class ClothItem Represent an item that holds a cloth for pose-style character to wear. Unlike body armor, cloth do not occupy equipment slot. Implements IMapItem Constructors ClothItem(int) Represent an item that holds a cloth for pose-style character to wear. Unlike body armor, cloth do not occupy equipment slot. Declaration public ClothItem(int id) Parameters Type Name Description int id ID of the cloth Properties ClothID ID of the cloth Declaration public int ClothID { get; init; } Methods CanUse(Character) True if this item can be use at current frame Declaration public override bool CanUse(Character holder) Parameters Type Name Description Character holder Holder that trying to use this item Overrides Item.CanUse(Character) DrawItem(Entity, IRect, Color32, int) Call this function to render the item Declaration public override void DrawItem(Entity holder, IRect rect, Color32 tint, int z) Parameters Type Name Description Entity holder Holder that own this item IRect rect Rect position in global space Color32 tint Color tint int z Z value for sort rendering cells Overrides Item.DrawItem(Entity, IRect, Color32, int) Use(Character, int, int, out bool) Perform the logic when the item get used Declaration public override bool Use(Character holder, int inventoryID, int itemIndex, out bool consume) Parameters Type Name Description Character holder Holder that using this item int inventoryID Inventory ID of this holder int itemIndex Index of this item inside the inventory bool consume True if the item should disappear after being used Returns Type Description bool True if the item is used Overrides Item.Use(Character, int, int, out bool)"
  },
  "api/AngeliA.ClothType.html": {
    "href": "api/AngeliA.ClothType.html",
    "title": "Enum ClothType | AngeliA",
    "summary": "Enum ClothType Fields Name Description"
  },
  "api/AngeliA.Color32.html": {
    "href": "api/AngeliA.Color32.html",
    "title": "Struct Color32 | AngeliA",
    "summary": "Struct Color32 Color with byte for data Implements IFormattable IComparable Constructors Color32(byte, byte, byte, byte) Declaration public Color32(byte r, byte g, byte b, byte a = 255) Fields BLACK Declaration public static readonly Color32 BLACK BLACK_12 Declaration public static readonly Color32 BLACK_12 BLACK_128 Declaration public static readonly Color32 BLACK_128 BLACK_196 Declaration public static readonly Color32 BLACK_196 BLACK_220 Declaration public static readonly Color32 BLACK_220 BLACK_32 Declaration public static readonly Color32 BLACK_32 BLACK_64 Declaration public static readonly Color32 BLACK_64 BLACK_96 Declaration public static readonly Color32 BLACK_96 BLUE Declaration public static readonly Color32 BLUE BLUE_BETTER Declaration public static readonly Color32 BLUE_BETTER CLEAR Declaration public static readonly Color32 CLEAR CYAN Declaration public static readonly Color32 CYAN CYAN_BETTER Declaration public static readonly Color32 CYAN_BETTER CYAN_DARK Declaration public static readonly Color32 CYAN_DARK GREEN Declaration public static readonly Color32 GREEN GREEN_BETTER Declaration public static readonly Color32 GREEN_BETTER GREEN_DARK Declaration public static readonly Color32 GREEN_DARK GREY_112 Declaration public static readonly Color32 GREY_112 GREY_12 Declaration public static readonly Color32 GREY_12 GREY_128 Declaration public static readonly Color32 GREY_128 GREY_160 Declaration public static readonly Color32 GREY_160 GREY_196 Declaration public static readonly Color32 GREY_196 GREY_20 Declaration public static readonly Color32 GREY_20 GREY_216 Declaration public static readonly Color32 GREY_216 GREY_230 Declaration public static readonly Color32 GREY_230 GREY_245 Declaration public static readonly Color32 GREY_245 GREY_32 Declaration public static readonly Color32 GREY_32 GREY_38 Declaration public static readonly Color32 GREY_38 GREY_42 Declaration public static readonly Color32 GREY_42 GREY_46 Declaration public static readonly Color32 GREY_46 GREY_56 Declaration public static readonly Color32 GREY_56 GREY_64 Declaration public static readonly Color32 GREY_64 GREY_96 Declaration public static readonly Color32 GREY_96 ORANGE Declaration public static readonly Color32 ORANGE ORANGE_BETTER Declaration public static readonly Color32 ORANGE_BETTER ORANGE_DARK Declaration public static readonly Color32 ORANGE_DARK PINK Declaration public static readonly Color32 PINK PURPLE Declaration public static readonly Color32 PURPLE PURPLE_BETTER Declaration public static readonly Color32 PURPLE_BETTER RED Declaration public static readonly Color32 RED RED_BETTER Declaration public static readonly Color32 RED_BETTER RED_DARK Declaration public static readonly Color32 RED_DARK SKIN_YELLOW Declaration public static readonly Color32 SKIN_YELLOW WHITE Declaration public static readonly Color32 WHITE WHITE_0 Declaration public static readonly Color32 WHITE_0 WHITE_12 Declaration public static readonly Color32 WHITE_12 WHITE_128 Declaration public static readonly Color32 WHITE_128 WHITE_196 Declaration public static readonly Color32 WHITE_196 WHITE_20 Declaration public static readonly Color32 WHITE_20 WHITE_32 Declaration public static readonly Color32 WHITE_32 WHITE_46 Declaration public static readonly Color32 WHITE_46 WHITE_6 Declaration public static readonly Color32 WHITE_6 WHITE_64 Declaration public static readonly Color32 WHITE_64 WHITE_96 Declaration public static readonly Color32 WHITE_96 YELLOW Declaration public static readonly Color32 YELLOW YELLOW_DARK Declaration public static readonly Color32 YELLOW_DARK a Alpha channel (0 means no value, 255 means full value) Declaration public byte a b Blue channel (0 means no value, 255 means full value) Declaration public byte b g Green channel (0 means no value, 255 means full value) Declaration public byte g r Red channel (0 means no value, 255 means full value) Declaration public byte r Methods CompareTo(object) Compares the current instance with another object of the same type and returns an integer that indicates whether the current instance precedes, follows, or occurs in the same position in the sort order as the other object. Declaration public readonly int CompareTo(object obj) Parameters Type Name Description object obj An object to compare with this instance. Returns Type Description int A value that indicates the relative order of the objects being compared. The return value has these meanings: Value Meaning Less than zero This instance precedes obj in the sort order. Zero This instance occurs in the same position in the sort order as obj. Greater than zero This instance follows obj in the sort order. Exceptions Type Condition ArgumentException obj is not the same type as this instance. Equals(object) Indicates whether this instance and a specified object are equal. Declaration public override readonly bool Equals(object obj) Parameters Type Name Description object obj The object to compare with the current instance. Returns Type Description bool true if obj and this instance are the same type and represent the same value; otherwise, false. Overrides ValueType.Equals(object) GetHashCode() Returns the hash code for this instance. Declaration public override readonly int GetHashCode() Returns Type Description int A 32-bit signed integer that is the hash code for this instance. Overrides ValueType.GetHashCode() Lerp(Color32, Color32, float) Find a color transform between two given colors smoothly Declaration public static Color32 Lerp(Color32 a, Color32 b, float t) float t Representation of the position. 0 means value A, 1 means value B. LerpUnclamped(Color32, Color32, float) Find a color transform between two given colors smoothly without limiting the t value Declaration public static Color32 LerpUnclamped(Color32 a, Color32 b, float t) float t Representation of the position. 0 means value A, 1 means value B. ToString() Returns the fully qualified type name of this instance. Declaration public override readonly string ToString() Returns Type Description string The fully qualified type name. Overrides ValueType.ToString() ToString(string) Declaration public readonly string ToString(string format) ToString(string, IFormatProvider) Formats the value of the current instance using the specified format. Declaration public readonly string ToString(string format, IFormatProvider formatProvider) Parameters Type Name Description string format The format to use. -or- A null reference (Nothing in Visual Basic) to use the default format defined for the type of the IFormattable implementation. IFormatProvider formatProvider The provider to use to format the value. -or- A null reference (Nothing in Visual Basic) to obtain the numeric format information from the current locale setting of the operating system. Returns Type Description string The value of the current instance in the specified format. Operators operator ==(Color32, Color32) Declaration public static bool operator ==(Color32 a, Color32 b) operator !=(Color32, Color32) Declaration public static bool operator !=(Color32 a, Color32 b) operator *(Color32, Color32) Declaration public static Color32 operator *(Color32 a, Color32 b)"
  },
  "api/AngeliA.ColorF.html": {
    "href": "api/AngeliA.ColorF.html",
    "title": "Struct ColorF | AngeliA",
    "summary": "Struct ColorF Color with float as data Constructors ColorF(float, float, float, float) Declaration public ColorF(float r, float g, float b, float a = 1) Fields a Alpha channel (0 means no value, 1 means full value) Declaration public float a b Blue channel (0 means no value, 1 means full value) Declaration public float b g Green channel (0 means no value, 1 means full value) Declaration public float g r Red channel (0 means no value, 1 means full value) Declaration public float r Methods CompareTo(object) Declaration public readonly int CompareTo(object obj) Equals(object) Indicates whether this instance and a specified object are equal. Declaration public override readonly bool Equals(object obj) Parameters Type Name Description object obj The object to compare with the current instance. Returns Type Description bool true if obj and this instance are the same type and represent the same value; otherwise, false. Overrides ValueType.Equals(object) GetHashCode() Returns the hash code for this instance. Declaration public override readonly int GetHashCode() Returns Type Description int A 32-bit signed integer that is the hash code for this instance. Overrides ValueType.GetHashCode() Lerp(ColorF, ColorF, float) Find a color transform between two given colors smoothly Declaration public static ColorF Lerp(ColorF a, ColorF b, float t) float t Representation of the position. 0 means value A, 1 means value B. ToString() Returns the fully qualified type name of this instance. Declaration public override readonly string ToString() Returns Type Description string The fully qualified type name. Overrides ValueType.ToString() ToString(string) Declaration public readonly string ToString(string format) ToString(string, IFormatProvider) Declaration public readonly string ToString(string format, IFormatProvider formatProvider) Operators operator ==(ColorF, ColorF) Declaration public static bool operator ==(ColorF a, ColorF b) operator !=(ColorF, ColorF) Declaration public static bool operator !=(ColorF a, ColorF b) operator *(ColorF, ColorF) Declaration public static ColorF operator *(ColorF a, ColorF b)"
  },
  "api/AngeliA.ColorGradient.Data.html": {
    "href": "api/AngeliA.ColorGradient.Data.html",
    "title": "Struct ColorGradient.Data | AngeliA",
    "summary": "Struct ColorGradient.Data Constructors Data(Color32, float) Declaration public Data(Color32 color, float time) Fields color Declaration public Color32 color time Declaration public float time"
  },
  "api/AngeliA.ColorGradient.html": {
    "href": "api/AngeliA.ColorGradient.html",
    "title": "Class ColorGradient | AngeliA",
    "summary": "Class ColorGradient Represent a list of colors that creates smooth transitions between each other Constructors ColorGradient(params (Color32 color, float time)[]) Represent a list of colors that creates smooth transitions between each other Declaration public ColorGradient(params (Color32 color, float time)[] values) Parameters Type Name Description (Color32 color, float time)[] values Color array Fields Values Declaration public (Color32 color, float time)[] Values Methods Evaluate(float) Get the smooth color transition for given value Declaration public Color32 Evaluate(float time)"
  },
  "api/AngeliA.CompareMode.html": {
    "href": "api/AngeliA.CompareMode.html",
    "title": "Enum CompareMode | AngeliA",
    "summary": "Enum CompareMode Fields Name Description"
  },
  "api/AngeliA.Const.html": {
    "href": "api/AngeliA.Const.html",
    "title": "Class Const | AngeliA",
    "summary": "Class Const Utility class for constant values Fields ANTI_SPAWN_PADDING Entity anti-spawning rect expand distance from view-rect in global size Declaration public const int ANTI_SPAWN_PADDING = 512 ANTI_SPAWN_PADDING_UNIT Entity anti-spawning rect expand distance from view-rect in unit (1 unit = 256 global size) Declaration public const int ANTI_SPAWN_PADDING_UNIT = 2 ART_CEL Global size of a artwork pixel Declaration public const int ART_CEL = 16 ART_SCALE Size ratio between global size and artwork pixel Declaration public const int ART_SCALE = 16 CEL Global size of a block unit Declaration public const int CEL = 256 CEL2 Global size of a block unit Declaration public static readonly Int2 CEL2 CONTROL_COPY Declaration public const char CONTROL_COPY = '\\u0003' CONTROL_CUT Declaration public const char CONTROL_CUT = '\\u0018' CONTROL_PASTE Declaration public const char CONTROL_PASTE = '\\u0016' CONTROL_SELECT_ALL Declaration public const char CONTROL_SELECT_ALL = '\\u0006' CURSOR_ARROW Pointing arrow mouse cursor Declaration public const int CURSOR_ARROW = 1 CURSOR_BEAM Texting beam mouse cursor for input field Declaration public const int CURSOR_BEAM = 2 CURSOR_COUNT Total count of mouse cursor styles Declaration public const int CURSOR_COUNT = 11 CURSOR_CROSSHAIR Cross shape mouse cursor with no arrow on the edge Declaration public const int CURSOR_CROSSHAIR = 3 CURSOR_DEFAULT Default mouse cursor Declaration public const int CURSOR_DEFAULT = 0 CURSOR_HAND Point hand mouse cursor Declaration public const int CURSOR_HAND = 4 CURSOR_NONE No mouse cursor Declaration public const int CURSOR_NONE = -2 CURSOR_PROHIBIT Forbidden symbol mouse cursor Declaration public const int CURSOR_PROHIBIT = 10 CURSOR_RESIZE_CROSS Mouse cursor with arrows pointing left, right, up and down. Declaration public const int CURSOR_RESIZE_CROSS = 9 CURSOR_RESIZE_HORIZONTAL Mouse cursor with arrows pointing left and right Declaration public const int CURSOR_RESIZE_HORIZONTAL = 5 CURSOR_RESIZE_TOPLEFT Mouse cursor with arrows pointing top-left and bottom-right (like ) Declaration public const int CURSOR_RESIZE_TOPLEFT = 7 CURSOR_RESIZE_TOPRIGHT Mouse cursor with arrows pointing top-right and bottom-left (like /) Declaration public const int CURSOR_RESIZE_TOPRIGHT = 8 CURSOR_RESIZE_VERTICAL Mouse cursor with arrows pointing up and down Declaration public const int CURSOR_RESIZE_VERTICAL = 6 EQUIPMENT_TYPE_COUNT Declaration public static readonly int EQUIPMENT_TYPE_COUNT HALF Global size of a half block unit Declaration public const int HALF = 128 HALF2 Global size of a half block unit Declaration public static readonly Int2 HALF2 LEVEL_SPAWN_PADDING Level block expand distance from view-rect in global size Declaration public const int LEVEL_SPAWN_PADDING = 2048 LEVEL_SPAWN_PADDING_UNIT Level block expand distance from view-rect in unit (1 unit = 256 global size) Declaration public const int LEVEL_SPAWN_PADDING_UNIT = 8 MAP Unit size of a map file Declaration public const int MAP = 128 MAX_CHARACTER_HEIGHT Declaration public const int MAX_CHARACTER_HEIGHT = 251 MIN_CHARACTER_HEIGHT Declaration public const int MIN_CHARACTER_HEIGHT = 65 ORIGINAL_PIVOT Use the original pivot of the sprite from artwork sheet Declaration public const int ORIGINAL_PIVOT = 2147483647 ORIGINAL_SIZE Use the original size of the sprite from artwork sheet Declaration public const int ORIGINAL_SIZE = 2147483647 ORIGINAL_SIZE_NEGATAVE Use the original size * -1 of the sprite from artwork sheet Declaration public const int ORIGINAL_SIZE_NEGATAVE = -2147483648 PIXEL Sprite ID of the 1x1 white pixel Declaration public const int PIXEL = 11254534 QUARTER Global size of a quarter block unit Declaration public const int QUARTER = 64 QUARTER2 Global size of a quarter block unit Declaration public static readonly Int2 QUARTER2 RETURN_SIGN Declaration public const char RETURN_SIGN = '\\r' RIG_BUFFER_SIZE Declaration public const int RIG_BUFFER_SIZE = 5000000 SCREEN_EFFECT_COUNT Screen effect total count Declaration public const int SCREEN_EFFECT_COUNT = 6 SCREEN_EFFECT_GREYSCALE Screen effect index for the grey-scale effect Declaration public const int SCREEN_EFFECT_GREYSCALE = 4 SCREEN_EFFECT_INVERT Screen effect index for the invert effect Declaration public const int SCREEN_EFFECT_INVERT = 5 SCREEN_EFFECT_NAMES Declaration public static readonly string[] SCREEN_EFFECT_NAMES SCREEN_EFFECT_RETRO_DARKEN Screen effect index for the retro-darken effect Declaration public const int SCREEN_EFFECT_RETRO_DARKEN = 1 SCREEN_EFFECT_RETRO_LIGHTEN Screen effect index for the retro-lighten effect Declaration public const int SCREEN_EFFECT_RETRO_LIGHTEN = 2 SCREEN_EFFECT_TINT Screen effect index for the tint effect Declaration public const int SCREEN_EFFECT_TINT = 0 SCREEN_EFFECT_VIGNETTE Screen effect index for the vignette effect Declaration public const int SCREEN_EFFECT_VIGNETTE = 3 SOUND_CHANNEL_COUNT Declaration public const int SOUND_CHANNEL_COUNT = 6 SPAWN_PADDING Entity spawning expand distance from view-rect in global size Declaration public const int SPAWN_PADDING = 4096 SPAWN_PADDING_UNIT Entity spawning expand distance from view-rect in unit (1 unit = 256 global size) Declaration public const int SPAWN_PADDING_UNIT = 16 SliceIgnoreCenter Declaration public static readonly bool[] SliceIgnoreCenter TEAM_ALL Attack target team for all Declaration public const int TEAM_ALL = 15 TEAM_COUNT Attack target team total count Declaration public const int TEAM_COUNT = 4 TEAM_ENEMY Attack target team for enemy Declaration public const int TEAM_ENEMY = 8 TEAM_ENVIRONMENT Attack target team for environment Declaration public const int TEAM_ENVIRONMENT = 1 TEAM_NEUTRAL Attack target team for neutral Declaration public const int TEAM_NEUTRAL = 2 TEAM_PLAYER Attack target team for player Declaration public const int TEAM_PLAYER = 4 Methods EmptyBoolMethod() Literally an empty method that returns a bool value (It returns \"true\" if you wonder) Declaration public static bool EmptyBoolMethod() EmptyMethod() Literally an empty method Declaration public static void EmptyMethod()"
  },
  "api/AngeliA.ControlHintUI.html": {
    "href": "api/AngeliA.ControlHintUI.html",
    "title": "Class ControlHintUI | AngeliA",
    "summary": "Class ControlHintUI Hint for active buttons displays at botton-left corner of the screen during gameplay Implements IMapItem Constructors ControlHintUI() Declaration public ControlHintUI() Properties Instance Single instance of this entity Declaration public static ControlHintUI Instance { get; } OffsetX Position offset X in global space Declaration public int OffsetX { get; set; } OffsetY Position offset Y in global space Declaration public int OffsetY { get; set; } UseControlHint True if show the control hint UI Declaration public static bool UseControlHint { get; set; } UseGamePadHint True if show the gamepad UI indicator Declaration public static bool UseGamePadHint { get; set; } Methods AddHint(Gamekey, Gamekey, string, int) Require hint for given game-key for the current frame Declaration public static void AddHint(Gamekey keyA, Gamekey keyB, string label, int priority = -2147483648) int priority Require with large priority will override the one with small priority AddHint(Gamekey, string, int) Require hint for given game-key for the current frame Declaration public static void AddHint(Gamekey key, string label, int priority = -2147483648) int priority Require with large priority will override the one with small priority AddHint(KeyboardKey, KeyboardKey, string) Require hint for given keyboard-key for the current frame Declaration public static void AddHint(KeyboardKey keyA, KeyboardKey keyB, string label) AddHint(KeyboardKey, string) Require hint for given keyboard-key for the current frame Declaration public static void AddHint(KeyboardKey key, string label) DrawGlobalHint(int, int, Gamekey, Gamekey, string, bool) Draw a control hint UI on the given position Declaration public static void DrawGlobalHint(int globalX, int globalY, Gamekey keyA, Gamekey keyB, string label, bool background = false) Parameters Type Name Description int globalX Position X in global space int globalY Position Y in global space string label Hint content bool background True if the hint renders with a black background DrawGlobalHint(int, int, Gamekey, string, bool) Draw a control hint UI on the given position Declaration public static void DrawGlobalHint(int globalX, int globalY, Gamekey key, string label, bool background = false) Parameters Type Name Description int globalX Position X in global space int globalY Position Y in global space Gamekey key Target key string label Hint content bool background True if the hint renders with a black background DrawGlobalHint(int, int, GamepadKey, GamepadKey, string, bool) Draw a control hint UI on the given position Declaration public static void DrawGlobalHint(int globalX, int globalY, GamepadKey keyA, GamepadKey keyB, string label, bool background = false) Parameters Type Name Description int globalX Position X in global space int globalY Position Y in global space string label Hint content bool background True if the hint renders with a black background DrawGlobalHint(int, int, GamepadKey, string, bool) Draw a control hint UI on the given position Declaration public static void DrawGlobalHint(int globalX, int globalY, GamepadKey key, string label, bool background = false) Parameters Type Name Description int globalX Position X in global space int globalY Position Y in global space GamepadKey key Target key string label Hint content bool background True if the hint renders with a black background DrawGlobalHint(int, int, KeyboardKey, KeyboardKey, string, bool) Draw a control hint UI on the given position Declaration public static void DrawGlobalHint(int globalX, int globalY, KeyboardKey keyA, KeyboardKey keyB, string label, bool background = false) Parameters Type Name Description int globalX Position X in global space int globalY Position Y in global space string label Hint content bool background True if the hint renders with a black background DrawGlobalHint(int, int, KeyboardKey, string, bool) Draw a control hint UI on the given position Declaration public static void DrawGlobalHint(int globalX, int globalY, KeyboardKey key, string label, bool background = false) Parameters Type Name Description int globalX Position X in global space int globalY Position Y in global space KeyboardKey key Target key string label Hint content bool background True if the hint renders with a black background ForceHideGamepad(int) Hide gamepad indicator even user have turn it on in setting menu Declaration public static void ForceHideGamepad(int duration = 1) ForceHideGlobalHint(int) Hide all global hints for given frames Declaration public static void ForceHideGlobalHint(int duration = 1) ForceOffset(int, int, int) Override global position offset for given frames Declaration public static void ForceOffset(int x, int y, int duration = 1) ForceShowHint(int) Show control hint even user have turn it off in setting menu Declaration public static void ForceShowHint(int duration = 1) OnActivated() This function is called when entity enter the stage Declaration public override void OnActivated() Overrides Entity.OnActivated()"
  },
  "api/AngeliA.Cursor.html": {
    "href": "api/AngeliA.Cursor.html",
    "title": "Class Cursor | AngeliA",
    "summary": "Class Cursor Core system for set appearance of mouse cursor Methods GetResizeCursorIndex(Direction8) Get resize cursor index from given direction Declaration public static int GetResizeCursorIndex(Direction8 direction) RequireCursor(int) Need to display the cursor for current frame Declaration public static void RequireCursor(int priority = -1) SetCursor(int, IRect, int) Declaration public static void SetCursor(int cursorIndex, IRect mouseRange, int priority = 0) Parameters Type Name Description int cursorIndex Get this value with Const.CURSOR_XXX IRect mouseRange Only work when mouse inside given range in global space SetCursor(int, int) Declaration public static void SetCursor(int cursorIndex, int priority = 0) Parameters Type Name Description int cursorIndex Get this value with Const.CURSOR_XXX SetCursorAsBeam(IRect, int) Make cursor to typing beam for current frame. Declaration public static void SetCursorAsBeam(IRect mouseRange, int priority = 0) Parameters Type Name Description IRect mouseRange Only work when mouse inside given range in global space SetCursorAsBeam(int) Make cursor to typing beam for current frame. Declaration public static void SetCursorAsBeam(int priority = 0) SetCursorAsHand(IRect, int) Make cursor to point hand for current frame. Declaration public static void SetCursorAsHand(IRect mouseRange, int priority = 0) Parameters Type Name Description IRect mouseRange Only work when mouse inside given range in global space SetCursorAsHand(int) Make cursor to point hand for current frame. Declaration public static void SetCursorAsHand(int priority = 0) SetCursorAsMove(IRect, int) Make cursor to cross with arrows for current frame. Declaration public static void SetCursorAsMove(IRect mouseRange, int priority = 0) Parameters Type Name Description IRect mouseRange Only work when mouse inside given range in global space SetCursorAsMove(int) Make cursor to cross with arrows for current frame. Declaration public static void SetCursorAsMove(int priority = 0) SetCursorAsNone(int) Set cursor into none Declaration public static void SetCursorAsNone(int priority = 0) SetCursorAsNormal(int) Make cursor to default style Declaration public static void SetCursorAsNormal(int priority = 0)"
  },
  "api/AngeliA.Damage.html": {
    "href": "api/AngeliA.Damage.html",
    "title": "Struct Damage | AngeliA",
    "summary": "Struct Damage Data structure for a single damage performed Constructors Damage(int, int, Entity, Tag) Data structure for a single damage performed Declaration public Damage(int amount, int targetTeam = 15, Entity bullet = null, Tag type = Tag.PhysicalDamage) Parameters Type Name Description int amount How many damage it deals int targetTeam What team does it attacks Entity bullet Which bullet does it came from Tag type What special type does it holds Fields Amount Declaration public int Amount Bullet Declaration public Entity Bullet IgnoreInvincible Do not make target become invincible after take this damage Declaration public bool IgnoreInvincible IgnoreStun Do not make target stun after take this damage Declaration public bool IgnoreStun TargetTeam Declaration public int TargetTeam Type Declaration public Tag Type Methods DamageUpdateFromLevel() Declaration [OnGameUpdateLater(0)] public static void DamageUpdateFromLevel()"
  },
  "api/AngeliA.Debug.html": {
    "href": "api/AngeliA.Debug.html",
    "title": "Class Debug | AngeliA",
    "summary": "Class Debug Log debug messages to the console or screen Methods Log(LanguageCode) Declaration public static void Log(LanguageCode message) Log(object) Declaration public static void Log(object message) Log(params object[]) Declaration public static void Log(params object[] messages) LogError(LanguageCode) Declaration public static void LogError(LanguageCode message) LogError(object) Declaration public static void LogError(object message) LogError(params object[]) Declaration public static void LogError(params object[] messages) LogException(Exception) Declaration public static void LogException(Exception ex) LogLabel(object) Draw a label on top-right of the screen for the current frame Declaration public static void LogLabel(object obj) LogLabel(params object[]) Draw a label on top-right of the screen for the current frame Declaration public static void LogLabel(params object[] objs) LogLabel(string) Draw a label on top-right of the screen for the current frame Declaration public static void LogLabel(string content) LogWarning(LanguageCode) Declaration public static void LogWarning(LanguageCode message) LogWarning(object) Declaration public static void LogWarning(object message) LogWarning(params object[]) Declaration public static void LogWarning(params object[] messages) Events OnLog Declaration public static event Action<object> OnLog OnLogError Declaration public static event Action<object> OnLogError OnLogErrorInternal Declaration public static event Action<int, string> OnLogErrorInternal OnLogException Declaration public static event Action<Exception> OnLogException OnLogInternal Declaration public static event Action<int, string> OnLogInternal OnLogWarning Declaration public static event Action<object> OnLogWarning"
  },
  "api/AngeliA.DefaultDialogueUI.html": {
    "href": "api/AngeliA.DefaultDialogueUI.html",
    "title": "Class DefaultDialogueUI | AngeliA",
    "summary": "Class DefaultDialogueUI Implementation of the dialogueUI with default settings Implements IMapItem IWindowEntityUI Properties ContentRect Rect position for the text content Declaration protected override IRect ContentRect { get; } Overrides DialogueUI.ContentRect IconRect Rect position for the character avatar icon Declaration protected override IRect IconRect { get; } Overrides DialogueUI.IconRect NameRect Rect position for the character name Declaration protected override IRect NameRect { get; } Overrides DialogueUI.NameRect PanelRect Rect position for the total boundary Declaration protected override IRect PanelRect { get; } Overrides DialogueUI.PanelRect"
  },
  "api/AngeliA.DefaultGamepadGamekeyAttribute.html": {
    "href": "api/AngeliA.DefaultGamepadGamekeyAttribute.html",
    "title": "Class DefaultGamepadGamekeyAttribute | AngeliA",
    "summary": "Class DefaultGamepadGamekeyAttribute Default gamepad binding for the given gamekey Constructors DefaultGamepadGamekeyAttribute(Gamekey, GamepadKey) Default gamepad binding for the given gamekey Declaration public DefaultGamepadGamekeyAttribute(Gamekey gamekey, GamepadKey inputKey)"
  },
  "api/AngeliA.DefaultKeyboardGamekeyAttribute.html": {
    "href": "api/AngeliA.DefaultKeyboardGamekeyAttribute.html",
    "title": "Class DefaultKeyboardGamekeyAttribute | AngeliA",
    "summary": "Class DefaultKeyboardGamekeyAttribute Default keyboard binding for the given gamekey Constructors DefaultKeyboardGamekeyAttribute(Gamekey, KeyboardKey) Default keyboard binding for the given gamekey Declaration public DefaultKeyboardGamekeyAttribute(Gamekey gamekey, KeyboardKey inputKey)"
  },
  "api/AngeliA.DefaultLayerScope.html": {
    "href": "api/AngeliA.DefaultLayerScope.html",
    "title": "Struct DefaultLayerScope | AngeliA",
    "summary": "Struct DefaultLayerScope Scope that makes renderer draw into default layer Implements IDisposable Examples using AngeliA; namespace AngeliaGame; public class Example { [OnGameUpdate] internal static void OnGameUpdate () { using (new DefaultLayerScope()) { // Rendering cell created inside will draw into default layer } } } Constructors DefaultLayerScope() Scope that makes renderer draw into default layer Declaration public DefaultLayerScope() Methods Dispose() Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources. Declaration public void Dispose()"
  },
  "api/AngeliA.DefaultPropellerWing.html": {
    "href": "api/AngeliA.DefaultPropellerWing.html",
    "title": "Class DefaultPropellerWing | AngeliA",
    "summary": "Class DefaultPropellerWing Fields TYPE_ID Declaration public static readonly int TYPE_ID"
  },
  "api/AngeliA.DefaultWing.html": {
    "href": "api/AngeliA.DefaultWing.html",
    "title": "Class DefaultWing | AngeliA",
    "summary": "Class DefaultWing Fields TYPE_ID Declaration public static readonly int TYPE_ID Properties Scale Size scale for the wing (0 means 0%, 1000 means 100%) Declaration protected override int Scale { get; } Overrides Wing.Scale"
  },
  "api/AngeliA.DelayTask.html": {
    "href": "api/AngeliA.DelayTask.html",
    "title": "Class DelayTask | AngeliA",
    "summary": "Class DelayTask Task that do nothing but stay inside the task system. Require UserData as duration in frame Fields TYPE_ID Declaration public static readonly int TYPE_ID Methods FrameUpdate() This function is used to handle the internal logic. Declaration public override TaskResult FrameUpdate() Returns Type Description TaskResult \"Continue\" if the task should keep on after this frame. \"End\" if the task should end. Overrides Task.FrameUpdate()"
  },
  "api/AngeliA.DespawnEntityTask.html": {
    "href": "api/AngeliA.DespawnEntityTask.html",
    "title": "Class DespawnEntityTask | AngeliA",
    "summary": "Class DespawnEntityTask Task to despawn an exists entity. Require UserData as the target entity. Fields TYPE_ID Declaration public static readonly int TYPE_ID Methods FrameUpdate() This function is used to handle the internal logic. Declaration public override TaskResult FrameUpdate() Returns Type Description TaskResult \"Continue\" if the task should keep on after this frame. \"End\" if the task should end. Overrides Task.FrameUpdate()"
  },
  "api/AngeliA.DialogueTask.html": {
    "href": "api/AngeliA.DialogueTask.html",
    "title": "Class DialogueTask | AngeliA",
    "summary": "Class DialogueTask Task that run a dialogue UI entity and display conversation Constructors DialogueTask() Declaration public DialogueTask() Methods EndConversation() Stop current conversation Declaration public static void EndConversation() FrameUpdate() This function is used to handle the internal logic. Declaration public override TaskResult FrameUpdate() Returns Type Description TaskResult \"Continue\" if the task should keep on after this frame. \"End\" if the task should end. Overrides Task.FrameUpdate() StartConversation<D>(string) Start conversation from given name Declaration public static void StartConversation<D>(string globalName) where D : DialogueUI Parameters Type Name Description string globalName System name of the conversation Type Parameters Name Description D Type of the dialogue UI entity"
  },
  "api/AngeliA.DialogueUI.html": {
    "href": "api/AngeliA.DialogueUI.html",
    "title": "Class DialogueUI | AngeliA",
    "summary": "Class DialogueUI Entity that shows dialogue content. Driven by the DialogueTask. Implements IMapItem IWindowEntityUI Properties BackgroundRect Rect position for the background Declaration public IRect BackgroundRect { get; } ContentRect Rect position for the text content Declaration protected abstract IRect ContentRect { get; } IconRect Rect position for the character avatar icon Declaration protected abstract IRect IconRect { get; } NameRect Rect position for the character name Declaration protected abstract IRect NameRect { get; } PanelRect Rect position for the total boundary Declaration protected abstract IRect PanelRect { get; } RollingSpeed How many characters does it add per frame during the rolling animation Declaration protected virtual int RollingSpeed { get; } Methods OnActivated() This function is called when entity enter the stage Declaration public override void OnActivated() Overrides Entity.OnActivated() UpdateUI() Declaration public override void UpdateUI() Overrides EntityUI.UpdateUI()"
  },
  "api/AngeliA.Direction2.html": {
    "href": "api/AngeliA.Direction2.html",
    "title": "Enum Direction2 | AngeliA",
    "summary": "Enum Direction2 Fields Name Description"
  },
  "api/AngeliA.Direction3.html": {
    "href": "api/AngeliA.Direction3.html",
    "title": "Enum Direction3 | AngeliA",
    "summary": "Enum Direction3 Fields Name Description"
  },
  "api/AngeliA.Direction4.html": {
    "href": "api/AngeliA.Direction4.html",
    "title": "Enum Direction4 | AngeliA",
    "summary": "Enum Direction4 Fields Name Description"
  },
  "api/AngeliA.Direction5.html": {
    "href": "api/AngeliA.Direction5.html",
    "title": "Enum Direction5 | AngeliA",
    "summary": "Enum Direction5 Fields Name Description"
  },
  "api/AngeliA.Direction8.html": {
    "href": "api/AngeliA.Direction8.html",
    "title": "Enum Direction8 | AngeliA",
    "summary": "Enum Direction8 Fields Name Description"
  },
  "api/AngeliA.DynamicClampCellScope.html": {
    "href": "api/AngeliA.DynamicClampCellScope.html",
    "title": "Struct DynamicClampCellScope | AngeliA",
    "summary": "Struct DynamicClampCellScope Scope that clamp rendering cells inside given range by changing the size scale of the content Implements IDisposable Examples using AngeliA; namespace AngeliaGame; public class Example { [OnGameUpdate] internal static void OnGameUpdate () { var range = new IRect(); using (new DynamicClampCellScope(range)) { // Rendering cell created inside will be clamped by rescale } } } Constructors DynamicClampCellScope(IRect) Scope that clamp rendering cells inside given range by changing the size scale of the content Declaration public DynamicClampCellScope(IRect rect) Parameters Type Name Description IRect rect Rect position in global space Methods Dispose() Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources. Declaration public void Dispose()"
  },
  "api/AngeliA.Ear.html": {
    "href": "api/AngeliA.Ear.html",
    "title": "Class Ear | AngeliA",
    "summary": "Class Ear Animal ear body gadget for pose character. (Like cat-girl's ears, not human ears) Properties GadgetType Type of this body gadget Declaration public override sealed BodyGadgetType GadgetType { get; } Overrides BodyGadget.GadgetType MotionAmount How much ease motion will be apply from the character's movement (0 means 0%, 1000 means 100%) Declaration protected virtual int MotionAmount { get; } SpriteLoaded True if artwork sprite is loaded Declaration public override bool SpriteLoaded { get; } Overrides BodyGadget.SpriteLoaded Methods DrawGadget(PoseCharacterRenderer) Render the gadget for the given character Declaration public override void DrawGadget(PoseCharacterRenderer renderer) Overrides BodyGadget.DrawGadget(PoseCharacterRenderer) DrawGadgetFromPool(PoseCharacterRenderer) Draw ear gadgets for the given character. Declaration public static void DrawGadgetFromPool(PoseCharacterRenderer renderer) DrawGadgetGizmos(IRect, Color32, int) Render the gadget as gizmos Declaration public override void DrawGadgetGizmos(IRect rect, Color32 tint, int z) Parameters Type Name Description IRect rect Global rect position Color32 tint Color tint int z Z position for sorting Overrides BodyGadget.DrawGadgetGizmos(IRect, Color32, int) DrawSpriteAsEar(PoseCharacterRenderer, OrientedSprite, OrientedSprite, bool, bool, int, bool) Draw given sprite as ear Declaration public static void DrawSpriteAsEar(PoseCharacterRenderer renderer, OrientedSprite spriteLeft, OrientedSprite spriteRight, bool frontOfHeadL = true, bool frontOfHeadR = true, int motionAmount = 1000, bool selfMotion = true) Parameters Type Name Description PoseCharacterRenderer renderer Target character OrientedSprite spriteLeft Left ear artwork sprite OrientedSprite spriteRight Right ear artwork sprite bool frontOfHeadL Draw left ear in front of head bool frontOfHeadR Draw right ear in front of head bool selfMotion True if the ear randomly shakes FillFromSheet(string) Load sprite data from Renderer.CurrentSheet Declaration public override bool FillFromSheet(string basicName) Overrides BodyGadget.FillFromSheet(string) FrontOfHeadL(PoseCharacterRenderer) True if the left ear should be rendered in front of the head Declaration protected virtual bool FrontOfHeadL(PoseCharacterRenderer renderer) FrontOfHeadR(PoseCharacterRenderer) True if the right ear should be rendered in front of the head Declaration protected virtual bool FrontOfHeadR(PoseCharacterRenderer renderer)"
  },
  "api/AngeliA.Ease.html": {
    "href": "api/AngeliA.Ease.html",
    "title": "Class Ease | AngeliA",
    "summary": "Class Ease Methods InBack(float) Declaration public static float InBack(float x) InBounce(float) Declaration public static float InBounce(float x) InCirc(float) Declaration public static float InCirc(float x) InCubic(float) Declaration public static float InCubic(float x) InElastic(float) Declaration public static float InElastic(float x) InExpo(float) Declaration public static float InExpo(float x) InLiner(float) Declaration public static float InLiner(float x) InOutBack(float) Declaration public static float InOutBack(float x) InOutBounce(float) Declaration public static float InOutBounce(float x) InOutCirc(float) Declaration public static float InOutCirc(float x) InOutCubic(float) Declaration public static float InOutCubic(float x) InOutElastic(float) Declaration public static float InOutElastic(float x) InOutExpo(float) Declaration public static float InOutExpo(float x) InOutLiner(float) Declaration public static float InOutLiner(float x) InOutQuad(float) Declaration public static float InOutQuad(float x) InOutQuart(float) Declaration public static float InOutQuart(float x) InOutQuint(float) Declaration public static float InOutQuint(float x) InOutSine(float) Declaration public static float InOutSine(float x) InQuad(float) Declaration public static float InQuad(float x) InQuart(float) Declaration public static float InQuart(float x) InQuint(float) Declaration public static float InQuint(float x) InSine(float) Declaration public static float InSine(float x) OutBack(float) Declaration public static float OutBack(float x) OutBounce(float) Declaration public static float OutBounce(float x) OutCirc(float) Declaration public static float OutCirc(float x) OutCubic(float) Declaration public static float OutCubic(float x) OutElastic(float) Declaration public static float OutElastic(float x) OutExpo(float) Declaration public static float OutExpo(float x) OutLiner(float) Declaration public static float OutLiner(float x) OutQuad(float) Declaration public static float OutQuad(float x) OutQuart(float) Declaration public static float OutQuart(float x) OutQuint(float) Declaration public static float OutQuint(float x) OutSine(float) Declaration public static float OutSine(float x)"
  },
  "api/AngeliA.EchoDictionary-2.html": {
    "href": "api/AngeliA.EchoDictionary-2.html",
    "title": "Class EchoDictionary<TKey, TValue> | AngeliA",
    "summary": "Class EchoDictionary<TKey, TValue> Implements IEnumerable<KeyValuePair<TKey, TValue>> IEnumerable Properties Count Declaration public int Count { get; } this[TKey] Declaration public TValue this[TKey key] { get; set; } this[TValue] Declaration public TKey this[TValue tValue] { get; set; } Methods Add(TKey, TValue) Declaration public void Add(TKey key, TValue value) Clear() Declaration public void Clear() ContainsAny(TKey, TValue) Declaration public bool ContainsAny(TKey key, TValue value) ContainsKey(TKey) Declaration public bool ContainsKey(TKey key) ContainsPair(TKey, TValue) Declaration public bool ContainsPair(TKey key, TValue value) ContainsValue(TValue) Declaration public bool ContainsValue(TValue value) GetEnumerator() Returns an enumerator that iterates through the collection. Declaration public IEnumerator<KeyValuePair<TKey, TValue>> GetEnumerator() Returns Type Description IEnumerator<KeyValuePair<TKey, TValue>> An enumerator that can be used to iterate through the collection. GetKey(TValue) Declaration public TKey GetKey(TValue value) GetValue(TKey) Declaration public TValue GetValue(TKey key) Remove(TKey) Declaration public bool Remove(TKey key) Remove(TKey, out TValue) Declaration public bool Remove(TKey key, out TValue value) Remove(TValue) Declaration public bool Remove(TValue value) Remove(TValue, out TKey) Declaration public bool Remove(TValue value, out TKey key) SetValue(TKey, TValue) Declaration public void SetValue(TKey key, TValue value) TryAdd(TKey, TValue) Declaration public bool TryAdd(TKey key, TValue value) TryGetKey(TValue, out TKey) Declaration public bool TryGetKey(TValue value, out TKey key) TryGetValue(TKey, out TValue) Declaration public bool TryGetValue(TKey key, out TValue value)"
  },
  "api/AngeliA.EmptyScope.html": {
    "href": "api/AngeliA.EmptyScope.html",
    "title": "Struct EmptyScope | AngeliA",
    "summary": "Struct EmptyScope Implements IDisposable Methods Dispose() Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources. Declaration public void Dispose()"
  },
  "api/AngeliA.EnablePlayerSystemAttribute.html": {
    "href": "api/AngeliA.EnablePlayerSystemAttribute.html",
    "title": "Class EnablePlayerSystemAttribute | AngeliA",
    "summary": "Class EnablePlayerSystemAttribute Indicates whether the current application uses the player system or not"
  },
  "api/AngeliA.Entity.html": {
    "href": "api/AngeliA.Entity.html",
    "title": "Class Entity | AngeliA",
    "summary": "Class Entity General object with logic which can spawn into the stage Implements IMapItem Constructors Entity() Declaration public Entity() Properties Active True if the entity is currently in stage Declaration public bool Active { get; set; } Center Center position of the Rect in global space Declaration public Int2 Center { get; } CenterX Center position X of the Rect in global space Declaration public int CenterX { get; } CenterY Center position Y of the Rect in global space Declaration public int CenterY { get; } FromWorld True if the entity is spawned by the world squad Declaration public bool FromWorld { get; } Height Size Y of thie entity in global space Declaration public int Height { get; set; } IgnoreReposition True if the entity do not reposition when it out of view Declaration public bool IgnoreReposition { get; set; } InstanceID Unique ID for this entity as a instance on stage Declaration public Int3 InstanceID { get; } InstanceOrder Unique index for this entity that distinguish from other same-type entities on stage Declaration public int InstanceOrder { get; } MapUnitPos The position of this entity on the map in unit space Declaration public Int3? MapUnitPos { get; } PivotUnitPosition Position that this entity belongs to in unit space. Get the MapUnitPos when it's from world. Get rect center's unit position when not from world. Declaration public Int3 PivotUnitPosition { get; } Rect Rect position of this entity in global space Declaration public virtual IRect Rect { get; } Size Size in global space Declaration public Int2 Size { get; set; } SpawnFrame Which frame does this entity get spawned into the stage Declaration public int SpawnFrame { get; protected set; } TypeID Unique ID represent what type of entity is it Declaration public int TypeID { get; init; } Width Size X of thie entity in global space Declaration public int Width { get; set; } X Position X of this entity in global space Declaration public int X { get; set; } XY Position in global space Declaration public Int2 XY { get; set; } Y Position Y of this entity in global space Declaration public int Y { get; set; } Methods AfterReposition(Int3, Int3) This function is called when the entity's map position got repositioned by stage Declaration public virtual void AfterReposition(Int3 fromUnitPos, Int3 toUnitPos) BeforeUpdate() [2/4] This function is called every frame when entity is in stage. Prioritize using this function to update physics logic. Declaration public virtual void BeforeUpdate() CancelIgnoreDespawnFromMap() Do not force this entity not despawn by stage Declaration public void CancelIgnoreDespawnFromMap() Draw() Draw this entity by it's type ID and rect position Declaration public Cell Draw() FirstUpdate() [1/4] This function is called every frame when entity is in stage. Prioritize using this function to fill collider in to physics system. Declaration public virtual void FirstUpdate() IgnoreDespawnFromMap(int) Force this entity not despawn by stage when out of range for given frames long Declaration public void IgnoreDespawnFromMap(int duration = 1) LateUpdate() [4/4] This function is called every frame when entity is in stage. Prioritize using this function to render the entity. Declaration public virtual void LateUpdate() OnActivated() This function is called when entity enter the stage Declaration public virtual void OnActivated() OnInactivated() This function is called when entity leave the stage Declaration public virtual void OnInactivated() Update() [3/4] This function is called every frame when entity is in stage. Prioritize using this function to update physics logic. Declaration public virtual void Update()"
  },
  "api/AngeliA.EntityAttribute.CapacityAttribute.html": {
    "href": "api/AngeliA.EntityAttribute.CapacityAttribute.html",
    "title": "Class EntityAttribute.CapacityAttribute | AngeliA",
    "summary": "Class EntityAttribute.CapacityAttribute Spawn limit count of this entity Constructors CapacityAttribute(int, int) Spawn limit count of this entity Declaration public CapacityAttribute(int capacity, int preSpawn = 0) int preSpawn Create this many instance of the entity when game initialize"
  },
  "api/AngeliA.EntityAttribute.DontDespawnOutOfRangeAttribute.html": {
    "href": "api/AngeliA.EntityAttribute.DontDespawnOutOfRangeAttribute.html",
    "title": "Class EntityAttribute.DontDespawnOutOfRangeAttribute | AngeliA",
    "summary": "Class EntityAttribute.DontDespawnOutOfRangeAttribute Do not despawn this entity when it's out of view rect"
  },
  "api/AngeliA.EntityAttribute.DontDestroyOnZChangedAttribute.html": {
    "href": "api/AngeliA.EntityAttribute.DontDestroyOnZChangedAttribute.html",
    "title": "Class EntityAttribute.DontDestroyOnZChangedAttribute | AngeliA",
    "summary": "Class EntityAttribute.DontDestroyOnZChangedAttribute This entity do not despawn when player enter another map layer"
  },
  "api/AngeliA.EntityAttribute.DontDrawBehindAttribute.html": {
    "href": "api/AngeliA.EntityAttribute.DontDrawBehindAttribute.html",
    "title": "Class EntityAttribute.DontDrawBehindAttribute | AngeliA",
    "summary": "Class EntityAttribute.DontDrawBehindAttribute This entity will not display on the behind layer"
  },
  "api/AngeliA.EntityAttribute.DontSpawnFromWorld.html": {
    "href": "api/AngeliA.EntityAttribute.DontSpawnFromWorld.html",
    "title": "Class EntityAttribute.DontSpawnFromWorld | AngeliA",
    "summary": "Class EntityAttribute.DontSpawnFromWorld Do not spawn this entity when it's painted into the map"
  },
  "api/AngeliA.EntityAttribute.ExcludeInMapEditorAttribute.html": {
    "href": "api/AngeliA.EntityAttribute.ExcludeInMapEditorAttribute.html",
    "title": "Class EntityAttribute.ExcludeInMapEditorAttribute | AngeliA",
    "summary": "Class EntityAttribute.ExcludeInMapEditorAttribute Do not show this entity inside the palette panel of map editor."
  },
  "api/AngeliA.EntityAttribute.LayerAttribute.html": {
    "href": "api/AngeliA.EntityAttribute.LayerAttribute.html",
    "title": "Class EntityAttribute.LayerAttribute | AngeliA",
    "summary": "Class EntityAttribute.LayerAttribute Which layer should this entity spawn inside. Constructors LayerAttribute(int) Which layer should this entity spawn inside. Declaration public LayerAttribute(int layer)"
  },
  "api/AngeliA.EntityAttribute.MapEditorGroupAttribute.html": {
    "href": "api/AngeliA.EntityAttribute.MapEditorGroupAttribute.html",
    "title": "Class EntityAttribute.MapEditorGroupAttribute | AngeliA",
    "summary": "Class EntityAttribute.MapEditorGroupAttribute Which map editor palette group should this entity in Constructors MapEditorGroupAttribute(string, int) Which map editor palette group should this entity in Declaration public MapEditorGroupAttribute(string groupName, int order = 0)"
  },
  "api/AngeliA.EntityAttribute.RepositionWhenInactiveAttribute.html": {
    "href": "api/AngeliA.EntityAttribute.RepositionWhenInactiveAttribute.html",
    "title": "Class EntityAttribute.RepositionWhenInactiveAttribute | AngeliA",
    "summary": "Class EntityAttribute.RepositionWhenInactiveAttribute When the entity despawn, reset the position in map. So next time it will be load from the position where it last appeared Constructors RepositionWhenInactiveAttribute(bool) When the entity despawn, reset the position in map. So next time it will be load from the position where it last appeared Declaration public RepositionWhenInactiveAttribute(bool requireReposition = true) Parameters Type Name Description bool requireReposition Disable reposition by setting this to False"
  },
  "api/AngeliA.EntityAttribute.SpawnWithCheatCodeAttribute.html": {
    "href": "api/AngeliA.EntityAttribute.SpawnWithCheatCodeAttribute.html",
    "title": "Class EntityAttribute.SpawnWithCheatCodeAttribute | AngeliA",
    "summary": "Class EntityAttribute.SpawnWithCheatCodeAttribute Player can use \"Spawn---\" to spawn this entity to stage."
  },
  "api/AngeliA.EntityAttribute.StageOrderAttribute.html": {
    "href": "api/AngeliA.EntityAttribute.StageOrderAttribute.html",
    "title": "Class EntityAttribute.StageOrderAttribute | AngeliA",
    "summary": "Class EntityAttribute.StageOrderAttribute The order in which this entity gets updated in it's layer Constructors StageOrderAttribute(int) The order in which this entity gets updated in it's layer Declaration public StageOrderAttribute(int order)"
  },
  "api/AngeliA.EntityAttribute.UpdateOutOfRangeAttribute.html": {
    "href": "api/AngeliA.EntityAttribute.UpdateOutOfRangeAttribute.html",
    "title": "Class EntityAttribute.UpdateOutOfRangeAttribute | AngeliA",
    "summary": "Class EntityAttribute.UpdateOutOfRangeAttribute This entity will update when it's outside view rect"
  },
  "api/AngeliA.EntityAttribute.html": {
    "href": "api/AngeliA.EntityAttribute.html",
    "title": "Class EntityAttribute | AngeliA",
    "summary": "Class EntityAttribute Attribute for entities"
  },
  "api/AngeliA.EntityHookTask.html": {
    "href": "api/AngeliA.EntityHookTask.html",
    "title": "Class EntityHookTask | AngeliA",
    "summary": "Class EntityHookTask Task that keep exists util the target entity inactive. Require UserData as the target entity. Fields TYPE_ID Declaration public static readonly int TYPE_ID Methods FrameUpdate() This function is used to handle the internal logic. Declaration public override TaskResult FrameUpdate() Returns Type Description TaskResult \"Continue\" if the task should keep on after this frame. \"End\" if the task should end. Overrides Task.FrameUpdate()"
  },
  "api/AngeliA.EntityLayer.html": {
    "href": "api/AngeliA.EntityLayer.html",
    "title": "Class EntityLayer | AngeliA",
    "summary": "Class EntityLayer Layer for entity spawning Fields BULLET Declaration public const int BULLET = 5 CHARACTER Declaration public const int CHARACTER = 2 COUNT Declaration public const int COUNT = 8 DECORATE Particles, Effects etc... Declaration public const int DECORATE = 7 ENVIRONMENT Declaration public const int ENVIRONMENT = 3 GAME Default option Declaration public const int GAME = 1 ITEM Declaration public const int ITEM = 6 LAYER_NAMES Declaration public static readonly string[] LAYER_NAMES UI Declaration public const int UI = 0 WATER Declaration public const int WATER = 4"
  },
  "api/AngeliA.EntityLayerCapacityAttribute.html": {
    "href": "api/AngeliA.EntityLayerCapacityAttribute.html",
    "title": "Class EntityLayerCapacityAttribute | AngeliA",
    "summary": "Class EntityLayerCapacityAttribute Max entity count for the layer Constructors EntityLayerCapacityAttribute(int, int) Max entity count for the layer Declaration public EntityLayerCapacityAttribute(int layer, int capacity)"
  },
  "api/AngeliA.EntityUI.html": {
    "href": "api/AngeliA.EntityUI.html",
    "title": "Class EntityUI | AngeliA",
    "summary": "Class EntityUI Entities which spawns into the stage and serves as UI Implements IMapItem Constructors EntityUI() Declaration public EntityUI() Properties BlockEvent True if this UI blocks mouse button event Declaration protected virtual bool BlockEvent { get; } Methods FirstUpdate() [1/4] This function is called every frame when entity is in stage. Prioritize using this function to fill collider in to physics system. Declaration public override void FirstUpdate() Overrides Entity.FirstUpdate() LateUpdate() [4/4] This function is called every frame when entity is in stage. Prioritize using this function to render the entity. Declaration public override void LateUpdate() Overrides Entity.LateUpdate() Unify(int) Convert unified size into global size Declaration protected static int Unify(int value) Update() [3/4] This function is called every frame when entity is in stage. Prioritize using this function to update physics logic. Declaration public override void Update() Overrides Entity.Update() UpdateUI() Declaration public virtual void UpdateUI()"
  },
  "api/AngeliA.EnvironmentShadowScope.html": {
    "href": "api/AngeliA.EnvironmentShadowScope.html",
    "title": "Struct EnvironmentShadowScope | AngeliA",
    "summary": "Struct EnvironmentShadowScope Scope that draw shadows for rendering cells inside Implements IDisposable Examples using AngeliA; namespace AngeliaGame; public class Example { [OnGameUpdate] internal static void OnGameUpdate () { using (new EnvironmentShadowScope()) { // Rendering cell created inside will have a shadow Renderer.Draw(BuiltInSprite.ICON_ENTITY, Renderer.CameraRect.Shrink(Const.CEL * 8)); } } } Constructors EnvironmentShadowScope() Scope that draw shadows for rendering cells inside Declaration public EnvironmentShadowScope() EnvironmentShadowScope(int, int, byte, int) Scope that draw shadows for rendering cells inside Declaration public EnvironmentShadowScope(int offsetX = -64, int offsetY = 0, byte alpha = 64, int z = -65520) Parameters Type Name Description int offsetX Shadow distance X in global space int offsetY Shadow distance Y in global space byte alpha Transparency value of the shadow. (0 means transparent, 255 means not tramsparent) int z Z value for sort rendering cells Fields Alpha Transparency value of the shadow. (0 means transparent, 255 means not tramsparent) Declaration public readonly byte Alpha OffsetX Shadow distance X in global space Declaration public readonly int OffsetX OffsetY Shadow distance Y in global space Declaration public readonly int OffsetY Z Z value for sort rendering cells Declaration public readonly int Z Methods Dispose() Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources. Declaration public void Dispose()"
  },
  "api/AngeliA.Equipment.html": {
    "href": "api/AngeliA.Equipment.html",
    "title": "Class Equipment | AngeliA",
    "summary": "Class Equipment Represent an item that can be equip into a slot for a character Implements IMapItem Properties EquipmentType Which type is this quipment Declaration public abstract EquipmentType EquipmentType { get; } MaxStackCount Count limitation for multiple items inside one inventory slot Declaration public override int MaxStackCount { get; } Overrides Item.MaxStackCount"
  },
  "api/AngeliA.EquipmentType.html": {
    "href": "api/AngeliA.EquipmentType.html",
    "title": "Enum EquipmentType | AngeliA",
    "summary": "Enum EquipmentType Represent the type of the equipment Fields Name Description BodyArmor Equipment that equip into body slot Gloves Equipment that equip into hand slot HandTool Equipment that equip into hand slot and can be use as a tool Helmet Equipment that equip into head slot Jewelry Equipment that equip into jewelry slot. Do not render onto the character by default. Shoes Equipment that equip into foot slot"
  },
  "api/AngeliA.EventAttribute.html": {
    "href": "api/AngeliA.EventAttribute.html",
    "title": "Class EventAttribute | AngeliA",
    "summary": "Class EventAttribute Attribute for link all static methods with a System.Action. When the action is invoked, all methods get called. Constructors EventAttribute(int) Attribute for link all static methods with a System.Action. When the action is invoked, all methods get called. Declaration protected EventAttribute(int order = 0)"
  },
  "api/AngeliA.Extension.html": {
    "href": "api/AngeliA.Extension.html",
    "title": "Class Extension | AngeliA",
    "summary": "Class Extension Extension method for AngeliA projects Methods Abs(int) Declaration public static int Abs(this int value) Abs(float) Declaration public static float Abs(this float value) Adjust(Color32, float, float, float, float) Declaration public static Color32 Adjust(this Color32 color, float hue, float saturation, float volume, float alpha) Almost(ColorF, ColorF) Declaration public static bool Almost(this ColorF a, ColorF b) Almost(FRect, FRect) Declaration public static bool Almost(this FRect a, FRect b) Almost(Float2, Float2) Declaration public static bool Almost(this Float2 a, Float2 b) Almost(Float3, Float3) Declaration public static bool Almost(this Float3 a, Float3 b) Almost(float, float) Declaration public static bool Almost(this float a, float b) AlmostZero(Float4) Declaration public static bool AlmostZero(this Float4 value) AlmostZero(float) Declaration public static bool AlmostZero(this float a) AngeHash(string) Hash code that used inside AngeliA Declaration public static int AngeHash(this string str) AngeHash(string, int, int) Hash code that used inside AngeliA Declaration public static int AngeHash(this string str, int start, int length) AngeHash(Type) Hash code that used inside AngeliA Declaration public static int AngeHash(this Type type) AngeName(Type) Name of this type that used inside AngeliA Declaration public static string AngeName(this Type type) AngeReverseHash(char[], int, int) Hash code that used inside AngeliA but generate with the reversed string data Declaration public static int AngeReverseHash(this char[] arr, int start, int length) AntiClockwise(Direction4) Declaration public static Direction4 AntiClockwise(this Direction4 dir) AntiClockwise(Direction5) Declaration public static Direction5 AntiClockwise(this Direction5 dir) AntiClockwise(Direction8, int) Declaration public static Direction8 AntiClockwise(this Direction8 dir, int count = 1) AppendWithDoubleQuotes(StringBuilder, string) Declaration public static void AppendWithDoubleQuotes(this StringBuilder builder, string content) BottomHalf(IRect) Declaration public static IRect BottomHalf(this IRect rect) BottomLeft(FRect) Declaration public static Float2 BottomLeft(this FRect rect) BottomLeft(IRect) Declaration public static Int2 BottomLeft(this IRect rect) BottomMid(IRect) Declaration public static Int2 BottomMid(this IRect rect) BottomRight(FRect) Declaration public static Float2 BottomRight(this FRect rect) BottomRight(IRect) Declaration public static Int2 BottomRight(this IRect rect) Bytes_to_Pixels(byte[], int, int) Declaration public static Color32[] Bytes_to_Pixels(this byte[] bytes, int width, int height) Ceil(float) Declaration public static float Ceil(this float a) CeilDivide(int, int) Declaration public static int CeilDivide(this int value, int target) CeilToInt(Float2) Declaration public static Int2 CeilToInt(this Float2 v) CeilToInt(float) Declaration public static int CeilToInt(this float a) CenterInt(IRect) Declaration public static Int2 CenterInt(this IRect rect) CenterX(IRect) Declaration public static int CenterX(this IRect rect) CenterY(IRect) Declaration public static int CenterY(this IRect rect) Clamp(ref FRect, FRect) Declaration public static void Clamp(this ref FRect rect, FRect range) Clamp(ref Float2, float, float, float, float) Declaration public static void Clamp(this ref Float2 v, float minX, float minY, float maxX, float maxY) Clamp(IRect, IRect) Declaration public static IRect Clamp(this IRect rect, IRect range) Clamp(ref Int2, IRect) Declaration public static void Clamp(this ref Int2 v, IRect range) Clamp(ref Int2, int, int, int, int) Declaration public static void Clamp(this ref Int2 v, int minX, int minY, int maxX, int maxY) Clamp(int, int, int) Declaration public static int Clamp(this int a, int min, int max) Clamp(float, float, float) Declaration public static float Clamp(this float a, float min, float max) Clamp01(float) Declaration public static float Clamp01(this float value) ClampDisorder(int, int, int) Declaration public static int ClampDisorder(this int a, int rangeA, int rangeB) ClampPositionInside(ref IRect, IRect) Declaration public static void ClampPositionInside(this ref IRect rect, IRect bounds) Clamped(Int2, IRect) Declaration public static Int2 Clamped(this Int2 v, IRect range) Clamped(Int2, int, int, int, int) Declaration public static Int2 Clamped(this Int2 v, int minX, int minY, int maxX, int maxY) Clockwise(Direction4) Declaration public static Direction4 Clockwise(this Direction4 dir) Clockwise(Direction5) Declaration public static Direction5 Clockwise(this Direction5 dir) Clockwise(Direction8, int) Declaration public static Direction8 Clockwise(this Direction8 dir, int count = 1) CompleteInside(FRect, FRect) Declaration public static bool CompleteInside(this FRect rect, FRect range) CompleteInside(IRect, IRect) Declaration public static bool CompleteInside(this IRect rect, IRect range) Contains(IRect, int, int) Declaration public static bool Contains(this IRect rect, int x, int y) CornerInside(IRect, Alignment, int) Declaration public static IRect CornerInside(this IRect rect, Alignment corner, int size) CornerInside(IRect, Alignment, int, int) Declaration public static IRect CornerInside(this IRect rect, Alignment corner, int width, int height) CornerOutside(IRect, Alignment, int) Declaration public static IRect CornerOutside(this IRect rect, Alignment corner, int size) CornerOutside(IRect, Alignment, int, int) Declaration public static IRect CornerOutside(this IRect rect, Alignment corner, int width, int height) DigitCount(int) Declaration public static int DigitCount(this int n) Distance(int, int) Declaration public static int Distance(this int value, int target) Dodge(IRect, IRect, out IRect?, out IRect?, out IRect?, out IRect?) Declaration public static bool Dodge(this IRect rect, IRect dodge, out IRect? resultTop, out IRect? resultMidL, out IRect? resultMidR, out IRect? resultBottom) Edge(FRect, Direction4, float) Declaration public static FRect Edge(this FRect rect, Direction4 edge, float thickness = 1) EdgeExact(IRect, Direction4, int) Declaration public static IRect EdgeExact(this IRect rect, Direction4 edge, int size = 1) EdgeInside(IRect, Direction4, int) Declaration public static IRect EdgeInside(this IRect rect, Direction4 edge, int size = 1) EdgeInsideDown(IRect, int) Declaration public static IRect EdgeInsideDown(this IRect rect, int size) EdgeInsideLeft(IRect, int) Declaration public static IRect EdgeInsideLeft(this IRect rect, int size) EdgeInsideRight(IRect, int) Declaration public static IRect EdgeInsideRight(this IRect rect, int size) EdgeInsideSquareDown(IRect) Declaration public static IRect EdgeInsideSquareDown(this IRect rect) EdgeInsideSquareLeft(IRect) Declaration public static IRect EdgeInsideSquareLeft(this IRect rect) EdgeInsideSquareRight(IRect) Declaration public static IRect EdgeInsideSquareRight(this IRect rect) EdgeInsideSquareUp(IRect) Declaration public static IRect EdgeInsideSquareUp(this IRect rect) EdgeInsideUp(IRect, int) Declaration public static IRect EdgeInsideUp(this IRect rect, int size) EdgeOutside(IRect, Direction4, int) Declaration public static IRect EdgeOutside(this IRect rect, Direction4 edge, int size = 1) EdgeOutsideDown(IRect, int) Declaration public static IRect EdgeOutsideDown(this IRect rect, int size) EdgeOutsideLeft(IRect, int) Declaration public static IRect EdgeOutsideLeft(this IRect rect, int size) EdgeOutsideRight(IRect, int) Declaration public static IRect EdgeOutsideRight(this IRect rect, int size) EdgeOutsideUp(IRect, int) Declaration public static IRect EdgeOutsideUp(this IRect rect, int size) EnumLength(Type) Declaration public static int EnumLength(this Type @enum) Envelope(FRect, float) Declaration public static FRect Envelope(this FRect rect, float targetAspect) Envelope(IRect, int, int) Declaration public static IRect Envelope(this IRect innerRect, int aspWidth, int aspHeight) Expand(FRect, float) Declaration public static FRect Expand(this FRect rect, float offset) Expand(FRect, float, float, float, float) Declaration public static FRect Expand(this FRect rect, float l, float r, float d, float u) Expand(IRect, Int4) Declaration public static IRect Expand(this IRect rect, Int4 offset) Expand(IRect, int) Declaration public static IRect Expand(this IRect rect, int offset) Expand(IRect, int, int, int, int) Declaration public static IRect Expand(this IRect rect, int l, int r, int d, int u) ExpandHorizontal(IRect, int) Declaration public static IRect ExpandHorizontal(this IRect rect, int offset) ExpandToIRect(FRect) Declaration public static IRect ExpandToIRect(this FRect rect) ExpandVertical(IRect, int) Declaration public static IRect ExpandVertical(this IRect rect, int offset) FillWithNewValue<A>(A[]) Declaration public static A[] FillWithNewValue<A>(this A[] arr) where A : new() FillWithValue<A>(A[], A) Declaration public static A[] FillWithValue<A>(this A[] arr, A value) Fit(FRect, float, float, float) Declaration public static FRect Fit(this FRect rect, float targetAspect, float pivotX = 0.5, float pivotY = 0.5) Fit(IRect, AngeSprite, int, int) Declaration public static IRect Fit(this IRect rect, AngeSprite sprite, int pivotX = 500, int pivotY = 500) Fit(IRect, int, int, int, int) Declaration public static IRect Fit(this IRect rect, int outterWidth, int outterHeight, int pivotX = 500, int pivotY = 500) FlipHorizontal(ref IRect) Declaration public static void FlipHorizontal(this ref IRect rect) FlipNegative(ref IRect) Declaration public static void FlipNegative(this ref IRect rect) FlipVertical(ref IRect) Declaration public static void FlipVertical(this ref IRect rect) Floor(float) Declaration public static float Floor(this float a) FloorToInt(Float2) Declaration public static Int2 FloorToInt(this Float2 v) FloorToInt(float) Declaration public static int FloorToInt(this float a) ForAllFields<T>(object, BindingFlags, bool) Declaration public static IEnumerable<(FieldInfo field, T value)> ForAllFields<T>(this object target, BindingFlags binding = BindingFlags.Instance | BindingFlags.Static | BindingFlags.Public | BindingFlags.NonPublic, bool inherited = true) ForAllFields<T>(Type, BindingFlags, bool) Declaration public static IEnumerable<FieldInfo> ForAllFields<T>(this Type type, BindingFlags binding = BindingFlags.Instance | BindingFlags.Static | BindingFlags.Public | BindingFlags.NonPublic, bool inherited = true) ForAllProperties<T>(object) Declaration public static IEnumerable<(string name, T value)> ForAllProperties<T>(this object target) ForAllStaticFieldValue<T>(Type, BindingFlags, bool) Declaration public static IEnumerable<T> ForAllStaticFieldValue<T>(this Type type, BindingFlags binding = BindingFlags.Static | BindingFlags.Public | BindingFlags.NonPublic, bool inherited = true) ForceSquare(IRect, bool, bool, bool) Declaration public static IRect ForceSquare(this IRect rect, bool toLeft, bool toBottom, bool grow = false) GetBit(byte, int) Declaration public static bool GetBit(this byte value, int index) GetBit(int, int) Declaration public static bool GetBit(this int value, int index) GetBit(ushort, int) Declaration public static bool GetBit(this ushort value, int index) GetBit(uint, int) Declaration public static bool GetBit(this uint value, int index) GetBit(ulong, int) Declaration public static bool GetBit(this ulong value, int index) GetClamp(FRect, FRect) Declaration public static FRect GetClamp(this FRect rect, FRect range) GetDirection(Gamekey) Declaration public static Direction4? GetDirection(this Gamekey key) GetFlipHorizontal(IRect) Declaration public static IRect GetFlipHorizontal(this IRect rect) GetFlipNegative(IRect) Declaration public static IRect GetFlipNegative(this IRect rect) GetFlipVertical(IRect) Declaration public static IRect GetFlipVertical(this IRect rect) GetHorizontalDirection(Direction5) Declaration public static Direction3 GetHorizontalDirection(this Direction5 dir) GetReadOnlySpan<T>(T[]) Declaration public static ReadOnlySpan<T> GetReadOnlySpan<T>(this T[] arr) GetRotation(Direction4) Declaration public static int GetRotation(this Direction4 dir) GetRotation(Direction8) Declaration public static int GetRotation(this Direction8 dir) GetRotation(Float2) Declaration public static int GetRotation(this Float2 vector) GetRotation(Int2) Declaration public static int GetRotation(this Int2 vector) GetSpan<T>(List<T>) Declaration public static Span<T> GetSpan<T>(this List<T> list) GetSpan<T>(T[]) Declaration public static Span<T> GetSpan<T>(this T[] arr) GetTypePath(Type, Type) Declaration public static string GetTypePath(this Type type, Type startFrom = null) GetVerticalDirection(Direction5) Declaration public static Direction3 GetVerticalDirection(this Direction5 dir) GreaterOrAlmost(float, float) Declaration public static bool GreaterOrAlmost(this float a, float b) GreaterOrEquel(int, int) Declaration public static int GreaterOrEquel(this int value, int target) GreaterOrEquel(long, long) Declaration public static long GreaterOrEquel(this long value, long target) GreaterOrEquelThanZero(int) Declaration public static int GreaterOrEquelThanZero(this int value) HorizontalMidHalf(IRect) Declaration public static IRect HorizontalMidHalf(this IRect rect) InLength(int, int) Declaration public static bool InLength(this int value, int length) InRangeExclude(int, int, int) Declaration public static bool InRangeExclude(this int value, int min, int max) InRangeInclude(int, int, int) Declaration public static bool InRangeInclude(this int value, int min, int max) Inside(Float2, Float2, Float2) Declaration public static bool Inside(this Float2 v, Float2 min, Float2 max) Inside(Float2, float, float, float, float) Declaration public static bool Inside(this Float2 v, float left, float right, float down, float up) Inside01(Float2) Declaration public static bool Inside01(this Float2 v) Intersection(IRect, IRect) Declaration public static IRect? Intersection(this IRect rect, IRect other) InvokeSafe(Action) Declaration public static void InvokeSafe(this Action action) InvokeSafe<T0>(Action<T0>, T0) Declaration public static void InvokeSafe<T0>(this Action<T0> action, T0 a) InvokeSafe<T0, T1>(Action<T0, T1>, T0, T1) Declaration public static void InvokeSafe<T0, T1>(this Action<T0, T1> action, T0 a, T1 b) InvokeSafe<T0, T1, T2>(Action<T0, T1, T2>, T0, T1, T2) Declaration public static void InvokeSafe<T0, T1, T2>(this Action<T0, T1, T2> action, T0 a, T1 b, T2 c) IsBottom(Alignment) Declaration public static bool IsBottom(this Alignment alignment) IsBottom(Direction8) Declaration public static bool IsBottom(this Direction8 dir) IsHorizontal(Direction4) Declaration public static bool IsHorizontal(this Direction4 dir) IsHorizontal(Direction5) Declaration public static bool IsHorizontal(this Direction5 dir) IsHorizontal(Direction8) Declaration public static bool IsHorizontal(this Direction8 dir) IsLeft(Alignment) Declaration public static bool IsLeft(this Alignment alignment) IsLeft(Direction8) Declaration public static bool IsLeft(this Direction8 dir) IsLyingDown(CharacterAnimationType) True if the character should be rendered lying down Declaration public static bool IsLyingDown(this CharacterAnimationType aniType) IsMidX(Alignment) Declaration public static bool IsMidX(this Alignment alignment) IsMidY(Alignment) Declaration public static bool IsMidY(this Alignment alignment) IsNotSame(IRect, IRect) Declaration public static bool IsNotSame(this IRect a, IRect b) IsPositive(Direction4) Declaration public static bool IsPositive(this Direction4 dir) IsPositive(Direction5) Declaration public static bool IsPositive(this Direction5 dir) IsPositive(Direction8) Declaration public static bool IsPositive(this Direction8 dir) IsRight(Alignment) Declaration public static bool IsRight(this Alignment alignment) IsRight(Direction8) Declaration public static bool IsRight(this Direction8 dir) IsSame(Color32, Color32, bool) Declaration public static bool IsSame(this Color32 a, Color32 b, bool ignoreAlpha = false) IsSame(IRect, IRect) Declaration public static bool IsSame(this IRect a, IRect b) IsTilted(Direction8) Declaration public static bool IsTilted(this Direction8 dir) IsTop(Alignment) Declaration public static bool IsTop(this Alignment alignment) IsTop(Direction8) Declaration public static bool IsTop(this Direction8 dir) IsVertical(Direction4) Declaration public static bool IsVertical(this Direction4 dir) IsVertical(Direction5) Declaration public static bool IsVertical(this Direction5 dir) IsVertical(Direction8) Declaration public static bool IsVertical(this Direction8 dir) JoinArray<T>(IEnumerable<T>, Func<T, string>, char) Declaration public static string JoinArray<T>(this IEnumerable<T> arr, Func<T, string> toString, char separator = '\\0') LeftHalf(IRect) Declaration public static IRect LeftHalf(this IRect rect) LerpTo(IRect, IRect, int) Declaration public static IRect LerpTo(this IRect from, IRect to, int lerpRate) LerpTo(IRect, IRect, float) Declaration public static IRect LerpTo(this IRect from, IRect to, float lerp) LerpTo(int, int, int) Declaration public static int LerpTo(this int from, int to, int lerpRate) LerpTo(int, int, float) Declaration public static int LerpTo(this int from, int to, float lerp01) LerpWithGap(float, float, float, float) Declaration public static float LerpWithGap(this float from, float to, float lerp, float gap) LessOrAlmost(float, float) Declaration public static bool LessOrAlmost(this float a, float b) LessOrEquel(int, int) Declaration public static int LessOrEquel(this int value, int target) LessOrEquelThanZero(int) Declaration public static int LessOrEquelThanZero(this int value) LookDifferent(Color32, Color32) Declaration public static bool LookDifferent(this Color32 a, Color32 b) MidLeft(IRect) Declaration public static Int2 MidLeft(this IRect rect) MidRight(IRect) Declaration public static Int2 MidRight(this IRect rect) MouseInside(IRect) True if mouse currently inside the given rectangle Declaration public static bool MouseInside(this IRect rect) MoveTowards(Int2, Int2, Int2) Declaration public static Int2 MoveTowards(this Int2 v, Int2 target, Int2 delta) MoveTowards(Int2, Int2, int) Declaration public static Int2 MoveTowards(this Int2 v, Int2 target, int delta) MoveTowards(int, int, int) Declaration public static int MoveTowards(this int current, int target, int maxDelta) MoveTowards(int, int, int, int) Declaration public static int MoveTowards(this int current, int target, int positiveDelta, int negativeDelta) Mult(Color32, Color32) Declaration public static Color32 Mult(this Color32 a, Color32 b) Next<E>(E) Declaration public static E Next<E>(this E @enum) where E : Enum Normal(Alignment) Declaration public static Int2 Normal(this Alignment alignment) Normal(Direction4) Declaration public static Int2 Normal(this Direction4 dir) Normal(Direction5) Declaration public static Int2 Normal(this Direction5 dir) Normal(Direction8) Declaration public static Int2 Normal(this Direction8 dir) NotAlmost(FRect, FRect) Declaration public static bool NotAlmost(this FRect a, FRect b) NotAlmost(Float2, Float2) Declaration public static bool NotAlmost(this Float2 a, Float2 b) NotAlmost(Float3, Float3) Declaration public static bool NotAlmost(this Float3 a, Float3 b) NotAlmost(float, float) Declaration public static bool NotAlmost(this float a, float b) NotAlmostZero(float) Declaration public static bool NotAlmostZero(this float a) NotEnd(BinaryReader) Declaration public static bool NotEnd(this BinaryReader reader) Opposite(Direction3) Declaration public static Direction3 Opposite(this Direction3 dir) Opposite(Direction4) Declaration public static Direction4 Opposite(this Direction4 dir) Opposite(Direction5) Declaration public static Direction5 Opposite(this Direction5 dir) Opposite(Direction8) Declaration public static Direction8 Opposite(this Direction8 dir) PartHorizontal(IRect, int, int) Declaration public static IRect PartHorizontal(this IRect rect, int index, int count) PartVertical(IRect, int, int) Declaration public static IRect PartVertical(this IRect rect, int index, int count) PingPong(int, int) Declaration public static int PingPong(this int value, int length) PingPong(int, int, int) Declaration public static int PingPong(this int value, int min, int max) Pixels_to_Bytes(Color32[]) Declaration public static byte[] Pixels_to_Bytes(this Color32[] pixels) Prev<E>(E) Declaration public static E Prev<E>(this E @enum) where E : Enum ResizeFrom(FRect, float, float, float, float) Declaration public static FRect ResizeFrom(this FRect rect, float newWidth, float newHeight, float pointX, float pointY) ResizeFrom(IRect, int, int, int, int) Declaration public static IRect ResizeFrom(this IRect rect, int newWidth, int newHeight, int pointX, int pointY) ReverseClamp(int, int, int) Declaration public static int ReverseClamp(this int a, int min, int max) RightHalf(IRect) Declaration public static IRect RightHalf(this IRect rect) Rotate(Float2, float) Declaration public static Float2 Rotate(this Float2 vector, float angle) Rotate(Float3, float) Declaration public static Float3 Rotate(this Float3 vector, float angle) Round(float) Declaration public static float Round(this float a) RoundToInt(Float2) Declaration public static Int2 RoundToInt(this Float2 v) RoundToInt(float) Declaration public static int RoundToInt(this float a) ScaleFrom(FRect, float, float, float) Declaration public static FRect ScaleFrom(this FRect rect, float scale, float pointX, float pointY) ScaleFrom(IRect, int, int, int) Declaration public static IRect ScaleFrom(this IRect rect, int scale, int pointX, int pointY) ScaleFrom(IRect, int, int, int, int) Declaration public static IRect ScaleFrom(this IRect rect, int scaleX, int scaleY, int pointX, int pointY) ScaleFrom(IRect, float, int, int) Declaration public static IRect ScaleFrom(this IRect rect, float scale01, int pointX, int pointY) ScaleFrom(IRect, float, float, int, int) Declaration public static IRect ScaleFrom(this IRect rect, float scaleX01, float scaleY01, int pointX, int pointY) SetBit(ref byte, int, bool) Declaration public static void SetBit(this ref byte value, int index, bool bitValue) SetBit(ref int, int, bool) Declaration public static void SetBit(this ref int value, int index, bool bitValue) SetBit(ref uint, int, bool) Declaration public static void SetBit(this ref uint value, int index, bool bitValue) SetBit(ref ulong, int, bool) Declaration public static void SetBit(this ref ulong value, int index, bool bitValue) SetMinMax(ref IRect, int, int, int, int) Declaration public static void SetMinMax(this ref IRect rect, int xMin, int xMax, int yMin, int yMax) Shift(FRect, float, float) Declaration public static FRect Shift(this FRect rect, float x, float y) Shift(IRect, Int2) Declaration public static IRect Shift(this IRect rect, Int2 offset) Shift(IRect, int, int) Declaration public static IRect Shift(this IRect rect, int x, int y) Shift(Int2, int, int) Declaration public static Int2 Shift(this Int2 v, int x, int y) ShiftX(Int2, int) Declaration public static Int2 ShiftX(this Int2 v, int x) ShiftY(Int2, int) Declaration public static Int2 ShiftY(this Int2 v, int y) Shrink(FRect, float) Declaration public static FRect Shrink(this FRect rect, float offset) Shrink(FRect, float, float, float, float) Declaration public static FRect Shrink(this FRect rect, float l, float r, float d, float u) Shrink(IRect, Int4) Declaration public static IRect Shrink(this IRect rect, Int4 offset) Shrink(IRect, int) Declaration public static IRect Shrink(this IRect rect, int offset) Shrink(IRect, int, int, int, int) Declaration public static IRect Shrink(this IRect rect, int l, int r, int d, int u) ShrinkDown(IRect, int) Declaration public static IRect ShrinkDown(this IRect rect, int down) ShrinkLeft(IRect, int) Declaration public static IRect ShrinkLeft(this IRect rect, int left) ShrinkRight(IRect, int) Declaration public static IRect ShrinkRight(this IRect rect, int right) ShrinkUp(IRect, int) Declaration public static IRect ShrinkUp(this IRect rect, int up) Sign(bool) Declaration public static int Sign(this bool value) Sign(int) Declaration public static int Sign(this int i) Sign3(int) Declaration public static int Sign3(this int i) SlideDown(ref IRect, int) Move the rect down by it's height. Declaration public static void SlideDown(this ref IRect rect, int padding = 0) int padding Extra distance to move SlideLeft(ref IRect, int) Move the rect left by it's width. Declaration public static void SlideLeft(this ref IRect rect, int padding = 0) int padding Extra distance to move SlideRight(ref IRect, int) Move the rect right by it's width. Declaration public static void SlideRight(this ref IRect rect, int padding = 0) int padding Extra distance to move SlideUp(ref IRect, int) Move the rect up by it's height. Declaration public static void SlideUp(this ref IRect rect, int padding = 0) int padding Extra distance to move StartsWith(string, char, char) Declaration public static bool StartsWith(this string str, char targetChar, char ignoreChar) StartsWith_IgnoreWhiteSpace(string, char) Declaration public static bool StartsWith_IgnoreWhiteSpace(this string str, char targetChar) StartsWith_IgnoreWhiteSpace(string, char, out int) Declaration public static bool StartsWith_IgnoreWhiteSpace(this string str, char targetChar, out int index) ToAlignment(Direction4) Declaration public static Alignment ToAlignment(this Direction4 dir4) ToAlignment(Direction5) Declaration public static Alignment ToAlignment(this Direction5 dir5) ToColor32(ColorF) Declaration public static Color32 ToColor32(this ColorF value) ToColorF(Color32) Declaration public static ColorF ToColorF(this Color32 value) ToDirection4(Direction5, Direction4) Declaration public static Direction4 ToDirection4(this Direction5 dir5, Direction4 center = Direction4.Up) ToDirection5(Direction4) Declaration public static Direction5 ToDirection5(this Direction4 dir4) ToDirection8(Direction4) Declaration public static Direction8 ToDirection8(this Direction4 dir4) ToFRect(IRect) Declaration public static FRect ToFRect(this IRect rect) ToGlobal(IRect) Declaration public static IRect ToGlobal(this IRect unit) ToGlobal(Int2) Declaration public static Int2 ToGlobal(this Int2 unitPos) ToGlobal(Int3) Declaration public static Int3 ToGlobal(this Int3 unitPos) ToGlobal(int) Declaration public static int ToGlobal(this int unitPos) ToIRect(FRect) Declaration public static IRect ToIRect(this FRect rect) ToStringWithDoubleQuotes(string) Declaration public static string ToStringWithDoubleQuotes(this string str) ToStringWithDoubleQuotes(StringBuilder) Declaration public static string ToStringWithDoubleQuotes(this StringBuilder builder) ToUnifyGlobal(Int2) Declaration public static Int2 ToUnifyGlobal(this Int2 globalPos) ToUnifyGlobal(Int3) Declaration public static Int3 ToUnifyGlobal(this Int3 globalPos) ToUnifyGlobal(int) Declaration public static int ToUnifyGlobal(this int globalPos) ToUnit(IRect) Declaration public static IRect ToUnit(this IRect global) ToUnit(Int2) Declaration public static Int2 ToUnit(this Int2 globalPos) ToUnit(Int3) Declaration public static Int3 ToUnit(this Int3 globalPos) ToUnit(int) Declaration public static int ToUnit(this int globalPos) ToUnit(int, out int) Declaration public static int ToUnit(this int globalPos, out int remainder) ToVector3Int(Int2, int) Declaration public static Int3 ToVector3Int(this Int2 v, int z) TopHalf(IRect) Declaration public static IRect TopHalf(this IRect rect) TopLeft(FRect) Declaration public static Float2 TopLeft(this FRect rect) TopLeft(IRect) Declaration public static Int2 TopLeft(this IRect rect) TopMid(IRect) Declaration public static Int2 TopMid(this IRect rect) TopRight(FRect) Declaration public static Float2 TopRight(this FRect rect) TopRight(IRect) Declaration public static Int2 TopRight(this IRect rect) TrimEnd_IfEndWith(string, string, params char[]) Declaration public static string TrimEnd_IfEndWith(this string str, string end, params char[] trimChars) TrimEnd_Numbers(string) Declaration public static string TrimEnd_Numbers(this string str) TrimEnd_NumbersEmpty(string) Declaration public static string TrimEnd_NumbersEmpty(this string str) TrimEnd_NumbersEmpty_(string) Declaration public static string TrimEnd_NumbersEmpty_(this string str) TrimStart_Numbers(string) Declaration public static string TrimStart_Numbers(this string str) TrimWhiteForStartAndEnd(string) Declaration public static string TrimWhiteForStartAndEnd(this string str) TryGetDirection8(Int2, out Direction8) Declaration public static bool TryGetDirection8(this Int2 dir, out Direction8 result) UCeil(int, int) Declaration public static int UCeil(this int value, int step) UCeil(float, float) Declaration public static float UCeil(this float value, float gap) UDivide(IRect, int) Declaration public static IRect UDivide(this IRect rect, int divide) UDivide(Int2, int) Declaration public static Int2 UDivide(this Int2 v, int gap) UDivide(int, int) Declaration public static int UDivide(this int value, int step) UFloor(int, int) Declaration public static int UFloor(this int value, int step) UFloor(float, float) Declaration public static float UFloor(this float value, float gap) UMod(int, int) Declaration public static int UMod(this int value, int step) UMod(long, long) Declaration public static long UMod(this long value, long step) UMod(float, float) Declaration public static float UMod(this float value, float gap) VerticalMidHalf(IRect) Declaration public static IRect VerticalMidHalf(this IRect rect) WithNewA(Color32, int) Declaration public static Color32 WithNewA(this Color32 value, int a) WithNewA(ColorF, float) Declaration public static ColorF WithNewA(this ColorF value, float a) WithNewHeight(IRect, int) Declaration public static IRect WithNewHeight(this IRect rect, int height) WithNewWidth(IRect, int) Declaration public static IRect WithNewWidth(this IRect rect, int width)"
  },
  "api/AngeliA.FRect.html": {
    "href": "api/AngeliA.FRect.html",
    "title": "Struct FRect | AngeliA",
    "summary": "Struct FRect Rectangle with float data Implements IEquatable<FRect> Constructors FRect(FRect) Declaration public FRect(FRect source) FRect(Float2, Float2) Declaration public FRect(Float2 position, Float2 size) FRect(float, float, float, float) Declaration public FRect(float x, float y, float width, float height) Fields height Vertical size Declaration public float height width Horizontal size Declaration public float width x Left position Declaration public float x y Bottom position Declaration public float y Properties center Declaration public Float2 center { readonly get; set; } max Declaration public Float2 max { readonly get; set; } min Declaration public Float2 min { readonly get; set; } position Declaration public Float2 position { readonly get; set; } size Declaration public Float2 size { readonly get; set; } xMax Declaration public float xMax { readonly get; set; } xMin Declaration public float xMin { readonly get; set; } yMax Declaration public float yMax { readonly get; set; } yMin Declaration public float yMin { readonly get; set; } Methods Contains(Float2) True if the given point inside this rectangle Declaration public readonly bool Contains(Float2 point) Equals(FRect) Indicates whether the current object is equal to another object of the same type. Declaration public readonly bool Equals(FRect other) Parameters Type Name Description FRect other An object to compare with this object. Returns Type Description bool true if the current object is equal to the other parameter; otherwise, false. Equals(object) Indicates whether this instance and a specified object are equal. Declaration public override readonly bool Equals(object other) Returns Type Description bool true if obj and this instance are the same type and represent the same value; otherwise, false. Overrides ValueType.Equals(object) GetHashCode() Returns the hash code for this instance. Declaration public override readonly int GetHashCode() Returns Type Description int A 32-bit signed integer that is the hash code for this instance. Overrides ValueType.GetHashCode() MinMaxRect(float, float, float, float) Create a rectangle from min and max positions Declaration public static FRect MinMaxRect(float xmin, float ymin, float xmax, float ymax) Overlaps(FRect) True if the given rectangle overlaps the current one Declaration public readonly bool Overlaps(FRect other) ToString() Returns the fully qualified type name of this instance. Declaration public override readonly string ToString() Returns Type Description string The fully qualified type name. Overrides ValueType.ToString() Operators operator ==(FRect, FRect) Declaration public static bool operator ==(FRect lhs, FRect rhs) operator !=(FRect, FRect) Declaration public static bool operator !=(FRect lhs, FRect rhs)"
  },
  "api/AngeliA.Face.html": {
    "href": "api/AngeliA.Face.html",
    "title": "Class Face | AngeliA",
    "summary": "Class Face Face gadget for pose characters Properties GadgetType Type of this body gadget Declaration public override sealed BodyGadgetType GadgetType { get; } Overrides BodyGadget.GadgetType SpriteLoaded True if artwork sprite is loaded Declaration public override bool SpriteLoaded { get; } Overrides BodyGadget.SpriteLoaded Methods DrawEye(CharacterFaceExpression, IRect, bool, bool, int) Draw one eye for pose-style character Declaration protected virtual void DrawEye(CharacterFaceExpression expression, IRect faceRect, bool leftEye, bool facingRight, int animationFrame) Parameters Type Name Description CharacterFaceExpression expression Current face expression IRect faceRect Rect position for the character's face bool leftEye True if this eye is the left eye bool facingRight True if the character is facing right DrawGadget(PoseCharacterRenderer) Render the gadget for the given character Declaration public override void DrawGadget(PoseCharacterRenderer renderer) Overrides BodyGadget.DrawGadget(PoseCharacterRenderer) DrawGadgetFromPool(PoseCharacterRenderer) Draw face gadget for given character Declaration public static void DrawGadgetFromPool(PoseCharacterRenderer renderer) DrawGadgetGizmos(IRect, Color32, int) Render the gadget as gizmos Declaration public override void DrawGadgetGizmos(IRect rect, Color32 tint, int z) Parameters Type Name Description IRect rect Global rect position Color32 tint Color tint int z Z position for sorting Overrides BodyGadget.DrawGadgetGizmos(IRect, Color32, int) DrawMouth(CharacterFaceExpression, IRect, bool, int) Draw mouth for pose-style character Declaration protected virtual void DrawMouth(CharacterFaceExpression expression, IRect faceRect, bool facingRight, int animationFrame) Parameters Type Name Description CharacterFaceExpression expression Current face expression IRect faceRect Rect position for the character's face bool facingRight True if the character is facing right DrawSpriteAsHumanEar(PoseCharacterRenderer, OrientedSprite, OrientedSprite, int, int) Draw two human style ears on both sides of the face Declaration public static void DrawSpriteAsHumanEar(PoseCharacterRenderer renderer, OrientedSprite spriteLeft, OrientedSprite spriteRight, int offsetXL = 0, int offsetXR = 0) Parameters Type Name Description PoseCharacterRenderer renderer Target character OrientedSprite spriteLeft Left ear sprite OrientedSprite spriteRight Right ear sprite int offsetXL Horizontal offset for left ear in global space int offsetXR Horizontal offset for right ear in global space FillFromSheet(string) Load sprite data from Renderer.CurrentSheet Declaration public override bool FillFromSheet(string keyword) Overrides BodyGadget.FillFromSheet(string) GetCurrentExpression(PoseCharacterRenderer) Declaration public static CharacterFaceExpression GetCurrentExpression(PoseCharacterRenderer renderer) GetFaceRect(PoseCharacterRenderer, out IRect) Get current rect position for the given character's face Declaration public IRect GetFaceRect(PoseCharacterRenderer renderer, out IRect headRect) GetScleraRect(PoseCharacterRenderer, bool) Get rect position of sclera part of the eye Declaration public IRect GetScleraRect(PoseCharacterRenderer renderer, bool leftEye) Parameters Type Name Description PoseCharacterRenderer renderer Target character bool leftEye True if the eye is left eye"
  },
  "api/AngeliA.FadeInTask.html": {
    "href": "api/AngeliA.FadeInTask.html",
    "title": "Class FadeInTask | AngeliA",
    "summary": "Class FadeInTask Task that fade the screen from black to normal Fields TYPE_ID Declaration public static readonly int TYPE_ID Methods FrameUpdate() This function is used to handle the internal logic. Declaration public override TaskResult FrameUpdate() Returns Type Description TaskResult \"Continue\" if the task should keep on after this frame. \"End\" if the task should end. Overrides Task.FrameUpdate()"
  },
  "api/AngeliA.FadeOutTask.html": {
    "href": "api/AngeliA.FadeOutTask.html",
    "title": "Class FadeOutTask | AngeliA",
    "summary": "Class FadeOutTask Task that fade the screen from normal to black Fields TYPE_ID Declaration public static readonly int TYPE_ID Methods FrameUpdate() This function is used to handle the internal logic. Declaration public override TaskResult FrameUpdate() Returns Type Description TaskResult \"Continue\" if the task should keep on after this frame. \"End\" if the task should end. Overrides Task.FrameUpdate()"
  },
  "api/AngeliA.FastNoiseGroup.html": {
    "href": "api/AngeliA.FastNoiseGroup.html",
    "title": "Class FastNoiseGroup | AngeliA",
    "summary": "Class FastNoiseGroup Constructors FastNoiseGroup(int) Declaration public FastNoiseGroup(int length) Fields Length Declaration public readonly int Length Properties this[int] Declaration public FastNoiseLite this[int index] { get; } SolidMax Declaration public float SolidMax { get; set; } SolidMin Declaration public float SolidMin { get; set; } Methods FillAltitude(int[,], float, float, float, float, float, out int) Declaration public void FillAltitude(int[,] altitude, float left, float down, float z, float deltaX, float deltaY, out int altitudeMax) GetCSharpCode(string) Declaration public string GetCSharpCode(string groupName) GetMatching(int) Declaration public NoiseMatching GetMatching(int index) GetNoise(float, float, float) Declaration public float GetNoise(float x, float y, float z) IsSolid(float) Declaration public bool IsSolid(float value) SetMatching(int, NoiseMatching) Declaration public void SetMatching(int index, NoiseMatching matching)"
  },
  "api/AngeliA.FileBrowserUI.html": {
    "href": "api/AngeliA.FileBrowserUI.html",
    "title": "Class FileBrowserUI | AngeliA",
    "summary": "Class FileBrowserUI Built-in file brower entity for PC only Implements IMapItem IWindowEntityUI Constructors FileBrowserUI() Declaration public FileBrowserUI() Properties BackgroundRect Rect position for background range in global space Declaration public IRect BackgroundRect { get; } BlockEvent True if this UI blocks mouse button event Declaration protected override bool BlockEvent { get; } Overrides EntityUI.BlockEvent CurrentFolder Path of the current browsing folder Declaration public string CurrentFolder { get; set; } CurrentName Name of the current selecting file/folder Declaration public string CurrentName { get; set; } Instance Global single instance for this class Declaration public static FileBrowserUI Instance { get; } SearchPatterns Files that will be display inside the content panel Declaration public string[] SearchPatterns { get; } ShowingBrowser True if the entity is currently displaying Declaration public static bool ShowingBrowser { get; } Title Title of the current window Declaration public string Title { get; set; } Methods BeforeUpdate() [2/4] This function is called every frame when entity is in stage. Prioritize using this function to update physics logic. Declaration public override void BeforeUpdate() Overrides Entity.BeforeUpdate() FirstUpdate() [1/4] This function is called every frame when entity is in stage. Prioritize using this function to fill collider in to physics system. Declaration public override void FirstUpdate() Overrides EntityUI.FirstUpdate() OnActivated() This function is called when entity enter the stage Declaration public override void OnActivated() Overrides Entity.OnActivated() OpenFile(string, Action<string>, params string[]) Start file browser for open an existing file Declaration public static void OpenFile(string title, Action<string> onFileOpen, params string[] searchPatterns) Parameters Type Name Description string title Title of the window Action<string> onFileOpen Callback function for a file being open string[] searchPatterns Which file should be display. eg.\".png\", \".jpg\" OpenFolder(string, Action<string>) Start file browser for open an existing folder Declaration public static void OpenFolder(string title, Action<string> onFolderOpen) Parameters Type Name Description string title Title of the window Action<string> onFolderOpen Callback function for a folder being open SaveFile(string, string, Action<string>, params string[]) Start file browser for create/save a file Declaration public static void SaveFile(string title, string defaultFileNameWithExt, Action<string> onFileSaved, params string[] searchPatterns) Parameters Type Name Description string title Title of the window string defaultFileNameWithExt Default name shown in the input field. eg. \"name.png\" Action<string> onFileSaved Callback function for the file being create/save string[] searchPatterns Which type of file is allowed be create/save. eg.\".png\", \".jpg\" SaveFolder(string, string, Action<string>) Start file browser for create/save a folder Declaration public static void SaveFolder(string title, string defaultFolderName, Action<string> onFolderSaved) Parameters Type Name Description string title Title of the window string defaultFolderName Default name shown in the input field Action<string> onFolderSaved Callback function for the folder being create/save UpdateUI() Declaration public override void UpdateUI() Overrides EntityUI.UpdateUI()"
  },
  "api/AngeliA.FittingPose.html": {
    "href": "api/AngeliA.FittingPose.html",
    "title": "Enum FittingPose | AngeliA",
    "summary": "Enum FittingPose Fields Name Description"
  },
  "api/AngeliA.Float2.html": {
    "href": "api/AngeliA.Float2.html",
    "title": "Struct Float2 | AngeliA",
    "summary": "Struct Float2 2D vector with float data values Implements IEquatable<Float2> Constructors Float2(float, float) 2D vector with float data values Declaration public Float2(float x, float y) Fields Down Declaration public static readonly Float2 Down Left Declaration public static readonly Float2 Left One Declaration public static readonly Float2 One Right Declaration public static readonly Float2 Right Up Declaration public static readonly Float2 Up Zero Declaration public static readonly Float2 Zero x Declaration public float x y Declaration public float y Properties this[int] Get float data inside with given index. (0 means x, 1 means y) Declaration public float this[int index] { readonly get; set; } Magnitude Length of this vector Declaration public readonly float Magnitude { get; } Normalized Get a vector that has a length of 1, while maintaining the same direction as the original vector. Declaration public readonly Float2 Normalized { get; } SqrMagnitude Square of the length of this vector Declaration public readonly float SqrMagnitude { get; } Methods Deconstruct(out float, out float) Declaration public readonly void Deconstruct(out float x, out float y) Distance(Float2, Float2) Distance between two given position Declaration public static float Distance(Float2 a, Float2 b) Dot(Float2, Float2) The dot product of two vectors returns a float value representing the cosine of the angle between them Declaration public static float Dot(Float2 a, Float2 b) Equals(Float2) Indicates whether the current object is equal to another object of the same type. Declaration public readonly bool Equals(Float2 other) Parameters Type Name Description Float2 other An object to compare with this object. Returns Type Description bool true if the current object is equal to the other parameter; otherwise, false. Equals(object) Indicates whether this instance and a specified object are equal. Declaration public override readonly bool Equals(object other) Returns Type Description bool true if obj and this instance are the same type and represent the same value; otherwise, false. Overrides ValueType.Equals(object) GetHashCode() Returns the hash code for this instance. Declaration public override readonly int GetHashCode() Returns Type Description int A 32-bit signed integer that is the hash code for this instance. Overrides ValueType.GetHashCode() Lerp(Float2, Float2, float) Find a value transform between two given float smoothly Declaration public static Float2 Lerp(Float2 a, Float2 b, float t) float t Representation of the position. 0 means value A, 1 means value B. LerpUnclamped(Float2, Float2, float) Find a value transform between two given float smoothly without limit the t value Declaration public static Float2 LerpUnclamped(Float2 a, Float2 b, float t) float t Representation of the position. 0 means value A, 1 means value B. MoveTowards(Float2, Float2, float) Moves a point towards the target with distance limitation Declaration public static Float2 MoveTowards(Float2 current, Float2 target, float maxDistanceDelta) Parameters Type Name Description Float2 current Starting position Float2 target Target end position float maxDistanceDelta Distance limit Returns Type Description Float2 The new position Normalize() Make the vector have length of 1 while maintaining the same direction as original. Declaration public void Normalize() Set(float, float) Set both values of this vector Declaration public void Set(float newX, float newY) SignedAngle(Float2, Float2) Signed angle in degrees between from and to Declaration public static float SignedAngle(Float2 from, Float2 to) ToString() Returns the fully qualified type name of this instance. Declaration public override readonly string ToString() Returns Type Description string The fully qualified type name. Overrides ValueType.ToString() Operators operator +(Float2, Float2) Declaration public static Float2 operator +(Float2 a, Float2 b) operator /(Float2, Float2) Declaration public static Float2 operator /(Float2 a, Float2 b) operator /(Float2, float) Declaration public static Float2 operator /(Float2 a, float d) operator ==(Float2, Float2) Declaration public static bool operator ==(Float2 lhs, Float2 rhs) explicit operator Float2(Float3) Declaration public static explicit operator Float2(Float3 v) implicit operator Float3(Float2) Declaration public static implicit operator Float3(Float2 v) operator !=(Float2, Float2) Declaration public static bool operator !=(Float2 lhs, Float2 rhs) operator *(Float2, Float2) Declaration public static Float2 operator *(Float2 a, Float2 b) operator *(Float2, float) Declaration public static Float2 operator *(Float2 a, float d) operator *(float, Float2) Declaration public static Float2 operator *(float d, Float2 a) operator -(Float2, Float2) Declaration public static Float2 operator -(Float2 a, Float2 b) operator -(Float2) Declaration public static Float2 operator -(Float2 a)"
  },
  "api/AngeliA.Float3.html": {
    "href": "api/AngeliA.Float3.html",
    "title": "Struct Float3 | AngeliA",
    "summary": "Struct Float3 3D vector with float data values Implements IEquatable<Float3> Constructors Float3(float, float) 3D vector with float data values. z = 0 Declaration public Float3(float x, float y) Float3(float, float, float) 3D vector with float data values Declaration public Float3(float x, float y, float z) Fields Back Declaration public static readonly Float3 Back Down Declaration public static readonly Float3 Down Forward Declaration public static readonly Float3 Forward Left Declaration public static readonly Float3 Left One Declaration public static readonly Float3 One Right Declaration public static readonly Float3 Right Up Declaration public static readonly Float3 Up Zero Declaration public static readonly Float3 Zero x Declaration public float x y Declaration public float y z Declaration public float z Properties this[int] Get float data inside with given index. (0 means x, 1 means y, 2 means z) Declaration public float this[int index] { readonly get; set; } Magnitude Length of this vector Declaration public readonly float Magnitude { get; } Normalized Get a vector that has a length of 1, while maintaining the same direction as the original vector. Declaration public readonly Float3 Normalized { get; } SqrMagnitude Square of the length of this vector Declaration public readonly float SqrMagnitude { get; } Methods Angle(Float3, Float3) Angle in degrees between from and to Declaration public static float Angle(Float3 from, Float3 to) Deconstruct(out float, out float, out float) Declaration public readonly void Deconstruct(out float x, out float y, out float z) Distance(Float3, Float3) Distance between to points Declaration public static float Distance(Float3 a, Float3 b) Dot(Float3, Float3) The dot product of two vectors returns a float value representing the cosine of the angle between them Declaration public static float Dot(Float3 lhs, Float3 rhs) Equals(Float3) Indicates whether the current object is equal to another object of the same type. Declaration public readonly bool Equals(Float3 other) Parameters Type Name Description Float3 other An object to compare with this object. Returns Type Description bool true if the current object is equal to the other parameter; otherwise, false. Equals(object) Indicates whether this instance and a specified object are equal. Declaration public override readonly bool Equals(object other) Returns Type Description bool true if obj and this instance are the same type and represent the same value; otherwise, false. Overrides ValueType.Equals(object) GetHashCode() Returns the hash code for this instance. Declaration public override readonly int GetHashCode() Returns Type Description int A 32-bit signed integer that is the hash code for this instance. Overrides ValueType.GetHashCode() Lerp(Float3, Float3, float) Find a value transform between two given float smoothly Declaration public static Float3 Lerp(Float3 a, Float3 b, float t) float t Representation of the position. 0 means value A, 1 means value B. LerpUnclamped(Float3, Float3, float) Find a value transform between two given float smoothly without limit the t value Declaration public static Float3 LerpUnclamped(Float3 a, Float3 b, float t) float t Representation of the position. 0 means value A, 1 means value B. MoveTowards(Float3, Float3, float) Moves a point towards the target with distance limitation Declaration public static Float3 MoveTowards(Float3 current, Float3 target, float maxDistanceDelta) Parameters Type Name Description Float3 current Starting position Float3 target Target end position float maxDistanceDelta Distance limit Returns Type Description Float3 The new position Normalize() Make the vector have length of 1 while maintaining the same direction as original. Declaration public void Normalize() Normalize(Float3) Declaration public static Float3 Normalize(Float3 value) Set(float, float, float) Set all values of this vector Declaration public void Set(float newX, float newY, float newZ) SignedAngle(Float3, Float3, Float3) Signed angle in degrees between from and to in axis Declaration public static float SignedAngle(Float3 from, Float3 to, Float3 axis) ToString() Returns the fully qualified type name of this instance. Declaration public override readonly string ToString() Returns Type Description string The fully qualified type name. Overrides ValueType.ToString() Operators operator +(Float3, Float3) Declaration public static Float3 operator +(Float3 a, Float3 b) operator /(Float3, float) Declaration public static Float3 operator /(Float3 a, float d) operator ==(Float3, Float3) Declaration public static bool operator ==(Float3 lhs, Float3 rhs) operator !=(Float3, Float3) Declaration public static bool operator !=(Float3 lhs, Float3 rhs) operator *(Float3, float) Declaration public static Float3 operator *(Float3 a, float d) operator *(float, Float3) Declaration public static Float3 operator *(float d, Float3 a) operator -(Float3, Float3) Declaration public static Float3 operator -(Float3 a, Float3 b) operator -(Float3) Declaration public static Float3 operator -(Float3 a)"
  },
  "api/AngeliA.Float4.html": {
    "href": "api/AngeliA.Float4.html",
    "title": "Struct Float4 | AngeliA",
    "summary": "Struct Float4 4D vector with float data values Implements IEquatable<Float4> Constructors Float4(float, float, float, float) Declaration public Float4(float x, float y, float z, float w) Fields One Declaration public static readonly Float4 One Zero Declaration public static readonly Float4 Zero w Declaration public float w x Declaration public float x y Declaration public float y z Declaration public float z Properties this[int] Declaration public float this[int index] { readonly get; set; } Magnitude Declaration public readonly float Magnitude { get; } Normalized Declaration public readonly Float4 Normalized { get; } SqrMagnitude Declaration public readonly float SqrMagnitude { get; } Methods Deconstruct(out float, out float, out float, out float) Declaration public readonly void Deconstruct(out float x, out float y, out float z, out float w) Equals(Float4) Indicates whether the current object is equal to another object of the same type. Declaration public readonly bool Equals(Float4 other) Parameters Type Name Description Float4 other An object to compare with this object. Returns Type Description bool true if the current object is equal to the other parameter; otherwise, false. Equals(object) Indicates whether this instance and a specified object are equal. Declaration public override readonly bool Equals(object other) Returns Type Description bool true if obj and this instance are the same type and represent the same value; otherwise, false. Overrides ValueType.Equals(object) GetHashCode() Returns the hash code for this instance. Declaration public override readonly int GetHashCode() Returns Type Description int A 32-bit signed integer that is the hash code for this instance. Overrides ValueType.GetHashCode() Normalize(Float4) Declaration public static Float4 Normalize(Float4 a) ToString() Returns the fully qualified type name of this instance. Declaration public override readonly string ToString() Returns Type Description string The fully qualified type name. Overrides ValueType.ToString() Operators operator +(Float4, Float4) Declaration public static Float4 operator +(Float4 a, Float4 b) operator /(Float4, float) Declaration public static Float4 operator /(Float4 a, float d) operator ==(Float4, Float4) Declaration public static bool operator ==(Float4 lhs, Float4 rhs) implicit operator Float4(Float2) Declaration public static implicit operator Float4(Float2 v) implicit operator Float4(Float3) Declaration public static implicit operator Float4(Float3 v) implicit operator Float2(Float4) Declaration public static implicit operator Float2(Float4 v) implicit operator Float3(Float4) Declaration public static implicit operator Float3(Float4 v) operator !=(Float4, Float4) Declaration public static bool operator !=(Float4 lhs, Float4 rhs) operator *(Float4, float) Declaration public static Float4 operator *(Float4 a, float d) operator *(float, Float4) Declaration public static Float4 operator *(float d, Float4 a) operator -(Float4, Float4) Declaration public static Float4 operator -(Float4 a, Float4 b) operator -(Float4) Declaration public static Float4 operator -(Float4 a)"
  },
  "api/AngeliA.FontData.html": {
    "href": "api/AngeliA.FontData.html",
    "title": "Class FontData | AngeliA",
    "summary": "Class FontData Fields BuiltIn Declaration public bool BuiltIn FileModifyDate Declaration public long FileModifyDate ID Declaration public int ID Name Declaration public string Name Path Declaration public string Path Scale Declaration public float Scale Size Declaration public int Size Methods GetFontRealName(string) Declaration public static string GetFontRealName(string fontNameWithHashTag) LoadData(string) Declaration public abstract void LoadData(string filePath) LoadFromFile(string, bool) Declaration public bool LoadFromFile(string fontPath, bool builtIn) TryGetCharSprite(char, out CharSprite) Declaration public abstract bool TryGetCharSprite(char c, out CharSprite result) Unload() Declaration public abstract void Unload()"
  },
  "api/AngeliA.FontScope.html": {
    "href": "api/AngeliA.FontScope.html",
    "title": "Struct FontScope | AngeliA",
    "summary": "Struct FontScope Scope that makes labels inside display with given font Implements IDisposable Examples using AngeliA; namespace AngeliaGame; public class Example { [OnGameUpdate] internal static void OnGameUpdate () { int fontID = /*Your font ID here*/; using (new FontScope(fontID)) { // Labels inside will be display with the given font } } } Constructors FontScope(int) Scope that makes labels inside display with given font Declaration public FontScope(int fontID) Methods Dispose() Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources. Declaration public void Dispose()"
  },
  "api/AngeliA.Food.html": {
    "href": "api/AngeliA.Food.html",
    "title": "Class Food | AngeliA",
    "summary": "Class Food Item that represent food Implements IMapItem Properties MaxStackCount Count limitation for multiple items inside one inventory slot Declaration public override int MaxStackCount { get; } Overrides Item.MaxStackCount"
  },
  "api/AngeliA.FootCloth.html": {
    "href": "api/AngeliA.FootCloth.html",
    "title": "Class FootCloth | AngeliA",
    "summary": "Class FootCloth Shoes of a pose-style character Properties ClothType Where should characters wear this cloth Declaration public override sealed ClothType ClothType { get; } Overrides Cloth.ClothType SpriteLoaded True if the artwork sprites are loaded Declaration public override bool SpriteLoaded { get; } Overrides Cloth.SpriteLoaded Methods DrawCloth(PoseCharacterRenderer) Draw cloth for the given character Declaration public override void DrawCloth(PoseCharacterRenderer renderer) Overrides Cloth.DrawCloth(PoseCharacterRenderer) DrawClothForFoot(PoseCharacterRenderer, OrientedSprite, OrientedSprite, int) Draw given artwork sprite as shoes for given character Declaration public static void DrawClothForFoot(PoseCharacterRenderer renderer, OrientedSprite spriteLeft, OrientedSprite spriteRight, int localZ = 1) Parameters Type Name Description PoseCharacterRenderer renderer Target character OrientedSprite spriteLeft Artwork sprite for left shoe OrientedSprite spriteRight Artwork sprite for right shoe int localZ Z value for sorting rendering cells DrawClothFromPool(PoseCharacterRenderer) Draw shoes for given character from system pool Declaration public static void DrawClothFromPool(PoseCharacterRenderer renderer) DrawClothGizmos(IRect, Color32, int) Draw cloth as gizmos Declaration public override void DrawClothGizmos(IRect rect, Color32 tint, int z) Parameters Type Name Description IRect rect Rect position in global space Color32 tint Color tint int z Z value for sort rendering cell Overrides Cloth.DrawClothGizmos(IRect, Color32, int) FillFromSheet(string) Load sprite data from Renderer.CurrentSheet Declaration public override bool FillFromSheet(string name) Overrides Cloth.FillFromSheet(string)"
  },
  "api/AngeliA.FrameBasedBool.html": {
    "href": "api/AngeliA.FrameBasedBool.html",
    "title": "Class FrameBasedBool | AngeliA",
    "summary": "Class FrameBasedBool A data that can be override for specified frames Constructors FrameBasedBool() Declaration public FrameBasedBool() FrameBasedBool(bool) A data that can be override for specified frames Declaration public FrameBasedBool(bool value) Methods And(bool, int, int) Declaration public void And(bool value, int duration = 0, int priority = 0) False(int, int) Declaration public void False(int duration = 0, int priority = 0) Or(bool, int, int) Declaration public void Or(bool value, int duration = 0, int priority = 0) True(int, int) Declaration public void True(int duration = 0, int priority = 0) Operators implicit operator bool(FrameBasedBool) Declaration public static implicit operator bool(FrameBasedBool bBool)"
  },
  "api/AngeliA.FrameBasedColor.html": {
    "href": "api/AngeliA.FrameBasedColor.html",
    "title": "Class FrameBasedColor | AngeliA",
    "summary": "Class FrameBasedColor A data that can be override for specified frames Constructors FrameBasedColor() Declaration public FrameBasedColor() FrameBasedColor(Color32) A data that can be override for specified frames Declaration public FrameBasedColor(Color32 value) Methods Tint(Color32, int, int) Declaration public void Tint(Color32 tint, int duration = 0, int priority = 0) Operators implicit operator Color32(FrameBasedColor) Declaration public static implicit operator Color32(FrameBasedColor bColor)"
  },
  "api/AngeliA.FrameBasedInt.html": {
    "href": "api/AngeliA.FrameBasedInt.html",
    "title": "Class FrameBasedInt | AngeliA",
    "summary": "Class FrameBasedInt A data that can be override for specified frames Constructors FrameBasedInt() Declaration public FrameBasedInt() FrameBasedInt(int) A data that can be override for specified frames Declaration public FrameBasedInt(int value) Methods Add(int, int, int) Declaration public void Add(int delta, int duration = 0, int priority = 0) Max(int, int, int) Declaration public void Max(int value, int duration = 0, int priority = 0) Min(int, int, int) Declaration public void Min(int value, int duration = 0, int priority = 0) Multiply(int, int, int) Declaration public void Multiply(int scale, int duration = 0, int priority = 0) Operators implicit operator int(FrameBasedInt) Declaration public static implicit operator int(FrameBasedInt bInt)"
  },
  "api/AngeliA.FrameBasedValue-1.html": {
    "href": "api/AngeliA.FrameBasedValue-1.html",
    "title": "Class FrameBasedValue<T> | AngeliA",
    "summary": "Class FrameBasedValue<T> A data that can be override for specified frames Constructors FrameBasedValue() Declaration public FrameBasedValue() FrameBasedValue(T) Declaration public FrameBasedValue(T value) Fields BaseValue Declaration public T BaseValue OverrideValue Declaration public T OverrideValue Properties FinalValue Declaration public T FinalValue { get; } Methods Override(T, int, int) Declaration public void Override(T value, int duration = 0, int priority = 0) ToString() Returns a string that represents the current object. Declaration public override string ToString() Returns Type Description string A string that represents the current object. Overrides object.ToString()"
  },
  "api/AngeliA.FrameBasedValue.html": {
    "href": "api/AngeliA.FrameBasedValue.html",
    "title": "Class FrameBasedValue | AngeliA",
    "summary": "Class FrameBasedValue A data that can be override for specified frames Fields OverrideFrame Declaration public int OverrideFrame OverridePriority Declaration public int OverridePriority Properties Overrided Declaration public bool Overrided { get; } Methods ClearOverride() Declaration public void ClearOverride()"
  },
  "api/AngeliA.FrameworkUtil.html": {
    "href": "api/AngeliA.FrameworkUtil.html",
    "title": "Class FrameworkUtil | AngeliA",
    "summary": "Class FrameworkUtil Utility class for the AngeliA framework Fields GAMEPAD_CODE ID of artwork sprite for gamepad button icons Declaration public static readonly Dictionary<GamepadKey, int> GAMEPAD_CODE RUN_CODE_ANALYSIS_SETTING_ID For remote setting between engine and rigged game Declaration public const int RUN_CODE_ANALYSIS_SETTING_ID = 895245367 RUN_CODE_ANALYSIS_SETTING_SILENTLY_ID For remote setting between engine and rigged game Declaration public const int RUN_CODE_ANALYSIS_SETTING_SILENTLY_ID = 895245368 Methods BlockRuleToDigit(BlockRule) Convert BlockRule struct into auto tiling rule digit Declaration public static int BlockRuleToDigit(BlockRule ruleStr) BreakEntityBlock(IBlockEntity) Remove given block entity from map and invoke corresponding callback functions. (Do not handle item drops) Declaration public static bool BreakEntityBlock(IBlockEntity eBlock) BroadcastBuff(IRect, int, int) Give buff for all buff holder in given rectangle range Declaration public static void BroadcastBuff(IRect range, int buffID, int duration = 1) BroadcastBuff(int, int, int, int, int) Give buff for all buff holder in given circle range Declaration public static void BroadcastBuff(int x, int y, int radius, int buffID, int duration = 1) ClampCells(Cell[], IRect, int, int) Declaration public static void ClampCells(Cell[] cells, IRect rect, int startIndex, int endIndex) ClampCells(Span<Cell>, IRect, int, int) Declaration public static void ClampCells(Span<Cell> cells, IRect rect, int startIndex, int endIndex) DeleteAllEmptyMaps(string) Declaration public static void DeleteAllEmptyMaps(string mapRoot) DigitToBlockRule(int) Convert auto tiling rule digit into BlockRule struct Declaration public static BlockRule DigitToBlockRule(int digit) DigitToRuleByte(int, byte[]) Convert auto tiling rule digit into byte array Declaration public static void DigitToRuleByte(int digit, byte[] bytes) DrawAllCollidersAsGizmos(int, Int2, float, bool, bool, bool, bool, Color32[]) Display current physics colliders with game gizmos functions Declaration public static void DrawAllCollidersAsGizmos(int physicsMask = 31, Int2 offset = default, float brightness = 1, bool ignoreNonOnewayTrigger = false, bool ignoreOnewayTrigger = false, bool useTechEffect = false, bool drawVelocity = false, Color32[] layerTints = null) Parameters Type Name Description int physicsMask Which physics layers are included Int2 offset Position offset for all gizmos float brightness 0 means dark, 1 means normal color bool ignoreNonOnewayTrigger True if triggers that is not oneway gate are excluded bool ignoreOnewayTrigger True if oneway gates are excluded bool useTechEffect True if the gizmos glitchs bool drawVelocity True if draw the current velocity for rigidbody Color32[] layerTints Color for specified layers. Set to null to use default. DrawClockHands(IRect, int, int, int, Color32, int) Draw clock hands from in-game time Declaration public static void DrawClockHands(IRect rect, int handCode, int thickness, int thicknessSecond, Color32 tint, int z = -2147483648) Parameters Type Name Description IRect rect Rect position for clock face in global space int handCode Artwork sprite ID for the hand Color32 tint Color tint int z Z value for sort rendering cells DrawClockHands(int, int, int, int, int, int, Color32, int) Draw clock hands from in-game time Declaration public static void DrawClockHands(int centerX, int centerY, int radius, int handCode, int thickness, int thicknessSecond, Color32 tint, int z = -2147483648) Parameters Type Name Description int centerX Center position in global space int centerY Center position in global space int radius Radius of the clock face int handCode Artwork sprite ID for the hand Color32 tint Color tint int z Z value for sort rendering cells DrawClockPendulum(int, int, int, int, int, int, int, int, int) Draw the pendulum for clocks Declaration public static void DrawClockPendulum(int artCodeLeg, int artCodeHead, int x, int y, int length, int thickness, int headSize, int maxRot, int deltaX = 0) Parameters Type Name Description int artCodeLeg Artwork sprite ID for the long handle part int artCodeHead Artwork sprite ID for the head on the edge int x Center position in global space int y Center position in global space int length Length of the pendulum in global space int thickness Thichness of the leg in global space int headSize Size of the head in global space int maxRot Rotation amount int deltaX Extra position shift amount DrawEnvironmentShadow(Cell, int, int, byte, int) Draw a shadow for given rendering cell Declaration public static Cell DrawEnvironmentShadow(Cell source, int offsetX = -64, int offsetY = 0, byte alpha = 64, int z = -65520) Parameters Type Name Description Cell source Target rendering cell int offsetX Position offset X in global space int offsetY Position offset Y in global space int z Position Z for the shadow Returns Type Description Cell Rendering cell of the shadow DrawFrozenEffect(IRect, byte, int, Int2, int, int, int) Draw effect for frozen zone Declaration public static void DrawFrozenEffect(IRect rect, byte alpha, int count = 32, Int2 offset = default, int seed = 0, int size = 142, int z = 0) Parameters Type Name Description IRect rect Position range in global space int count Particle count at same time Int2 offset Position offset int seed Seed to generate random value int size Size of a single particle int z Z value to sort rendering cells DrawItemUsageBar(IRect, int, int) Draw usage bar UI Declaration public static void DrawItemUsageBar(IRect rect, int usage, int maxUsage) Parameters Type Name Description IRect rect Rect position in global space DrawLightenEffect(int, IRect, int, int) Draw effect for electric light coming out of an object Declaration public static void DrawLightenEffect(int spriteID, IRect rect, int count = 2, int size = 196) Parameters Type Name Description int spriteID Artwork sprite ID for a single lighten IRect rect Position range in global space int count Count of sprite at same time int size Size of a single sprite DrawLoopingActivatedHighlight(IRect, Color32, int, int) Draw a highlight effect Declaration public static void DrawLoopingActivatedHighlight(IRect targetRect, Color32 tint, int lineCount = 4, int duration = 22) Parameters Type Name Description IRect targetRect Rect position in global space Color32 tint Color tint int duration Duration in frame for a single loop DrawLoopingTriangleMark(IRect, int, Color32, Direction4, int, int, int, int) Draw a direction mark with looping moving triangles Declaration public static void DrawLoopingTriangleMark(IRect range, int frame, Color32 tint, Direction4 direction, int count, int size, int z, int speed) Parameters Type Name Description IRect range Rect position in global space int frame Current animation frame Color32 tint Color tint int count Triangle count int size Triangle size int z Z value for sort rendering cells int speed Moving speed of the triangle DrawOnFireEffect(int, IRect, int, int, int, int, int) Draw effect for object on fire Declaration public static void DrawOnFireEffect(int spriteID, IRect rect, int count = 2, int loop = 40, int size = 200, int seed = 0, int z = 2147483647) Parameters Type Name Description int spriteID Artwork sprite ID IRect rect Rect range in global space int count Rendering sprite count at same time int loop Duration for a single loop int size Size of a single sprite int seed Seed to generate random value int z Z value for sort rendering cells DrawPoisonEffect(int, IRect, int, int, int, int, int) Draw effect for object being poisoned Declaration public static void DrawPoisonEffect(int spriteID, IRect rect, int loop = 120, int count = 4, int seed = 0, int size = 132, int z = 2147483647) Parameters Type Name Description int spriteID Artwork sprite ID IRect rect Rect range in global space int loop Duration of a single animation loop int count Count of sprites at same time int seed Seed to generate random value int size Size of a single particle in global space int z Z value for sort rendering cells DrawPoseCharacterAsUI(IRect, PoseCharacterRenderer, int) Display target pose-styled character as UI (like the character preview in player menu) Declaration public static bool DrawPoseCharacterAsUI(IRect rect, PoseCharacterRenderer renderer, int animationFrame) Parameters Type Name Description IRect rect Rect position to display the UI in global space PoseCharacterRenderer renderer Target character int animationFrame Current frame for animation Returns Type Description bool True if the character is rendered DrawPoseCharacterAsUI(IRect, PoseCharacterRenderer, int, out IRect, out IRect) Display target pose-styled character as UI (like the character preview in player menu) Declaration public static bool DrawPoseCharacterAsUI(IRect rect, PoseCharacterRenderer renderer, int animationFrame, out IRect globalRect, out IRect uiRect) Parameters Type Name Description IRect rect Rect position to display the UI in global space PoseCharacterRenderer renderer Target character int animationFrame Current frame for animation Returns Type Description bool True if the character is rendered ForAllExistsWorldInRange(IBlockSquad, IRect, int, out int) Find all existing world position that overlap the given range. (256 results in maximal) Declaration public static Int3[] ForAllExistsWorldInRange(IBlockSquad squad, IRect overlapUnitRange, int z, out int count) Parameters Type Name Description IBlockSquad squad Source of the world instance IRect overlapUnitRange Target range in unit space int z Position Z int count How many result is founded Returns Type Description Int3[] Array that holds the result ForAllWorldInRange(IRect, int, out int) Find all world position that overlap the given range. (256 results in maximal) Declaration public static Int3[] ForAllWorldInRange(IRect overlapUnitRange, int z, out int count) Parameters Type Name Description IRect overlapUnitRange Target range in unit space int z Position Z int count How many result is founded Returns Type Description Int3[] Array that holds the result GetAimingBuilderPositionFromKey(Character, BlockType, out int, out int, out bool, bool) Get aiming position for block building target with keyboard keys Declaration public static bool GetAimingBuilderPositionFromKey(Character holder, BlockType blockType, out int targetUnitX, out int targetUnitY, out bool requireEmbedAsElement, bool ignoreValid = false) Parameters Type Name Description Character holder Character that using the tool BlockType blockType Type of building block int targetUnitX Result position in unit space int targetUnitY Result position in unit space bool requireEmbedAsElement True if this block can be embed into other block bool ignoreValid Set to true to skip block building validation Returns Type Description bool True if valid position is founded GetAimingBuilderPositionFromMouse(Character, BlockType, out int, out int, out bool) Get aiming position for block building target with mouse Declaration public static bool GetAimingBuilderPositionFromMouse(Character holder, BlockType blockType, out int targetUnitX, out int targetUnitY, out bool requireEmbedAsElement) Parameters Type Name Description Character holder Character that using the tool BlockType blockType Type of building block int targetUnitX Result position in unit space int targetUnitY Result position in unit space bool requireEmbedAsElement True if this block can be embed into other block Returns Type Description bool True if the target is founded GetAimingPickerPositionFromKey(Character, out int, out int, bool, bool, bool) Get aiming position for block picking target with keyboard keys Declaration public static bool GetAimingPickerPositionFromKey(Character pHolder, out int targetUnitX, out int targetUnitY, bool allowPickBlockEntity = true, bool allowPickLevelBlock = true, bool allowPickBackgroundBlock = true) Parameters Type Name Description Character pHolder Character that using the tool int targetUnitX Result position in unit space int targetUnitY Result position in unit space bool allowPickBlockEntity True if the tool can pick entity blocks bool allowPickLevelBlock True if the tool can pick level blocks bool allowPickBackgroundBlock True if the tool can pick background blocks Returns Type Description bool True if valid position is founded GetAimingPickerPositionFromMouse(Character, int, out int, out int, out bool, bool, bool, bool) Get aiming position for block picking target with mouse Declaration public static bool GetAimingPickerPositionFromMouse(Character holder, int unitRange, out int targetUnitX, out int targetUnitY, out bool inRange, bool allowPickBlockEntity = true, bool allowPickLevelBlock = true, bool allowPickBackgroundBlock = true) Parameters Type Name Description Character holder Character that using the tool int unitRange Range limitation in unit space int targetUnitX Result position in unit space int targetUnitY Result position in unit space bool inRange True if the current mouse cursor is in range bool allowPickBlockEntity True if the tool can pick entity blocks bool allowPickLevelBlock True if the tool can pick level blocks bool allowPickBackgroundBlock True if the tool can pick background blocks Returns Type Description bool True if valid position is founded GetBlockRealName(string) Get name of a map block without hashtags Declaration public static string GetBlockRealName(string name) GetEntityPose(Entity, bool, int, out Entity, out Entity) Get FittingPose for given entity type from WorldSquad and stage. Declaration public static FittingPose GetEntityPose(Entity entity, bool horizontal, int mask, out Entity left_down, out Entity right_up) Parameters Type Name Description Entity entity Target entity bool horizontal True if the entity fits horizontaly int mask Physics layers to get the entity instance Entity left_down Nearby entity instance at left/down Entity right_up Nearby entity instance at right/up GetEntityPose(int, int, int, bool) Get FittingPose for given position and entity ID from WorldSquad. eg. 3 mushroom entities makes a tall mushroom, only the top one is the cap. So your entity renders as cap only when the fitting pose is FittingPose.Up. Declaration public static FittingPose GetEntityPose(int typeID, int unitX, int unitY, bool horizontal) Parameters Type Name Description int typeID Type of the target entity int unitX Target position X in unit space int unitY Target position Y in unit space bool horizontal True if the entity fits horizontaly GetFlyingFormation(Int2, int, int) Get position for flying entities Declaration public static Int2 GetFlyingFormation(Int2 pos, int column, int instanceIndex) Parameters Type Name Description Int2 pos Center position int column Column of the current element int instanceIndex Local index of the current element Returns Type Description Int2 Final position of this element GetFrameAmortizedValue(int, int) Used to calculate acceleration with intager. eg. When value is 2000, it means 2 unit every frame. When value is 500, it means 1 unit every 2 frames. Declaration public static int GetFrameAmortizedValue(int value1000, int frame = -2147483648) GetGameKeyLabel(Gamekey) Get display name for given game-key. Declaration public static string GetGameKeyLabel(Gamekey key) GetGroupInfoFromSpriteRealName(string, out string, out int) Get sprite group infomation from the name of artwork sprite Declaration public static bool GetGroupInfoFromSpriteRealName(string realName, out string groupName, out int groupIndex) Parameters Type Name Description string realName Name without hashtags string groupName Name without index int groupIndex Index in group Returns Type Description bool True if the data successfuly calculated GetItemTypeIcon(int) Get type icon artwork sprite ID for given item Declaration public static int GetItemTypeIcon(int itemID) GetOnewayTag(Direction4) Get tag for oneway gate that facing to given direction Declaration public static Tag GetOnewayTag(Direction4 gateDirection) GetPlayerHoldingHandTool() Get global single instance of the handtool that player currently equipping Declaration public static HandTool GetPlayerHoldingHandTool() GetRuleIndex(IList<AngeSprite>, int, int, int, int, int, int, int, int, int) Find which tile in the given list conforms the auto tiling rule Declaration public static int GetRuleIndex(IList<AngeSprite> sprites, int ruleDigit, int tl, int tm, int tr, int ml, int mr, int bl, int bm, int br) Parameters Type Name Description IList<AngeSprite> sprites Source list int ruleDigit Int data of the tiling rule. Get this data with FrameworkUtil.BlockRuleToDigit int tl ID for block at top-left int tm ID for block at top int tr ID for block at top-right int ml ID for block at left int mr ID for block at right int bl ID for block at bottom-left int bm ID for block at bottom int br ID for block at bottom-right Returns Type Description int Index of the founded sprite GetScaledAudioVolume(int, int) Scale the given audio volume Declaration public static float GetScaledAudioVolume(int volume, int scale = 1000) int scale 0 means 0%, 1000 means 100% GetSpriteInfoFromName(string, out string, out bool, out Tag, out BlockRule, out bool, out int, out int, out int?, out int?) Get infomation from naming tag of an artwork sprite Declaration public static void GetSpriteInfoFromName(string name, out string realName, out bool isTrigger, out Tag tag, out BlockRule rule, out bool noCollider, out int offsetZ, out int aniDuration, out int? pivotX, out int? pivotY) Parameters Type Name Description string name Full name of the artwork sprite string realName Name without hashtag bool isTrigger True if this sprite is trigger Tag tag Tag value of this sprite BlockRule rule Rule for auto tiling in map editor bool noCollider True if this sprite ignore collider int offsetZ Z value for sort rendering cells int aniDuration Duration in frame for animation GetSummaryTint(Color32[]) Get average color of given pixels Declaration public static Color32 GetSummaryTint(Color32[] pixels) GiveBuffFromMap(IWithCharacterBuff, int, int, int, int) Try get buff from map element at given unit position Declaration public static void GiveBuffFromMap(IWithCharacterBuff wBuff, int unitX = -2147483648, int unitY = -2147483648, int unitZ = -2147483648, int duration = -1) HasOnewayTag(Tag) True if the given tag contains oneway gate tag. Declaration public static bool HasOnewayTag(Tag tag) HasPickableBlockAt(int, int, bool, bool, bool) True if found any block can be pick at given position Declaration public static bool HasPickableBlockAt(int unitX, int unitY, bool allowPickBlockEntity = true, bool allowPickLevelBlock = true, bool allowPickBackgroundBlock = true) Parameters Type Name Description int unitX Target position X in unit space int unitY Target position Y in unit space bool allowPickBlockEntity True if entity blocks will be picked bool allowPickLevelBlock True if level blocks will be picked bool allowPickBackgroundBlock True if background blocks will be picked HasSystemNumber(IBlockSquad, int, int, int) True if there is system number at given position Declaration public static bool HasSystemNumber(IBlockSquad squad, int unitX, int unitY, int z) Parameters Type Name Description IBlockSquad squad Source of the map blocks int unitX Target position X in unit space int unitY Target position Y in unit space int z Position Z HighlightBlink(Cell, float, float, bool, bool) Blink the given cell for action target highlighting Declaration public static void HighlightBlink(Cell cell, float pivotX = 0.5, float pivotY = 0, bool horizontal = true, bool vertical = true) bool horizontal True if the target attached with nearby entity in left or right bool vertical True if the target attached with nearby entity in up or down InvokeBlockPicked(int, IRect) Invoke function for map block get picked Declaration public static void InvokeBlockPicked(int spriteID, IRect rect) Parameters Type Name Description int spriteID Artwork sprite ID IRect rect Starting rect position in global space InvokeCameOutOfWater(Rigidbody, Entity) Invoke function for object get out of water Declaration public static void InvokeCameOutOfWater(Rigidbody rig, Entity water) Parameters Type Name Description Rigidbody rig Target object Entity water Water entity instance. Null if water is from map block InvokeCheatPerformed(string) Invoke function for a cheat code get performed Declaration public static void InvokeCheatPerformed(string cheatCode) Parameters Type Name Description string cheatCode The performed cheat code InvokeErrorHint(Entity, int) Invoke animation hint for error Declaration public static void InvokeErrorHint(Entity holder, int id) Parameters Type Name Description Entity holder Entity that get the error int id Artwork sprite ID for the icon inside InvokeErrorHint(int, int, int) Invoke animation hint for error Declaration public static void InvokeErrorHint(int x, int y, int id) Parameters Type Name Description int x Position in global space int y Position in global space int id Artwork sprite ID for the icon inside InvokeFallIntoWater(Rigidbody, Entity) Invoke function for object get into water Declaration public static void InvokeFallIntoWater(Rigidbody rig, Entity water) Parameters Type Name Description Rigidbody rig Target object Entity water Water entity instance. Null if water is from map block InvokeItemCollected(Entity, int, int) Invoke function for item get collected by a character Declaration public static void InvokeItemCollected(Entity collector, int id, int count) Parameters Type Name Description Entity collector Character that collect the item int id ID of the item int count How many items get collected InvokeItemCollected(int, int, int, int) Invoke function for item get collected by a character Declaration public static void InvokeItemCollected(int id, int x, int y, int count) Parameters Type Name Description int id ID of the item int x Position in global space int y Position in global space int count How many items get collected InvokeItemDamage(Character, int, int) Invoke function for item being damaged/broken Declaration public static void InvokeItemDamage(Character holder, int fromID, int toID) Parameters Type Name Description Character holder Character that own the item int fromID ID of the item before it broke int toID ID of the item after it broke InvokeItemLost(Character, int) Invoke function for character lost an item Declaration public static void InvokeItemLost(Character holder, int id) Parameters Type Name Description Character holder Character that lost the item int id ID of the item InvokeItemUnlocked(int) Invoke function for item being unlocked Declaration public static void InvokeItemUnlocked(int itemID) Parameters Type Name Description int itemID ID of the unlocked item InvokeObjectBreak(int, IRect) Invoke function for object broke animation Declaration public static void InvokeObjectBreak(int spriteID, IRect rect) Parameters Type Name Description int spriteID Artwork sprite ID IRect rect Starting rect position in global space InvokeObjectFreeFall(int, int, int, int, int, int, int, int, bool) Invoke function for free fall animation Declaration public static void InvokeObjectFreeFall(int spriteID, int x, int y, int speedX = 0, int speedY = 0, int rotation = -2147483648, int rotationSpeed = 0, int gravity = 5, bool flipX = false) Parameters Type Name Description int spriteID Artwork sprite ID int x Start position X in global space int y Start position Y in global space int speedX Initial speed X int speedY Initial speed Y int rotation Initial rotation bool flipX True if artwork sprite flip horizontaly InvokeOnCharacterCrash(Entity) Invoke function for character crash Declaration public static void InvokeOnCharacterCrash(Entity target) InvokeOnCharacterFly(Entity) Invoke function for character fly Declaration public static void InvokeOnCharacterFly(Entity target) InvokeOnCharacterJump(Entity) Invoke function for character jumps Declaration public static void InvokeOnCharacterJump(Entity target) InvokeOnCharacterPassOut(Entity) Invoke function for character get pass out Declaration public static void InvokeOnCharacterPassOut(Entity target) InvokeOnCharacterPound(Entity) Invoke function for character ground pound Declaration public static void InvokeOnCharacterPound(Entity target) InvokeOnCharacterSleeping(Entity) Invoke function for a character is sleeping Declaration public static void InvokeOnCharacterSleeping(Entity target) InvokeOnCharacterSlideStepped(Entity) Invoke function for character slide with a step Declaration public static void InvokeOnCharacterSlideStepped(Entity target) InvokeOnCharacterTeleport(Entity) Invoke function for character perform a teleport Declaration public static void InvokeOnCharacterTeleport(Entity target) InvokeOnFootStepped(Entity) Invoke function for a character walks with a foot step Declaration public static void InvokeOnFootStepped(Entity target) Number_to_SystemNumberID(int) Convert number into system number map element ID. 0 by default. Declaration public static int Number_to_SystemNumberID(int number) PaintBlock(int, int, int, bool) Paint the map block with BlockColoringSystem at given position Declaration public static void PaintBlock(int unitX, int unitY, int blockColorID, bool overrideExistingElement = false) Parameters Type Name Description int unitX Target position X in unit space int unitY Target position Y in unit space int blockColorID ID of BlockColor's subclass as a map element bool overrideExistingElement True if existing map element at given position will be override PerformSpringBounce(Entity, Direction4, int, int) Bounce entities on stage for once Declaration public static bool PerformSpringBounce(Entity springEntity, Direction4 direction, int power, int powerSide = 0) Parameters Type Name Description Entity springEntity Entity that exists as the spring Direction4 direction Direction that the spring power goes int power Initial speed for entities get bounced int powerSide Initial speed on side direction for entities get bounced Returns Type Description bool True if any entity get bounced PerformSpringBounce(Rigidbody, Entity, Direction4, int, int) Bounce the given target for once Declaration public static void PerformSpringBounce(Rigidbody target, Entity spring, Direction4 direction, int power, int powerSide = 0) Parameters Type Name Description Rigidbody target Target to get bounce Entity spring Entity that exists as the spring Direction4 direction Direction that the spring power goes int power Initial speed for entities get bounced int powerSide Initial speed on side direction for entities get bounced PickBlockAt(int, int, bool, bool, bool, bool, bool) Perform a block pick Declaration public static bool PickBlockAt(int unitX, int unitY, bool allowPickBlockEntity = true, bool allowPickLevelBlock = true, bool allowPickBackgroundBlock = true, bool dropItemAfterPicked = true, bool allowMultiplePick = false) Parameters Type Name Description int unitX Target position X in unit space int unitY Target position Y in unit space bool allowPickBlockEntity True if entity blocks will be picked bool allowPickLevelBlock True if level blocks will be picked bool allowPickBackgroundBlock True if background blocks will be picked bool dropItemAfterPicked True if spawn an ItemHolder with the block bool allowMultiplePick True if pick more than one block with one function call Returns Type Description bool True if any block is picked PlaySoundAtPosition(int, Int2, float, float) Play a sound like it cames from the given position Declaration public static void PlaySoundAtPosition(int id, Int2 globalPosition, float volume = 1, float pitch = 1) Parameters Type Name Description int id Audio ID Int2 globalPosition Position in global space PutBlockTo(int, BlockType, int, int) Build a block into the map Declaration public static bool PutBlockTo(int blockID, BlockType blockType, int targetUnitX, int targetUnitY) Parameters Type Name Description int blockID ID of the building block BlockType blockType Type of the building block int targetUnitX Target position X in unit space int targetUnitY Target position Y in unit space Returns Type Description bool True if the block is built ReadSystemNumber(IBlockSquad, int, int, int, Direction4, out int) Get system number at given position from map in specified direction Declaration public static bool ReadSystemNumber(IBlockSquad squad, int unitX, int unitY, int z, Direction4 direction, out int number) Parameters Type Name Description IBlockSquad squad Source of the map blocks int unitX Target position X in unit space int unitY Target position Y in unit space int z Position Z Direction4 direction Which direction should it reads int number Result number Returns Type Description bool True if the number is founded ReadSystemNumber(IBlockSquad, int, int, int, out int) Get system number at given position from map. (Left-to-right then up-to-down) Declaration public static bool ReadSystemNumber(IBlockSquad squad, int unitX, int unitY, int z, out int number) Parameters Type Name Description IBlockSquad squad Source of the map blocks int unitX Target position X in unit space int unitY Target position Y in unit space int z Position Z int number Result number Returns Type Description bool True if the number is founded RedirectForRule(IBlockSquad, IRect, int) Auto tile all map blocks inside given range Declaration public static void RedirectForRule(IBlockSquad squad, IRect unitRange, int z) Parameters Type Name Description IBlockSquad squad Source of the map blocks IRect unitRange Target range in unit space int z Position Z RedirectForRule(IBlockSquad, int, int, int, BlockType) Auto tile map block in given position and all tiles nearby Declaration public static void RedirectForRule(IBlockSquad squad, int unitX, int unitY, int z, BlockType type) Parameters Type Name Description IBlockSquad squad Source of the map blocks int unitX Position in unit space int unitY Position in unit space int z Position z BlockType type Type of the auto tile block RemapCells(Cell[], int, int, IRect, IRect, int, int, bool) Remap the position and size of given rendering cells Declaration public static void RemapCells(Cell[] cells, int cellIndexStart, int cellIndexEnd, IRect from, IRect to, int fitPivotX = 500, int fitPivotY = 500, bool fit = true) int cellIndexStart Start index of remap logic int cellIndexEnd End index of remap logic (exclude) IRect from Remap from this range (global space) IRect to Remap to this range (global space) bool fit True if keep the aspect ratio by resize the cells RemapCells(Cell[], int, int, IRect, IRect, out int, int, int, bool) Remap the position and size of given rendering cells Declaration public static void RemapCells(Cell[] cells, int cellIndexStart, int cellIndexEnd, IRect from, IRect to, out int minZ, int fitPivotX = 500, int fitPivotY = 500, bool fit = true) int cellIndexStart Start index of remap logic int cellIndexEnd End index of remap logic (exclude) IRect from Remap from this range (global space) IRect to Remap to this range (global space) int minZ Minimal Z value for sort rendering cells bool fit True if keep the aspect ratio by resize the cells RemapCells(Span<Cell>, int, int, IRect, IRect, int, int, bool) Remap the position and size of given rendering cells Declaration public static void RemapCells(Span<Cell> cells, int cellIndexStart, int cellIndexEnd, IRect from, IRect to, int fitPivotX = 500, int fitPivotY = 500, bool fit = true) int cellIndexStart Start index of remap logic int cellIndexEnd End index of remap logic (exclude) IRect from Remap from this range (global space) IRect to Remap to this range (global space) bool fit True if keep the aspect ratio by resize the cells RemapCells(Span<Cell>, int, int, IRect, IRect, out int, int, int, bool) Remap the position and size of given rendering cells Declaration public static void RemapCells(Span<Cell> cells, int cellIndexStart, int cellIndexEnd, IRect from, IRect to, out int minZ, int fitPivotX = 500, int fitPivotY = 500, bool fit = true) int cellIndexStart Start index of remap logic int cellIndexEnd End index of remap logic (exclude) IRect from Remap from this range (global space) IRect to Remap to this range (global space) int minZ Minimal Z value for sort rendering cells bool fit True if keep the aspect ratio by resize the cells RemoveFromWorldMemory(Entity) Remove target entity from world data. Only work when entity spawned from map. Declaration public static void RemoveFromWorldMemory(Entity entity) ResetShoulderAndUpperArmPos(PoseCharacterRenderer, bool, bool) Reset the shoulder and upper arm position for given pose-styled character Declaration public static void ResetShoulderAndUpperArmPos(PoseCharacterRenderer rendering, bool resetLeft = true, bool resetRight = true) Parameters Type Name Description PoseCharacterRenderer rendering Target character RuleByteToDigit(byte[]) Convert byte array into auto tiling rule digit Declaration public static int RuleByteToDigit(byte[] singleRule) RunAngeliaCodeAnalysis(bool, bool, bool) Perform analyses for current AngeliA project and log the report Declaration public static void RunAngeliaCodeAnalysis(bool onlyLogWhenWarningFounded = false, bool fixScriptFileName = false, bool checkNoItemCombination = true) RunBuiltInSpriteAnalysys(bool) Perform checking logic for checking built-in sprite sync with artwork sheet or not Declaration public static void RunBuiltInSpriteAnalysys(bool onlyLogWhenWarningFounded = false) RunEmptyScriptFileAnalysis(string, bool) Check for empty script file in given project root Declaration public static void RunEmptyScriptFileAnalysis(string rootPath, bool onlyLogWhenWarningFounded = false) SearchlightBlockCheck(IBlockSquad, Int3, Direction8?, int, bool) True if any block founded inside given range. Search blocks with specific order to lower the CPU usage. Declaration public static bool SearchlightBlockCheck(IBlockSquad squad, Int3 startUnitPoint, Direction8? direction, int unitDistance = 128, bool reverse = false) Parameters Type Name Description IBlockSquad squad Source of map blocks Int3 startUnitPoint Position to start searching in unit space Direction8? direction Direction of the search operation facing. Set to null to make it search in circle range. int unitDistance Maximal distance for the search in unit space bool reverse True if search blocks from far side first SpawnItemFromMap(IBlockSquad, int, int, int, int, int, int, bool) Spawn item based on items list from map. This is used for the map chest. Declaration public static void SpawnItemFromMap(IBlockSquad squad, int unitX, int unitY, int z, int maxDeltaX = 1024, int maxDeltaY = 1024, int placeHolderID = 0, bool spawnEntity = true) Parameters Type Name Description IBlockSquad squad Source of the map blocks int unitX Position X in unit space int unitY Position Y in unit space int z Position Z int maxDeltaX Limitation on horizontal checking distance int maxDeltaY Limitation on vertical checking distance int placeHolderID Set spawned item into this ID bool spawnEntity True if spawn the entity that paint as map element SpiralSpinningCellEffect(int, int, int, int, int, bool) Draw spinning effect for teleporting with portal Declaration public static void SpiralSpinningCellEffect(int localFrame, int pointX, int pointY, int duration, int cellIndexStart, bool reverseSpin = false) int pointX Center position in global space int pointY Center position in global space int duration Total duration of the animation int cellIndexStart Start index of target rendering cells in current rendering layer SystemNumberID_to_Number(int) Convert system number ID into the number it represents Declaration public static int SystemNumberID_to_Number(int id) Time01_to_TimeDigit(float, out int, out int, out int) Convert a float value into time Declaration public static void Time01_to_TimeDigit(float time01, out int hour, out int minute, out int second) Parameters Type Name Description float time01 0 means 0:00, 0.5 means 12:00. 1 means 24:00 TimeDigit_to_Time01(int, int, int) Convert time into a float value Declaration public static float TimeDigit_to_Time01(int hour, int minute, int second) Returns Type Description float 0 means 0:00, 0.5 means 12:00. 1 means 24:00 TryEjectOutsideGround(Rigidbody, int, int, int) Move the given rigidbody to closest empty space nearby Declaration public static void TryEjectOutsideGround(Rigidbody rig, int collisionMask = 0, int unitRange = 2, int speed = 32) int collisionMask Which physics layers should count as \"Ground\" int unitRange How far can it move in unit space int speed How fast will it move TryGetEmptyPlaceNearbyForEntity(int, int, int, out int, out int, int, bool) Find an empty place on map nearby given position for placing an entity Declaration public static bool TryGetEmptyPlaceNearbyForEntity(int unitX, int unitY, int z, out int resultUnitX, out int resultUnitY, int maxRange = 8, bool preferNoSolidLevel = true) Parameters Type Name Description int unitX Target position X in unit space int unitY Target position Y in unit space int z Position Z int resultUnitX Position founded in unit space int resultUnitY Position founded in unit space int maxRange Maximal searching range in unit space bool preferNoSolidLevel Set to true to put this entity into place without solid level blocks Returns Type Description bool True if the place is founded TryGetOnewayDirection(Tag, out Direction4) Get direction from a single oneway gate tag. The tag value can only be a single oneway gate tag. Declaration public static bool TryGetOnewayDirection(Tag tag, out Direction4 direction) TryGetSingleSystemNumber(IBlockSquad, int, int, int, out int) Get a single digit of system number at given position from map Declaration public static bool TryGetSingleSystemNumber(IBlockSquad squad, int unitX, int unitY, int z, out int digitValue) Parameters Type Name Description IBlockSquad squad Source of the map blocks int unitX Target position X in unit space int unitY Target position Y in unit space int z Position Z int digitValue Result of the digit Returns Type Description bool True if the digit is founded"
  },
  "api/AngeliA.GUI.html": {
    "href": "api/AngeliA.GUI.html",
    "title": "Class GUI | AngeliA",
    "summary": "Class GUI GUI for Game-User-Interface. Handles UI related rendering and interaction logic Properties BodyColor Color tint of the current invoke GUI element's body Declaration public static Color32 BodyColor { get; set; } Color Total color tint of the current invoke GUI element Declaration public static Color32 Color { get; set; } ContentColor Color tint of the current invoke GUI element's content part Declaration public static Color32 ContentColor { get; set; } ContentVersion Internal changing version of the GUI content Declaration public static int ContentVersion { get; } Enable True if the current invoke GUI element should be interactable with user Declaration public static bool Enable { get; set; } FieldHeight Unified height of a standard field-like element should have Declaration public static int FieldHeight { get; } FieldPadding Unified gap of a standard element should have Declaration public static int FieldPadding { get; } Interactable False if the current invoke GUI element should be not interactable with user but still looks interactable Declaration public static bool Interactable { get; set; } IsTyping True if the user is typing in text field at current frame Declaration public static bool IsTyping { get; } LabelWidth Unified width of the label part of the current invoke GUI element Declaration public static int LabelWidth { get; set; } ScrollbarSize Unified size of a standard scrollbar element should have Declaration public static int ScrollbarSize { get; } Skin Built-in skin of the system Declaration public static GUISkin Skin { get; set; } ToolbarSize Unified size of a standard toolbar element should have Declaration public static int ToolbarSize { get; } TypingTextFieldID Control ID of the current typing input field Declaration public static int TypingTextFieldID { get; } Methods BackgroundLabel(IRect, char[], Color32, out IRect, int, GUIStyle) Label with a color block as background Declaration public static void BackgroundLabel(IRect rect, char[] chars, Color32 backgroundColor, out IRect bounds, int backgroundPadding = 0, GUIStyle style = null) Parameters Type Name Description IRect rect Rect position in global space Color32 backgroundColor Color of the background block IRect bounds Rendering boundary of the text content in global space int backgroundPadding Border size of the background block in unified size BackgroundLabel(IRect, char[], Color32, int, GUIStyle) Label with a color block as background Declaration public static void BackgroundLabel(IRect rect, char[] chars, Color32 backgroundColor, int backgroundPadding = 0, GUIStyle style = null) Parameters Type Name Description IRect rect Rect position in global space Color32 backgroundColor Color of the background block int backgroundPadding Border size of the background block in unified size BackgroundLabel(IRect, string, Color32, out IRect, int, bool, GUIStyle) Label with a color block as background Declaration public static void BackgroundLabel(IRect rect, string text, Color32 backgroundColor, out IRect bounds, int backgroundPadding = 0, bool forceInside = false, GUIStyle style = null) Parameters Type Name Description IRect rect Rect position in global space string text Text content Color32 backgroundColor Color of the background block IRect bounds Rendering boundary of the text content in global space int backgroundPadding Border size of the background block in unified size bool forceInside True if the text content clamp inside the background block BackgroundLabel(IRect, string, Color32, int, bool, GUIStyle) Label with a color block as background Declaration public static void BackgroundLabel(IRect rect, string text, Color32 backgroundColor, int backgroundPadding = 0, bool forceInside = false, GUIStyle style = null) Parameters Type Name Description IRect rect Rect position in global space string text Text content Color32 backgroundColor Color of the background block int backgroundPadding Border size of the background block in unified size bool forceInside True if the text content clamp inside the background block BeginChangeCheck() Start the change check. Use GUI.EndChangeCheck to get the result Declaration public static void BeginChangeCheck() BlankButton(IRect, out GUIState) GUI element that behave like a button Declaration public static bool BlankButton(IRect rect, out GUIState state) Parameters Type Name Description IRect rect Rect position in global space Returns Type Description bool True if the button is pressed at current frame BlankSlider(int, IRect, int, int, int, out GUIState, bool, int) Draw a slider that user can drag with mouse to change a intager value Declaration public static int BlankSlider(int controlID, IRect rect, int value, int min, int max, out GUIState state, bool vertical = false, int step = 0) Parameters Type Name Description int controlID ID to identify the interaction of this element IRect rect Rect position in global space int min Minimal limitation for the value int max Maximal limitation for the value bool vertical True if this slider slide verticaly int step Smooth step of the sliding. 0 means no step. Returns Type Description int New value after slide BlankToggle(IRect, bool, out GUIState) Draw a GUI element with a check box and check mark Declaration public static bool BlankToggle(IRect rect, bool isOn, out GUIState state) Parameters Type Name Description IRect rect Rect position in global space bool isOn True if the toggle is checked Returns Type Description bool True if the toggle is checked Button(IRect, int, out GUIState, GUIStyle) GUI element that behave like a button Declaration public static bool Button(IRect rect, int icon, out GUIState state, GUIStyle style = null) Parameters Type Name Description IRect rect Rect position in global space int icon Artwork sprite ID for the icon inside this button Returns Type Description bool True if the button is pressed at current frame Button(IRect, int, GUIStyle) GUI element that behave like a button Declaration public static bool Button(IRect rect, int icon, GUIStyle style = null) Parameters Type Name Description IRect rect Rect position in global space int icon Artwork sprite ID for the icon inside this button Returns Type Description bool True if the button is pressed at current frame Button(IRect, string, out GUIState, GUIStyle, int) GUI element that behave like a button Declaration public static bool Button(IRect rect, string label, out GUIState state, GUIStyle style = null, int charSize = -2) Parameters Type Name Description IRect rect Rect position in global space string label Text content inside this button int charSize Character size of the label in unified space Returns Type Description bool True if the button is pressed at current frame Button(IRect, string, GUIStyle, int) GUI element that behave like a button Declaration public static bool Button(IRect rect, string label, GUIStyle style = null, int charSize = -2) Parameters Type Name Description IRect rect Rect position in global space string label Text content inside this button int charSize Character size of the label in unified space Returns Type Description bool True if the button is pressed at current frame CancelTyping() Stop typing on any input field Declaration public static void CancelTyping() DarkButton(IRect, int) GUI element that behave like a button Declaration public static bool DarkButton(IRect rect, int icon) Parameters Type Name Description IRect rect Rect position in global space int icon Artwork sprite ID for the icon inside this button Returns Type Description bool True if the button is pressed at current frame DarkButton(IRect, string, int) GUI element that behave like a button Declaration public static bool DarkButton(IRect rect, string label, int charSize = -2) Parameters Type Name Description IRect rect Rect position in global space string label Text content inside this button int charSize Character size of the label in unified space Returns Type Description bool True if the button is pressed at current frame DrawAxis(Int2, Int2, Int2, int, int, int, int, Color32, Color32, int, GUIStyle, IRect) Declaration public static void DrawAxis(Int2 position, Int2 length, Int2 stepCount, int stepNumberGap, int thickness, int stepThickness, int z, Color32 colorX, Color32 colorY, int labelHeight = 0, GUIStyle labelStyle = null, IRect clampRect = default) DrawSlice(AngeSprite, IRect) Draw the artwork sprite with 9-slice logic. Border size will be unified. Declaration public static Cell[] DrawSlice(AngeSprite sprite, IRect rect) Parameters Type Name Description AngeSprite sprite Artwork sprite IRect rect Rect position in global space Returns Type Description Cell[] Rendering cells of this element DrawSlice(int, IRect) Draw the artwork sprite with 9-slice logic. Border size will be unified. Declaration public static Cell[] DrawSlice(int spriteID, IRect rect) Parameters Type Name Description int spriteID ID of the artwork sprite IRect rect Rect position in global space Returns Type Description Cell[] Rendering cells of this element DrawStyleBody(IRect, GUIStyle, GUIState) Draw the given style as body of a GUI element Declaration public static void DrawStyleBody(IRect rect, GUIStyle style, GUIState state) Parameters Type Name Description IRect rect Rect position in global space DrawStyleBody(IRect, GUIStyle, GUIState, Color32) Draw the given style as body of a GUI element Declaration public static void DrawStyleBody(IRect rect, GUIStyle style, GUIState state, Color32 tint) Parameters Type Name Description IRect rect Rect position in global space Color32 tint Color tint that apply on this element DrawStyleContent(IRect, int, GUIStyle, GUIState, bool, bool) Draw the given style as content of a GUI element Declaration public static void DrawStyleContent(IRect rect, int sprite, GUIStyle style, GUIState state, bool ignoreSlice = false, bool fit = false) Parameters Type Name Description IRect rect Rect position in global space int sprite Artwork sprite bool ignoreSlice True if not apply 9-slice logic bool fit True if keep the aspect ratio of the sprite EndChangeCheck() True if any GUI element changed it's value during the change check Declaration public static bool EndChangeCheck() FilledSlider(int, IRect, int, int, int, bool, int) Draw a slider that user can drag with mouse to change a intager value Declaration public static int FilledSlider(int controlID, IRect rect, int value, int min, int max, bool vertical = false, int step = 0) Parameters Type Name Description int controlID ID to identify the interaction of this element IRect rect Rect position in global space int min Minimal limitation for the value int max Maximal limitation for the value bool vertical True if this slider slide verticaly int step Smooth step of the sliding. 0 means no step. Returns Type Description int New value after slide FrameBasedIntLabel(IRect, FrameBasedInt, Color32, Color32, GUIStyle) Label for draw FrameBasedInt as a buff Declaration public static void FrameBasedIntLabel(IRect rect, FrameBasedInt number, Color32 greaterColor, Color32 lessColor, GUIStyle style = null) Parameters Type Name Description IRect rect Rect position in global space FrameBasedInt number Intager content Color32 greaterColor Text color for the extra part when final value is greater Color32 lessColor Text color for the extra part when final value is less FrameBasedIntLabel(IRect, FrameBasedInt, Color32, Color32, out IRect, GUIStyle) Label for draw FrameBasedInt as a buff Declaration public static void FrameBasedIntLabel(IRect rect, FrameBasedInt number, Color32 greaterColor, Color32 lessColor, out IRect bounds, GUIStyle style = null) Parameters Type Name Description IRect rect Rect position in global space FrameBasedInt number Intager content Color32 greaterColor Text color for the extra part when final value is greater Color32 lessColor Text color for the extra part when final value is less IRect bounds Rendering boundary of the text content in global space GetContentRect(IRect, GUIStyle, GUIState) Get rect position in global space for content inside a GUI element Declaration public static IRect GetContentRect(IRect rect, GUIStyle style, GUIState state) HandleSlider(int, IRect, int, int, int, bool, int) Draw a slider that user can drag with mouse to change a intager value Declaration public static int HandleSlider(int controlID, IRect rect, int value, int min, int max, bool vertical = false, int step = 0) Parameters Type Name Description int controlID ID to identify the interaction of this element IRect rect Rect position in global space int min Minimal limitation for the value int max Maximal limitation for the value bool vertical True if this slider slide verticaly int step Smooth step of the sliding. 0 means no step. Returns Type Description int New value after slide HighlightCursor(int, IRect) Draw an animated cursor Declaration public static void HighlightCursor(int spriteID, IRect rect) Parameters Type Name Description int spriteID Artwork sprite ID IRect rect Rect position in global space HighlightCursor(int, IRect, Color32) Draw an animated cursor Declaration public static void HighlightCursor(int spriteID, IRect rect, Color32 color) Parameters Type Name Description int spriteID Artwork sprite ID IRect rect Rect position in global space Color32 color Color tint for this element only HorizontalColorField(ColorF, IRect, bool, bool, bool, bool, ColorF?) Draw a GUI element to edit color value Declaration public static ColorF HorizontalColorField(ColorF color, IRect rect, bool hsv = true, bool alpha = false, bool stepped = true, bool folded = false, ColorF? defaultColor = null) Parameters Type Name Description ColorF color The color value IRect rect Rect position in global space bool hsv True if the field use HSV instead of RGB bool alpha True if the field include alpha value bool stepped True if the field use smooth step when dragging bool folded True if the field is folded ColorF? defaultColor Default value will set to the color value when user press the reset button. Set to null when you don't want the reset button. Returns Type Description ColorF New color after edit HorizontalColorField(ColorF, IRect, string, GUIStyle, bool, bool, bool, bool, ColorF?) Draw a GUI element to edit color value Declaration public static ColorF HorizontalColorField(ColorF color, IRect rect, string label, GUIStyle labelStyle = null, bool hsv = true, bool alpha = false, bool stepped = true, bool folded = false, ColorF? defaultColor = null) Parameters Type Name Description ColorF color The color value IRect rect Rect position in global space string label Text content display on left of the field GUIStyle labelStyle GUI style for the label bool hsv True if the field use HSV instead of RGB bool alpha True if the field include alpha value bool stepped True if the field use smooth step when dragging bool folded True if the field is folded ColorF? defaultColor Default value will set to the color value when user press the reset button. Set to null when you don't want the reset button. Returns Type Description ColorF New color after edit Icon(IRect, int) Draw a artwork sprite as an icon Declaration public static void Icon(IRect rect, int sprite) Parameters Type Name Description IRect rect Rect position in global space int sprite Artwork sprite Icon(IRect, int, GUIStyle, GUIState) Draw a artwork sprite as an icon Declaration public static void Icon(IRect rect, int sprite, GUIStyle style, GUIState state) Parameters Type Name Description IRect rect Rect position in global space int sprite Artwork sprite IconToggle(IRect, bool, int, GUIStyle, GUIStyle) Draw a GUI element with a check box and check mark Declaration public static bool IconToggle(IRect rect, bool isOn, int icon, GUIStyle markStyle = null, GUIStyle iconStyle = null) Parameters Type Name Description IRect rect Rect position in global space bool isOn True if the toggle is checked int icon Artwork sprite of the content inside the toggle GUIStyle markStyle GUI style of the check mark GUIStyle iconStyle GUI style of the icon content Returns Type Description bool True if the toggle is checked InputField(int, IRect, string, GUIStyle, Color32?) Draw a GUI element to allow the user to edit a text content Declaration public static string InputField(int controlID, IRect rect, string text, GUIStyle bodyStyle = null, Color32? selectionColor = null) Parameters Type Name Description int controlID ID to identify the interaction of this element IRect rect Rect position in global space string text Input content Color32? selectionColor Color of the selection block Returns Type Description string Editted text content InputField(int, IRect, string, out bool, out bool, GUIStyle, Color32?) Draw a GUI element to allow the user to edit a text content Declaration public static string InputField(int controlID, IRect rect, string text, out bool changed, out bool confirm, GUIStyle bodyStyle = null, Color32? selectionColor = null) Parameters Type Name Description int controlID ID to identify the interaction of this element IRect rect Rect position in global space string text Input content bool changed True if the field changed it's content at current frame bool confirm True if the field stop edit at current frame Color32? selectionColor Color of the selection block Returns Type Description string Editted text content IntDial(IRect, int, out bool, string, GUIStyle, GUIStyle, GUIStyle, int, int, int) Draw a label display an intager with two buttons to add and remove value Declaration public static int IntDial(IRect rect, int value, out bool changed, string label = null, GUIStyle labelStyle = null, GUIStyle bodyStyle = null, GUIStyle dialButtonStyle = null, int delta = 1, int min = -2147483648, int max = 2147483647) Parameters Type Name Description IRect rect Rect position in global space int value The intager value bool changed True if the value is changed in this frame string label Text content displays on the left GUIStyle labelStyle GUI style for the text label GUIStyle bodyStyle GUI style for the int field GUIStyle dialButtonStyle GUI style for the buttons int delta How many value does it add/remove when the button get pressed int min Minimal value for the intager int max Maximal value for the intager Returns Type Description int New value after modified IntDial(IRect, int, string, GUIStyle, GUIStyle, GUIStyle, int, int, int) Draw a label display an intager with two buttons to add and remove value Declaration public static int IntDial(IRect rect, int value, string label = null, GUIStyle labelStyle = null, GUIStyle bodyStyle = null, GUIStyle dialButtonStyle = null, int delta = 1, int min = -2147483648, int max = 2147483647) Parameters Type Name Description IRect rect Rect position in global space int value The intager value string label Text content displays on the left GUIStyle labelStyle GUI style for the text label GUIStyle bodyStyle GUI style for the int field GUIStyle dialButtonStyle GUI style for the buttons int delta How many value does it add/remove when the button get pressed int min Minimal value for the intager int max Maximal value for the intager Returns Type Description int New value after modified IntLabel(IRect, int, GUIStyle) Label for intager content Declaration public static void IntLabel(IRect rect, int number, GUIStyle style = null) Parameters Type Name Description IRect rect Rect position in global space int number Intager content IntLabel(IRect, int, out IRect, GUIStyle) Label for intager content Declaration public static void IntLabel(IRect rect, int number, out IRect bounds, GUIStyle style = null) Parameters Type Name Description IRect rect Rect position in global space int number Intager content IRect bounds Rendering boundary of the text content in global space Label(IRect, char[], GUIStyle, int) Draw a text content on screen Declaration public static void Label(IRect rect, char[] text, GUIStyle style = null, int charSize = -2) Parameters Type Name Description IRect rect Rect position in global space char[] text Text content int charSize Unified height of the character Label(IRect, char[], out IRect, GUIStyle, int) Draw a text content on screen Declaration public static void Label(IRect rect, char[] text, out IRect bounds, GUIStyle style = null, int charSize = -2) Parameters Type Name Description IRect rect Rect position in global space char[] text Text content IRect bounds Total rendering boundary of the characters in global space int charSize Unified height of the character Label(IRect, string, GUIStyle, int) Draw a text content on screen Declaration public static void Label(IRect rect, string text, GUIStyle style = null, int charSize = -2) Parameters Type Name Description IRect rect Rect position in global space string text Text content int charSize Unified height of the character Label(IRect, string, out IRect, GUIStyle, int) Draw a text content on screen Declaration public static void Label(IRect rect, string text, out IRect bounds, GUIStyle style = null, int charSize = -2) Parameters Type Name Description IRect rect Rect position in global space string text Text content IRect bounds Total rendering boundary of the characters in global space int charSize Unified height of the character Label(IRect, string, int, bool, out IRect, out int, GUIStyle, int) Draw a text content on screen Declaration public static void Label(IRect rect, string text, int startIndex, bool drawInvisibleChar, out IRect bounds, out int endIndex, GUIStyle style = null, int charSize = -2) Parameters Type Name Description IRect rect Rect position in global space string text Text content int startIndex Label content start with this index bool drawInvisibleChar True if invisible characters should make the internal iteration grow IRect bounds Total rendering boundary of the characters in global space int endIndex Last rendered character index int charSize Unified height of the character Label(IRect, string, int, int, bool, out IRect, out IRect, out int, GUIStyle, int) Draw a text content on screen Declaration public static void Label(IRect rect, string text, int beamIndex, int startIndex, bool drawInvisibleChar, out IRect bounds, out IRect beamRect, out int endIndex, GUIStyle style = null, int charSize = -2) Parameters Type Name Description IRect rect Rect position in global space string text Text content int beamIndex Index of the typing beam inside the text content int startIndex Label content start with this index bool drawInvisibleChar True if invisible characters should make the internal iteration grow IRect bounds Total rendering boundary of the characters in global space IRect beamRect Rendering rect position of the typing beam int endIndex Last rendered character index int charSize Unified height of the character LinkButton(IRect, string, GUIStyle, bool, int) Button that behave like a link Declaration public static bool LinkButton(IRect rect, string label, GUIStyle labelStyle = null, bool useUnderLine = true, int charSize = -2) Parameters Type Name Description IRect rect Rect position in global space string label Text content GUIStyle labelStyle GUI style for the label content bool useUnderLine True if draw a line below the text int charSize Character size in unified space Returns Type Description bool True if the link is pressed at current frame LinkButton(IRect, string, out IRect, GUIStyle, bool, int) Button that behave like a link Declaration public static bool LinkButton(IRect rect, string label, out IRect bounds, GUIStyle labelStyle = null, bool useUnderLine = true, int charSize = -2) Parameters Type Name Description IRect rect Rect position in global space string label Text content IRect bounds Boundary of the rendered content in global space GUIStyle labelStyle GUI style for the label content bool useUnderLine True if draw a line below the text int charSize Character size in unified space Returns Type Description bool True if the link is pressed at current frame PopupTriangleIcon(IRect, int) Draw the triangle icon inside a popup button Declaration public static void PopupTriangleIcon(IRect rect, int iconSprite = 0) Parameters Type Name Description IRect rect Rect position of the whole button in global space int iconSprite Artwork sprite ID. Leave it 0 to use the built-in sprite ReverseUnify(int) Convert global size into unified size Declaration public static int ReverseUnify(int value) ReverseUnifyMonitor(int) Convert global size into unified size based on monitor size instead of application window height Declaration public static int ReverseUnifyMonitor(int value) ScrollBar(int, IRect, int, int, int, GUIStyle, GUIStyle, bool) Draw a bar that slide when user drag the handle inside Declaration public static int ScrollBar(int controlID, IRect contentRect, int position, int totalSize, int pageSize, GUIStyle handleStyle = null, GUIStyle bgStyle = null, bool vertical = true) Parameters Type Name Description int controlID ID to identify the interaction of this element IRect contentRect Rect position of the content panel in global space int position Scrolling offset position in global space int totalSize Size of all content in global space int pageSize Size of the displaying content in global space GUIStyle handleStyle GUI style for the handle GUIStyle bgStyle GUI style for the background bool vertical True if it scrolls in vertical direction Returns Type Description int New position value ScrollLabel(string, IRect, int, GUIStyle) Label that scroll the content inside verticaly Declaration public static int ScrollLabel(string text, IRect rect, int scrollPosition, GUIStyle style) Parameters Type Name Description string text Text content IRect rect Rect position in global space int scrollPosition Offset Y position in global space Returns Type Description int The new scrolling position SetChange() Mark the GUI system as changed Declaration public static void SetChange() ShadowLabel(IRect, char[], int, GUIStyle) Label with shadow below Declaration public static void ShadowLabel(IRect rect, char[] chars, int shadowDistance = 3, GUIStyle style = null) Parameters Type Name Description IRect rect Rect position in global space int shadowDistance Offset Y of the shadow in unified space ShadowLabel(IRect, string, int, GUIStyle) Label with shadow below Declaration public static void ShadowLabel(IRect rect, string text, int shadowDistance = 3, GUIStyle style = null) Parameters Type Name Description IRect rect Rect position in global space string text Text content int shadowDistance Offset Y of the shadow in unified space Slider(int, IRect, int, int, int, GUIStyle, GUIStyle, GUIStyle, bool, int) Draw a slider that user can drag with mouse to change a intager value Declaration public static int Slider(int controlID, IRect rect, int value, int min, int max, GUIStyle bodyStyle, GUIStyle handleStyle, GUIStyle fillStyle, bool vertical = false, int step = 0) Parameters Type Name Description int controlID ID to identify the interaction of this element IRect rect Rect position in global space int min Minimal limitation for the value int max Maximal limitation for the value bool vertical True if this slider slide verticaly int step Smooth step of the sliding. 0 means no step. Returns Type Description int New value after slide SmallInputField(int, IRect, string, out bool, out bool, Color32?) Draw a GUI element to allow the user to edit a text content Declaration public static string SmallInputField(int controlID, IRect rect, string text, out bool changed, out bool confirm, Color32? selectionColor = null) Parameters Type Name Description int controlID ID to identify the interaction of this element IRect rect Rect position in global space string text Input content bool changed True if the field changed it's content at current frame bool confirm True if the field stop edit at current frame Color32? selectionColor Color of the selection block Returns Type Description string Editted text content SmallInputField(int, IRect, string, Color32?) Draw a GUI element to allow the user to edit a text content Declaration public static string SmallInputField(int controlID, IRect rect, string text, Color32? selectionColor = null) Parameters Type Name Description int controlID ID to identify the interaction of this element IRect rect Rect position in global space string text Input content Color32? selectionColor Color of the selection block Returns Type Description string Editted text content SmallIntDial(IRect, int, out bool, string, int, int, int) Draw a label display an intager with two buttons to add and remove value Declaration public static int SmallIntDial(IRect rect, int value, out bool changed, string label = null, int delta = 1, int min = -2147483648, int max = 2147483647) Parameters Type Name Description IRect rect Rect position in global space int value The intager value bool changed True if the value is changed in this frame string label Text content displays on the left int delta How many value does it add/remove when the button get pressed int min Minimal value for the intager int max Maximal value for the intager Returns Type Description int New value after modified SmallIntDial(IRect, int, string, int, int, int) Draw a label display an intager with two buttons to add and remove value Declaration public static int SmallIntDial(IRect rect, int value, string label = null, int delta = 1, int min = -2147483648, int max = 2147483647) Parameters Type Name Description IRect rect Rect position in global space int value The intager value string label Text content displays on the left int delta How many value does it add/remove when the button get pressed int min Minimal value for the intager int max Maximal value for the intager Returns Type Description int New value after modified SmallLabel(IRect, char[]) Draw a text content on screen Declaration public static void SmallLabel(IRect rect, char[] text) Parameters Type Name Description IRect rect Rect position in global space char[] text Text content SmallLabel(IRect, char[], out IRect) Draw a text content on screen Declaration public static void SmallLabel(IRect rect, char[] text, out IRect bounds) Parameters Type Name Description IRect rect Rect position in global space char[] text Text content IRect bounds Total rendering boundary of the characters in global space SmallLabel(IRect, string) Draw a text content on screen Declaration public static void SmallLabel(IRect rect, string text) Parameters Type Name Description IRect rect Rect position in global space string text Text content SmallLabel(IRect, string, out IRect) Draw a text content on screen Declaration public static void SmallLabel(IRect rect, string text, out IRect bounds) Parameters Type Name Description IRect rect Rect position in global space string text Text content IRect bounds Total rendering boundary of the characters in global space SmallLabel(IRect, string, int, bool, out IRect, out int) Draw a text content on screen Declaration public static void SmallLabel(IRect rect, string text, int startIndex, bool drawInvisibleChar, out IRect bounds, out int endIndex) Parameters Type Name Description IRect rect Rect position in global space string text Text content int startIndex Label content start with this index bool drawInvisibleChar True if invisible characters should make the internal iteration grow IRect bounds Total rendering boundary of the characters in global space int endIndex Last rendered character index SmallLabel(IRect, string, int, int, bool, out IRect, out IRect, out int) Draw a text content on screen Declaration public static void SmallLabel(IRect rect, string text, int beamIndex, int startIndex, bool drawInvisibleChar, out IRect bounds, out IRect beamRect, out int endIndex) Parameters Type Name Description IRect rect Rect position in global space string text Text content int beamIndex Index of the typing beam inside the text content int startIndex Label content start with this index bool drawInvisibleChar True if invisible characters should make the internal iteration grow IRect bounds Total rendering boundary of the characters in global space IRect beamRect Rendering rect position of the typing beam int endIndex Last rendered character index SmallLinkButton(IRect, string, out IRect, bool, int) Button that behave like a link Declaration public static bool SmallLinkButton(IRect rect, string label, out IRect bounds, bool useUnderLine = true, int charSize = -2) Parameters Type Name Description IRect rect Rect position in global space string label Text content IRect bounds Boundary of the rendered content in global space bool useUnderLine True if draw a line below the text int charSize Character size in unified space Returns Type Description bool True if the link is pressed at current frame SmallLinkButton(IRect, string, bool, int) Button that behave like a link Declaration public static bool SmallLinkButton(IRect rect, string label, bool useUnderLine = true, int charSize = -2) Parameters Type Name Description IRect rect Rect position in global space string label Text content bool useUnderLine True if draw a line below the text int charSize Character size in unified space Returns Type Description bool True if the link is pressed at current frame StartTyping(int) Procedurelly start typing with an input field Declaration public static void StartTyping(int controlID) Parameters Type Name Description int controlID Control ID of the target input field Toggle(IRect, bool, GUIStyle, GUIStyle) Draw a GUI element with a check box and check mark Declaration public static bool Toggle(IRect rect, bool isOn, GUIStyle bodyStyle = null, GUIStyle markStyle = null) Parameters Type Name Description IRect rect Rect position in global space bool isOn True if the toggle is checked GUIStyle bodyStyle GUI style of the toggle box GUIStyle markStyle GUI style of the check mark Returns Type Description bool True if the toggle is checked Toggle(IRect, bool, string, GUIStyle, GUIStyle, GUIStyle) Draw a GUI element with a check box and check mark Declaration public static bool Toggle(IRect rect, bool isOn, string label, GUIStyle bodyStyle = null, GUIStyle markStyle = null, GUIStyle labelStyle = null) Parameters Type Name Description IRect rect Rect position in global space bool isOn True if the toggle is checked string label Text content inside the toggle GUIStyle bodyStyle GUI style of the toggle box GUIStyle markStyle GUI style of the check mark GUIStyle labelStyle GUI style of the text label Returns Type Description bool True if the toggle is checked ToggleButton(IRect, bool, int, GUIStyle) Draw a GUI element with a check box and check mark Declaration public static bool ToggleButton(IRect rect, bool isOn, int icon, GUIStyle style = null) Parameters Type Name Description IRect rect Rect position in global space bool isOn True if the toggle is checked int icon Artwork sprite of the content inside the toggle Returns Type Description bool True if the toggle is checked ToggleButton(IRect, bool, string, GUIStyle) Draw a GUI element with a check box and check mark Declaration public static bool ToggleButton(IRect rect, bool isOn, string label, GUIStyle bodyStyle = null) Parameters Type Name Description IRect rect Rect position in global space bool isOn True if the toggle is checked string label Text content inside the toggle GUIStyle bodyStyle GUI style of the toggle box Returns Type Description bool True if the toggle is checked ToggleFold(IRect, ref bool, int, string, int, int) Draw a GUI element with a check box and check mark Declaration public static bool ToggleFold(IRect rect, ref bool folding, int icon, string label, int paddingLeft = 0, int paddingRight = 0) Parameters Type Name Description IRect rect Rect position in global space bool folding True if the panel if folded int icon Artwork sprite of the content inside the toggle string label Text content inside the toggle Returns Type Description bool True if the toggle is checked ToggleLeft(IRect, bool, string, GUIStyle, GUIStyle, GUIStyle) Draw a GUI element with a check box and check mark Declaration public static bool ToggleLeft(IRect rect, bool isOn, string label, GUIStyle bodyStyle = null, GUIStyle labelStyle = null, GUIStyle markStyle = null) Parameters Type Name Description IRect rect Rect position in global space bool isOn True if the toggle is checked string label Text content inside the toggle GUIStyle bodyStyle GUI style of the toggle box GUIStyle labelStyle GUI style of the text label GUIStyle markStyle GUI style of the check mark Returns Type Description bool True if the toggle is checked Unify(int) Convert unified size into global size Declaration public static int Unify(int value) UnifyBorder(Int4) Convert unified size into global size Declaration public static Int4 UnifyBorder(Int4 border) UnifyMonitor(int) Convert unified size into global size based on monitor size instead of application window height Declaration public static int UnifyMonitor(int value) VerticalColorField(ColorF, IRect, bool, bool, bool, bool, ColorF?) Draw a GUI element to edit color value Declaration public static ColorF VerticalColorField(ColorF color, IRect rect, bool hsv = true, bool alpha = false, bool stepped = true, bool folded = false, ColorF? defaultColor = null) Parameters Type Name Description ColorF color The color value IRect rect Rect position in global space bool hsv True if the field use HSV instead of RGB bool alpha True if the field include alpha value bool stepped True if the field use smooth step when dragging bool folded True if the field is folded ColorF? defaultColor Default value will set to the color value when user press the reset button. Set to null when you don't want the reset button. Returns Type Description ColorF New color after edit VerticalColorField(ColorF, IRect, string, GUIStyle, bool, bool, bool, bool, ColorF?) Draw a GUI element to edit color value Declaration public static ColorF VerticalColorField(ColorF color, IRect rect, string label, GUIStyle labelStyle = null, bool hsv = true, bool alpha = false, bool stepped = true, bool folded = false, ColorF? defaultColor = null) Parameters Type Name Description ColorF color The color value IRect rect Rect position in global space string label Text content display on left of the field GUIStyle labelStyle GUI style for the label bool hsv True if the field use HSV instead of RGB bool alpha True if the field include alpha value bool stepped True if the field use smooth step when dragging bool folded True if the field is folded ColorF? defaultColor Default value will set to the color value when user press the reset button. Set to null when you don't want the reset button. Returns Type Description ColorF New color after edit"
  },
  "api/AngeliA.GUIBodyColorScope.html": {
    "href": "api/AngeliA.GUIBodyColorScope.html",
    "title": "Struct GUIBodyColorScope | AngeliA",
    "summary": "Struct GUIBodyColorScope Scope that change the body color of GUI element inside Implements IDisposable Examples using AngeliA; namespace AngeliaGame; public class Example { [OnGameUpdate] internal static void OnGameUpdate () { using (new GUIBodyColorScope(Color32.GREEN)) { // GUI elements inside will have their body color changed } } } Constructors GUIBodyColorScope() Scope that change the body color of GUI element inside Declaration public GUIBodyColorScope() GUIBodyColorScope(Color32) Scope that change the body color of GUI element inside Declaration public GUIBodyColorScope(Color32 color) Methods Dispose() Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources. Declaration public void Dispose()"
  },
  "api/AngeliA.GUIColorScope.html": {
    "href": "api/AngeliA.GUIColorScope.html",
    "title": "Struct GUIColorScope | AngeliA",
    "summary": "Struct GUIColorScope Scope that change the color of GUI element inside Implements IDisposable Examples using AngeliA; namespace AngeliaGame; public class Example { [OnGameUpdate] internal static void OnGameUpdate () { using (new GUIColorScope(Color32.GREEN)) { // GUI elements inside will have their color changed } } } Constructors GUIColorScope(Color32) Scope that change the color of GUI element inside Declaration public GUIColorScope(Color32 color) Methods Dispose() Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources. Declaration public void Dispose()"
  },
  "api/AngeliA.GUIContentColorScope.html": {
    "href": "api/AngeliA.GUIContentColorScope.html",
    "title": "Struct GUIContentColorScope | AngeliA",
    "summary": "Struct GUIContentColorScope Scope that change the content color of GUI element inside Implements IDisposable Examples using AngeliA; namespace AngeliaGame; public class Example { [OnGameUpdate] internal static void OnGameUpdate () { using (new GUIContentColorScope(Color32.GREEN)) { // GUI elements inside will have their content color changed } } } Constructors GUIContentColorScope(Color32) Scope that change the content color of GUI element inside Declaration public GUIContentColorScope(Color32 color) Methods Dispose() Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources. Declaration public void Dispose()"
  },
  "api/AngeliA.GUIEnableScope.html": {
    "href": "api/AngeliA.GUIEnableScope.html",
    "title": "Struct GUIEnableScope | AngeliA",
    "summary": "Struct GUIEnableScope Scope that set enable of GUI elements inside Implements IDisposable Examples using AngeliA; namespace AngeliaGame; public class Example { [OnGameUpdate] internal static void OnGameUpdate () { using (new GUIEnableScope(false)) { // GUI elements inside will be disabled } } } Constructors GUIEnableScope(bool) Scope that set enable of GUI elements inside Declaration public GUIEnableScope(bool enable) Methods Dispose() Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources. Declaration public void Dispose()"
  },
  "api/AngeliA.GUIHorizontalScrollScope.html": {
    "href": "api/AngeliA.GUIHorizontalScrollScope.html",
    "title": "Struct GUIHorizontalScrollScope | AngeliA",
    "summary": "Struct GUIHorizontalScrollScope Scope that make GUI elements inside scrolls Implements IDisposable Examples using AngeliA; namespace AngeliaGame; public class Example { static int ScrollPos; [OnGameUpdate] internal static void OnGameUpdate () { var cameraRect = Renderer.CameraRect; using (var scroll = new GUIHorizontalScrollScope(cameraRect, ScrollPos, 0, 4096)) { ScrollPos = scroll.PositionX; Renderer.Draw(BuiltInSprite.ICON_ENTITY, cameraRect.x + 1024, cameraRect.y, 0, 0, 0, 512, 512); Renderer.Draw(BuiltInSprite.ICON_ENTITY, cameraRect.x + 1024, cameraRect.y + 1024, 0, 0, 0, 512, 512); Renderer.Draw(BuiltInSprite.ICON_ENTITY, cameraRect.x + 1024, cameraRect.y + 2048, 0, 0, 0, 512, 512); } } } Constructors GUIHorizontalScrollScope(IRect, int, int, int, int) Scope that make GUI elements inside scrolls Declaration public GUIHorizontalScrollScope(IRect rect, int positionX, int min = -2147483648, int max = 2147483647, int layer = 7) Fields Scope Declaration public readonly GUIScrollScope Scope Properties PositionX Declaration public int PositionX { get; } Methods Dispose() Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources. Declaration public void Dispose()"
  },
  "api/AngeliA.GUIInteractableScope.html": {
    "href": "api/AngeliA.GUIInteractableScope.html",
    "title": "Struct GUIInteractableScope | AngeliA",
    "summary": "Struct GUIInteractableScope Scope that set interactable of GUI elements inside Implements IDisposable Examples using AngeliA; namespace AngeliaGame; public class Example { [OnGameUpdate] internal static void OnGameUpdate () { using (new GUIInteractableScope(false)) { // GUI elements inside will be not interactable } } } Constructors GUIInteractableScope(bool) Scope that set interactable of GUI elements inside Declaration public GUIInteractableScope(bool interactable) Methods Dispose() Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources. Declaration public void Dispose()"
  },
  "api/AngeliA.GUILabelWidthScope.html": {
    "href": "api/AngeliA.GUILabelWidthScope.html",
    "title": "Struct GUILabelWidthScope | AngeliA",
    "summary": "Struct GUILabelWidthScope Scope that set internal label width of GUI elements inside Implements IDisposable Examples using AngeliA; namespace AngeliaGame; public class Example { [OnGameUpdate] internal static void OnGameUpdate () { using (new GUILabelWidthScope(128)) { // GUI elements inside will have internal label with 128 in width } } } Constructors GUILabelWidthScope(int) Scope that set internal label width of GUI elements inside Declaration public GUILabelWidthScope(int width) Methods Dispose() Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources. Declaration public void Dispose()"
  },
  "api/AngeliA.GUIScrollScope.html": {
    "href": "api/AngeliA.GUIScrollScope.html",
    "title": "Struct GUIScrollScope | AngeliA",
    "summary": "Struct GUIScrollScope Scope that make GUI elements inside scrolls Implements IDisposable Examples using AngeliA; namespace AngeliaGame; public class Example { static Int2 ScrollPos; [OnGameUpdate] internal static void OnGameUpdate () { var cameraRect = Renderer.CameraRect; using (var scroll = new GUIScrollScope(cameraRect, ScrollPos, new Int2(0, -4096), new Int2(0, 4096))) { ScrollPos = scroll.Position; Renderer.Draw(BuiltInSprite.ICON_ENTITY, cameraRect.x + 1024, cameraRect.y, 0, 0, 0, 512, 512); Renderer.Draw(BuiltInSprite.ICON_ENTITY, cameraRect.x + 1024, cameraRect.y + 1024, 0, 0, 0, 512, 512); Renderer.Draw(BuiltInSprite.ICON_ENTITY, cameraRect.x + 1024, cameraRect.y + 2048, 0, 0, 0, 512, 512); } } } Constructors GUIScrollScope(IRect, Int2, Int2, Int2, bool, bool, int) Scope that make GUI elements inside scrolls Declaration public GUIScrollScope(IRect rect, Int2 position, Int2 min, Int2 max, bool mouseWheelForVertical = true, bool reverseMouseWheel = false, int layer = -2147483648) Parameters Type Name Description IRect rect Content rect position in global space Int2 position Scroll position in global space Int2 min Minimal limitation for the scrolling Int2 max Maximal limitation for the scrolling bool mouseWheelForVertical True if the mouse wheel control vertical scroll instead of horizontal bool reverseMouseWheel True if the mouse wheel scroll should reverse in direction int layer Which render layer does it scrolls Fields CellCount Declaration public readonly int CellCount Layer Declaration public readonly int Layer MousePosShift Declaration public readonly Int2 MousePosShift Position Declaration public readonly Int2 Position PrevMouseInputIgnoring Declaration public readonly bool PrevMouseInputIgnoring Rect Declaration public readonly IRect Rect Methods Dispose() Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources. Declaration public void Dispose()"
  },
  "api/AngeliA.GUISkin.html": {
    "href": "api/AngeliA.GUISkin.html",
    "title": "Class GUISkin | AngeliA",
    "summary": "Class GUISkin Fields AutoCenterGreyLabel Declaration public readonly GUIStyle AutoCenterGreyLabel AutoCenterLabel Declaration public readonly GUIStyle AutoCenterLabel AutoDarkLabel Declaration public readonly GUIStyle AutoDarkLabel AutoGreyLabel Declaration public readonly GUIStyle AutoGreyLabel AutoLabel Declaration public readonly GUIStyle AutoLabel AutoRightLabel Declaration public readonly GUIStyle AutoRightLabel Background Declaration public Color32 Background Button Declaration public readonly GUIStyle Button CenterGreyLabel Declaration public readonly GUIStyle CenterGreyLabel CenterLabel Declaration public readonly GUIStyle CenterLabel CenterLabelButton Declaration public readonly GUIStyle CenterLabelButton CenterMessage Declaration public readonly GUIStyle CenterMessage DarkButton Declaration public readonly GUIStyle DarkButton DarkLabel Declaration public readonly GUIStyle DarkLabel Default Default gui skin instance Declaration public static readonly GUISkin Default DeleteTint Declaration public Color32 DeleteTint DialogBG Declaration public readonly GUIStyle DialogBG ErrorTint Declaration public Color32 ErrorTint Frame Declaration public readonly GUIStyle Frame GizmosCursor Declaration public Color32 GizmosCursor GizmosCursorAlt Declaration public Color32 GizmosCursorAlt GizmosDotted Declaration public Color32 GizmosDotted GizmosDottedAlt Declaration public Color32 GizmosDottedAlt GizmosDragging Declaration public Color32 GizmosDragging GizmosDraggingAlt Declaration public Color32 GizmosDraggingAlt GizmosNormal Declaration public Color32 GizmosNormal GizmosSelecting Declaration public Color32 GizmosSelecting GreenPixel Declaration public readonly GUIStyle GreenPixel GreyLabel Declaration public readonly GUIStyle GreyLabel HighlightColor Declaration public Color32 HighlightColor HighlightColorAlt Declaration public Color32 HighlightColorAlt HighlightPixel Declaration public readonly GUIStyle HighlightPixel IconButton Declaration public readonly GUIStyle IconButton InputField Declaration public readonly GUIStyle InputField ItemFrame Declaration public readonly GUIStyle ItemFrame Label Declaration public readonly GUIStyle Label LabelButton Declaration public readonly GUIStyle LabelButton LargeCenterGreyLabel Declaration public readonly GUIStyle LargeCenterGreyLabel LargeCenterLabel Declaration public readonly GUIStyle LargeCenterLabel LargeCenterLabelButton Declaration public readonly GUIStyle LargeCenterLabelButton LargeCenterMessage Declaration public readonly GUIStyle LargeCenterMessage LargeDarkLabel Declaration public readonly GUIStyle LargeDarkLabel LargeGreyLabel Declaration public readonly GUIStyle LargeGreyLabel LargeInputField Declaration public readonly GUIStyle LargeInputField LargeLabel Declaration public readonly GUIStyle LargeLabel LargeLabelButton Declaration public readonly GUIStyle LargeLabelButton LargeMessage Declaration public readonly GUIStyle LargeMessage LargeRightLabel Declaration public readonly GUIStyle LargeRightLabel LargeTextArea Declaration public readonly GUIStyle LargeTextArea LargeToggle Declaration public readonly GUIStyle LargeToggle LinkTint Declaration public Color32 LinkTint LinkTintHover Declaration public Color32 LinkTintHover Message Declaration public readonly GUIStyle Message Name Name of this gui skin Declaration public string Name RightLabel Declaration public readonly GUIStyle RightLabel Scrollbar Declaration public readonly GUIStyle Scrollbar SliderBody Declaration public readonly GUIStyle SliderBody SliderFill Declaration public readonly GUIStyle SliderFill SliderHandle Declaration public readonly GUIStyle SliderHandle SmallButton Declaration public readonly GUIStyle SmallButton SmallCenterGreyLabel Declaration public readonly GUIStyle SmallCenterGreyLabel SmallCenterLabel Declaration public readonly GUIStyle SmallCenterLabel SmallCenterLabelButton Declaration public readonly GUIStyle SmallCenterLabelButton SmallCenterMessage Declaration public readonly GUIStyle SmallCenterMessage SmallDarkButton Declaration public readonly GUIStyle SmallDarkButton SmallDarkLabel Declaration public readonly GUIStyle SmallDarkLabel SmallGreyLabel Declaration public readonly GUIStyle SmallGreyLabel SmallIconButton Declaration public readonly GUIStyle SmallIconButton SmallInputField Declaration public readonly GUIStyle SmallInputField SmallLabel Declaration public readonly GUIStyle SmallLabel SmallLabelButton Declaration public readonly GUIStyle SmallLabelButton SmallMessage Declaration public readonly GUIStyle SmallMessage SmallRightLabel Declaration public readonly GUIStyle SmallRightLabel SmallTextArea Declaration public readonly GUIStyle SmallTextArea TextArea Declaration public readonly GUIStyle TextArea Toggle Declaration public readonly GUIStyle Toggle ToggleMark Declaration public readonly GUIStyle ToggleMark WeakHighlightPixel Declaration public readonly GUIStyle WeakHighlightPixel WeakPixel Declaration public readonly GUIStyle WeakPixel Methods LoadColorFromSheet(Sheet) Declaration public void LoadColorFromSheet(Sheet sheet) LoadColorFromSkin(GUISkin) Declaration public void LoadColorFromSkin(GUISkin otherSkin)"
  },
  "api/AngeliA.GUISkinScope.html": {
    "href": "api/AngeliA.GUISkinScope.html",
    "title": "Struct GUISkinScope | AngeliA",
    "summary": "Struct GUISkinScope Scope that change the skin of the GUI elements inside Implements IDisposable Examples using AngeliA; namespace AngeliaGame; public class Example { [OnGameUpdate] internal static void OnGameUpdate () { using (new GUISkinScope(/*Your GUI Skin*/)) { // GUI elements inside will use the given GUI skin } } } Constructors GUISkinScope() Scope that change the skin of the GUI elements inside Declaration public GUISkinScope() GUISkinScope(GUISkin) Scope that change the skin of the GUI elements inside Declaration public GUISkinScope(GUISkin skin) Methods Dispose() Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources. Declaration public void Dispose()"
  },
  "api/AngeliA.GUIState.html": {
    "href": "api/AngeliA.GUIState.html",
    "title": "Enum GUIState | AngeliA",
    "summary": "Enum GUIState Fields Name Description"
  },
  "api/AngeliA.GUIStyle.html": {
    "href": "api/AngeliA.GUIStyle.html",
    "title": "Class GUIStyle | AngeliA",
    "summary": "Class GUIStyle Constructors GUIStyle(GUIStyle) Declaration public GUIStyle(GUIStyle source = null) Fields Alignment Declaration public Alignment Alignment BodyColor Declaration public Color32 BodyColor BodyColorDisable Declaration public Color32 BodyColorDisable BodyColorDown Declaration public Color32 BodyColorDown BodyColorHover Declaration public Color32 BodyColorHover BodySprite Declaration public int BodySprite BodySpriteDisable Declaration public int BodySpriteDisable BodySpriteDown Declaration public int BodySpriteDown BodySpriteHover Declaration public int BodySpriteHover CharSize Declaration public int CharSize CharSpace Declaration public int CharSpace Clip Declaration public bool Clip ContentColor Declaration public Color32 ContentColor ContentColorDisable Declaration public Color32 ContentColorDisable ContentColorDown Declaration public Color32 ContentColorDown ContentColorHover Declaration public Color32 ContentColorHover LineSpace Declaration public int LineSpace None Declaration public static readonly GUIStyle None Wrap Declaration public WrapMode Wrap Methods GetBodyBorder(GUIState) Declaration public Int4 GetBodyBorder(GUIState state) GetBodyColor(GUIState) Declaration public Color32 GetBodyColor(GUIState state) GetBodySprite(GUIState) Declaration public int GetBodySprite(GUIState state) GetContentBorder(GUIState) Declaration public Int4 GetContentBorder(GUIState state) GetContentColor(GUIState) Declaration public Color32 GetContentColor(GUIState state)"
  },
  "api/AngeliA.GUIVerticalScrollScope.html": {
    "href": "api/AngeliA.GUIVerticalScrollScope.html",
    "title": "Struct GUIVerticalScrollScope | AngeliA",
    "summary": "Struct GUIVerticalScrollScope Scope that make GUI elements inside scrolls Implements IDisposable Examples using AngeliA; namespace AngeliaGame; public class Example { static int ScrollPos; [OnGameUpdate] internal static void OnGameUpdate () { var cameraRect = Renderer.CameraRect; using (var scroll = new GUIVerticalScrollScope(cameraRect, ScrollPos, 0, 4096)) { ScrollPos = scroll.PositionY; Renderer.Draw(BuiltInSprite.ICON_ENTITY, cameraRect.x + 1024, cameraRect.y, 0, 0, 0, 512, 512); Renderer.Draw(BuiltInSprite.ICON_ENTITY, cameraRect.x + 1024, cameraRect.y + 1024, 0, 0, 0, 512, 512); Renderer.Draw(BuiltInSprite.ICON_ENTITY, cameraRect.x + 1024, cameraRect.y + 2048, 0, 0, 0, 512, 512); } } } Constructors GUIVerticalScrollScope(IRect, int, int, int, int) Scope that make GUI elements inside scrolls Declaration public GUIVerticalScrollScope(IRect panelRect, int positionY, int min = -2147483648, int max = 2147483647, int layer = 7) Fields Scope Declaration public readonly GUIScrollScope Scope Properties PositionY Declaration public int PositionY { get; } Methods Dispose() Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources. Declaration public void Dispose()"
  },
  "api/AngeliA.Game.html": {
    "href": "api/AngeliA.Game.html",
    "title": "Class Game | AngeliA",
    "summary": "Class Game Represent an AngeliA game Constructors Game(params string[]) Create a game instance with command-line arguments Declaration public Game(params string[] args) Fields Fonts Instance pool for all available font Declaration public static readonly List<FontData> Fonts MusicPool Instance pool for all available background music Declaration public static readonly Dictionary<int, MusicData> MusicPool SoundPool Instance pool for all available sound effect Declaration public static readonly Dictionary<int, SoundData> SoundPool Properties BuiltInFontCount Declaration public static int BuiltInFontCount { get; } CurrentBGM Instance that represent the background music Declaration public static object CurrentBGM { get; protected set; } CurrentMonitor Get index of the monitor which this application window currently in Declaration public static int CurrentMonitor { get; } CurrentMusicID Audio ID of the current loaded background music Declaration public static int CurrentMusicID { get; } CursorInScreen True if the mouse cursor is currently inside application window Declaration public static bool CursorInScreen { get; } CursorVisible True if the mouse cursor is currently visible Declaration public static bool CursorVisible { get; } DoodleFrame Doodle pixels should be rendered of the global frame is less or equal to (this value + 1) Declaration protected int DoodleFrame { get; } DoodleOnTopOfUiFrame Doodle pixels should cover the UI rendering layer if current global frame less than this value Declaration protected int DoodleOnTopOfUiFrame { get; } DoodleScreenPadding Border size in screen space for the doodle canvas Declaration public static Int4 DoodleScreenPadding { get; set; } FontCount Total count of loaded fonts Declaration public static int FontCount { get; } GamepadLeftStickDirection Get the specific direction of the left gamepad stick Declaration public static Float2 GamepadLeftStickDirection { get; } GamepadRightStickDirection Get the specific direction of the right gamepad stick Declaration public static Float2 GamepadRightStickDirection { get; } GizmosOnTopOfUiFrame Gizmos should cover the UI rendering layer if current global frame less than this value Declaration protected int GizmosOnTopOfUiFrame { get; } GlobalFrame Frame number that grows every 1/60 second Declaration public static int GlobalFrame { get; } IgnoreArtworkPixels True if the application don't need pixel data from artwork sheet Declaration public static bool IgnoreArtworkPixels { get; } IsGamepadAvailable True if any gamepad device is currently available to use Declaration public static bool IsGamepadAvailable { get; } IsKeyboardAvailable True is the keyboard device is currently available to use Declaration public static bool IsKeyboardAvailable { get; } IsMouseAvailable True if the mouse device is currently available to use Declaration public static bool IsMouseAvailable { get; } IsMouseLeftHolding True if the mouse left button is currently holding Declaration public static bool IsMouseLeftHolding { get; } IsMouseMidHolding True if the mouse middle button is currently holding Declaration public static bool IsMouseMidHolding { get; } IsMouseRightHolding True if the mouse right button is currently holding Declaration public static bool IsMouseRightHolding { get; } IsMusicPlaying True if the background music is currently playing Declaration public static bool IsMusicPlaying { get; } IsPausing True if the game is currently pausing Declaration public static bool IsPausing { get; } IsPlaying True if the game is currently not pausing Declaration public static bool IsPlaying { get; } IsToolApplication True if the application should be treated as tool instead of game Declaration public static bool IsToolApplication { get; } IsWindowDecorated If the application window has title bar and border frame or not Declaration public static bool IsWindowDecorated { get; set; } IsWindowFocused True if the application window is currently focused Declaration public static bool IsWindowFocused { get; } IsWindowMaximized If the application window is currently maximized Declaration public static bool IsWindowMaximized { get; set; } IsWindowMinimized If the application window is currently minimized Declaration public static bool IsWindowMinimized { get; set; } IsWindowResizable If the application window can be resize by the user Declaration public static bool IsWindowResizable { get; set; } IsWindowTopmost If the application window renders on top of all other windows Declaration public static bool IsWindowTopmost { get; set; } MonitorHeight Height of the monitor which the application currently inside Declaration public static int MonitorHeight { get; } MonitorWidth Width of the monitor which the application currently inside Declaration public static int MonitorWidth { get; } MouseScreenPosition Mouse position in screen space. (0,0) means top-left corner Declaration public static Int2 MouseScreenPosition { get; } MouseScrollDelta Mouse wheel scrolling value at current frame. Return negative value when the page scrolls down (the content appears to move upward) Declaration public static int MouseScrollDelta { get; } MusicVolume Volume amount for the background music (0 for mute, 1000 for loudest) Declaration public static int MusicVolume { get; set; } PauselessFrame Frame number that still grows when the game is pausing Declaration public static int PauselessFrame { get; } ProcedureAudioVolume Audio volume used by internal script Declaration public static int ProcedureAudioVolume { get; set; } ScaledMusicVolume Music volume that effect by the internal procedure audio volume Declaration public static float ScaledMusicVolume { get; } ScaledSoundVolume Sound volume that effect by the internal procedure audio volume Declaration public static float ScaledSoundVolume { get; } ScreenEffectPadding Border size of all screen effects Declaration public static Int4 ScreenEffectPadding { get; set; } ScreenHeight Height of the application window Declaration public static int ScreenHeight { get; } ScreenWidth Width of the application window Declaration public static int ScreenWidth { get; } SettleFrame Frame number that could be reset by the stage Declaration public static int SettleFrame { get; } ShowingDoodle True if the doodle pixels are displaying at this frame Declaration public static bool ShowingDoodle { get; } SoundVolume Volume amount for the sound effect (0 for mute, 1000 for loudest) Declaration public static int SoundVolume { get; set; } Methods CancelDoodleOnTopOfUI() Do not make doodle pixels cover UI rendering layer anymore. Declaration public static void CancelDoodleOnTopOfUI() CancelForceTargetFramerate() Do not override the target framerate anymore Declaration public static void CancelForceTargetFramerate() CancelGizmosOnTopOfUI() Do not make gizmos cover UI rendering layer anymore. Declaration public static void CancelGizmosOnTopOfUI() CenterCursor() Move the mouse cursor to the center of screen. This works when mouse cursor is hidding. Declaration public static void CenterCursor() ClearAndUnloadAudioPool() Reset audio pool and unload the data in the memory Declaration public static void ClearAndUnloadAudioPool() CreateNewFontData() Create a new instance of the internal data for font Declaration protected abstract FontData CreateNewFontData() DoodleRect(FRect, Color32) Doodle the given color as pixels into the screen-space canvas. Pixels remains on screen until you hide all doodle or reset the canvas. Declaration public static void DoodleRect(FRect screenRect, Color32 color) Parameters Type Name Description FRect screenRect Rect position in screen space DoodleRectSwap(FRect, Color32) Doodle the given color as pixels into the screen-space canvas. Pixels remains on screen until you hide all doodle or reset the canvas. Declaration public static void DoodleRectSwap(FRect screenRect, Color32 color) Parameters Type Name Description FRect screenRect Rect position in screen space that swap around when out of range DoodleWorld(IBlockSquad, FRect, IRect, int, bool, bool, bool, bool) Doodle the given map data on screen based on summary tint from rendering sheet Declaration public static void DoodleWorld(IBlockSquad squad, FRect screenRect, IRect worldUnitRange, int z, bool ignoreLevel = false, bool ignoreBG = false, bool ignoreEntity = false, bool ignoreElement = true) Parameters Type Name Description IBlockSquad squad Source of the map block data FRect screenRect Position rect in screen space for the given world-unit-range IRect worldUnitRange Rect range on the map in unit space int z Position Z on the map bool ignoreLevel True if level blocks should be ignored bool ignoreBG True if background blocks should be ignored bool ignoreEntity True if entity blocks should be ignored bool ignoreElement True if element blocks should be ignored DrawGizmosFrame(IRect, Color32, Int4, Int4) Draw a holo rectangle as gizmos for current frame Declaration public static void DrawGizmosFrame(IRect rect, Color32 color, Int4 thickness, Int4 gap = default) Parameters Type Name Description IRect rect Rect position in global space Color32 color Color tint Int4 thickness Border size in global space Int4 gap How big the fracture part in the middle in global space DrawGizmosFrame(IRect, Color32, int, int) Draw a holo rectangle as gizmos for current frame Declaration public static void DrawGizmosFrame(IRect rect, Color32 color, int thickness, int gap = 0) Parameters Type Name Description IRect rect Rect position in global space Color32 color Color tint int thickness Border size in global space int gap How big the fracture part in the middle in global space DrawGizmosLine(int, int, int, int, int, Color32) Draw a line as gizmos for current frame Declaration public static void DrawGizmosLine(int startX, int startY, int endX, int endY, int thickness, Color32 color) Parameters Type Name Description int startX Start point of the line in global space int startY Start point of the line in global space int endX End point of the line in global space int endY End point of the line in global space int thickness Thickness in global space Color32 color Color tint DrawGizmosRect(IRect, Color32) Draw a rectangle as gizmos for current frame Declaration public static void DrawGizmosRect(IRect rect, Color32 color) Parameters Type Name Description IRect rect Rect position in global space Color32 color Color tint DrawGizmosRect(IRect, Color32, Color32) Draw a rectangle as gizmos for current frame Declaration public static void DrawGizmosRect(IRect rect, Color32 colorT, Color32 colorB) Parameters Type Name Description IRect rect Rect position in global space Color32 colorT Color tint Color32 colorB Color tint DrawGizmosRect(IRect, Color32, Color32, Color32, Color32) Draw a rectangle as gizmos for current frame Declaration public static void DrawGizmosRect(IRect rect, Color32 colorTL, Color32 colorTR, Color32 colorBL, Color32 colorBR) Parameters Type Name Description IRect rect Rect position in global space Color32 colorTL Color tint Color32 colorTR Color tint Color32 colorBL Color tint Color32 colorBR Color tint DrawGizmosTexture(IRect, FRect, object, Color32, bool, bool, bool) Draw the given texture as gizmos for current frame Declaration public static void DrawGizmosTexture(IRect rect, FRect uv, object texture, Color32 tint, bool inverse = false, bool flipX = false, bool flipY = false) Parameters Type Name Description IRect rect Rect position FRect uv Which part of this texture should be draw. (0, 0, 1, 1) means all of them. (0, 0, 0.5f, 1) means left half. Color32 tint Color tint bool inverse True if the texture display as the inversed color of the current rendered pixel on screen. DrawGizmosTexture(IRect, FRect, object, bool, bool, bool) Draw the given texture as gizmos for current frame Declaration public static void DrawGizmosTexture(IRect rect, FRect uv, object texture, bool inverse = false, bool flipX = false, bool flipY = false) Parameters Type Name Description IRect rect Rect position FRect uv Which part of this texture should be draw. (0, 0, 1, 1) means all of them. (0, 0, 0.5f, 1) means left half. bool inverse True if the texture display as the inversed color of the current rendered pixel on screen. DrawGizmosTexture(IRect, object, Color32, bool, bool, bool) Draw the given texture as gizmos for current frame Declaration public static void DrawGizmosTexture(IRect rect, object texture, Color32 tint, bool inverse = false, bool flipX = false, bool flipY = false) Parameters Type Name Description IRect rect Rect position Color32 tint Color tint bool inverse True if the texture display as the inversed color of the current rendered pixel on screen. DrawGizmosTexture(IRect, object, bool, bool, bool) Draw the given texture as gizmos for current frame Declaration public static void DrawGizmosTexture(IRect rect, object texture, bool inverse = false, bool flipX = false, bool flipY = false) Parameters Type Name Description IRect rect Rect position bool inverse True if the texture display as the inversed color of the current rendered pixel on screen. FillPixelsIntoTexture(Color32[], object) Set the given pixel data into the given texture instance. Declaration public static void FillPixelsIntoTexture(Color32[] pixels, object texture) FillResizedTexture(object, object, bool) Copy data from source texture into target texture. Stretch resize the content if two textures have different size. Declaration public static void FillResizedTexture(object sourceTexture, object targetTexture, bool nearestNeighbor = true) bool nearestNeighbor True if the misaligned pixels should be averaged with it's nearby pixels ForAllPressingCharsThisFrame() Iterate through all pressing character at current frame. Not include non-character keys Declaration public static IEnumerable<char> ForAllPressingCharsThisFrame() ForAllPressingKeysThisFrame() Iterate through all pressing keyboard keys at current frame. Include non-character keys Declaration public static IEnumerable<KeyboardKey> ForAllPressingKeysThisFrame() ForceDoodleOnTopOfUI(int) Make doodle pixels cover UI rendering layer for given frames long. Declaration public static void ForceDoodleOnTopOfUI(int duration = 0) ForceGizmosOnTopOfUI(int) Make gizmos cover UI rendering layer for given frames long. Declaration public static void ForceGizmosOnTopOfUI(int duration = 0) ForceTargetFramerate(int, int) Override the target framerate for specified frames long Declaration public static void ForceTargetFramerate(int framerate, int duration = 1) GetCameraRectFromViewRect(IRect) Calculate the camera rect based on given view rect Declaration public static IRect GetCameraRectFromViewRect(IRect viewRect) GetCharPressed() Get the current pressing charcter and remove it from internal queue. Return '\\0' if no character is pressed. Declaration protected abstract char GetCharPressed() GetCharSprite(int, char, out CharSprite) Get artwork sprite for rendering a text character Declaration public static bool GetCharSprite(int fontIndex, char c, out CharSprite result) Returns Type Description bool True if the sprite is successfuly required GetClipboardText() Text content of the current system clipboard Declaration public static string GetClipboardText() GetEffectEnable(int) True if the given screen effect is currently enabled. Declaration public static bool GetEffectEnable(int effectIndex) Parameters Type Name Description int effectIndex Use Const.SCREEN_EFFECT_XXXX for this index GetKeyPressed() Get the current pressing keyboard key and remove it from internal queue. Return null if no key is pressed. Declaration protected abstract KeyboardKey? GetKeyPressed() GetMonitorHeight(int) Get height of the current monitor. Use Game.CurrentMonitor to get the monitor index Declaration public static int GetMonitorHeight(int monitor) GetMonitorWidth(int) Get width of the current monitor. Use Game.CurrentMonitor to get the monitor index Declaration public static int GetMonitorWidth(int monitor) GetPixelsFromTexture(object) Create a new instance of Color32 array from the given texture Declaration public static Color32[] GetPixelsFromTexture(object texture) Returns Type Description Color32[] Return [] when invalid. Don't throw exception. GetResizedTexture(object, int, int, bool) Create a new instance of texture which is the resized version of the given texture. Declaration public static object GetResizedTexture(object texture, int newWidth, int newHeight, bool nearestNeighbor = true) bool nearestNeighbor True if the misaligned pixels should be averaged with it's nearby pixels Returns Type Description object Return null if invalid. Don't throw exception. GetScreenRenderingTexture() Get the instance of the internal texture that holds the pixel data on screen Declaration public static object GetScreenRenderingTexture() GetTargetFramerate() Declaration public static int GetTargetFramerate() GetTextureFromPixels(Color32[], int, int) Create a new instance of texture from given pixels data. Declaration public static object GetTextureFromPixels(Color32[] pixels, int width, int height) Parameters Type Name Description Color32[] pixels Pixel data. 0 means bottom-left corner. 1 makes it goes right for 1 pixel. int width Width of the pixel data in pixel int height Heigh of the pixel data in pixel Returns Type Description object Never return null and Don't throw exception. GetTextureID(object) Get internal ID of the given texture instance. Declaration public static uint? GetTextureID(object texture) GetTextureSize(object) Get the size in pixel of the given texture instance Declaration public static Int2 GetTextureSize(object texture) Returns Type Description Int2 Return default when invalid. Don't throw exception. GetViewWidthFromViewHeight(int) Calculate view rect width based on given view rect height Declaration public static int GetViewWidthFromViewHeight(int viewHeight) GetWindowPosition() Get application window position. (0,0) is top-left corner Declaration public static Int2 GetWindowPosition() HideCursor() Make the mouse cursor disappear (not only for the current frame) Declaration public static void HideCursor() HideDoodle() Do not display doodled pixels Declaration public static void HideDoodle() IgnoreGizmos(int) Hide all gizmos for given frames long. Declaration public static void IgnoreGizmos(int duration = 0) Initialize() Call this function once to initialize the game. Must be called before any Update function called. Declaration public void Initialize() InvokeFileDropped(string) Invoke OnFileDropped event Declaration protected void InvokeFileDropped(string path) Parameters Type Name Description string path Path of the dropped file InvokeGameQuitting() Invoke the OnGameQuitting event Declaration protected void InvokeGameQuitting() InvokeGameTryingToQuit() Invoke the OnGameTryingToQuit event Declaration protected bool InvokeGameTryingToQuit() Returns Type Description bool True if the game should quit InvokeWindowFocusChanged(bool) Invoke OnGameFocus/OnGameLostFocus event Declaration protected void InvokeWindowFocusChanged(bool focus) IsGamepadKeyHolding(GamepadKey) True if the given gamepad button is currently holding Declaration public static bool IsGamepadKeyHolding(GamepadKey key) IsGamepadLeftStickHolding(Direction4) True if the left gamepad stick is tilting to given direction Declaration public static bool IsGamepadLeftStickHolding(Direction4 direction) IsGamepadRightStickHolding(Direction4) True if the right gamepad stick is tilting to given direction Declaration public static bool IsGamepadRightStickHolding(Direction4 direction) IsKeyboardKeyHolding(KeyboardKey) True if the given keyboard key is currently holding Declaration public static bool IsKeyboardKeyHolding(KeyboardKey key) IsTextureReady(object) True if the given texture instance is ready to use Declaration public static bool IsTextureReady(object texture) LoadFontsIntoPool(string, bool) Load font file into system pool from given folder Declaration public static void LoadFontsIntoPool(string rootPath, bool builtIn) bool builtIn True if the fonts are used for built-in font MakeWindowFocused() Make the application window focused Declaration public static void MakeWindowFocused() OpenUrl(string) Open the given url with OS default application Declaration public static void OpenUrl(string url) PassEffect(int, int) Active screen effect for given frames long. Declaration public static void PassEffect(int effectIndex, int duration = 0) Parameters Type Name Description int effectIndex Use Const.SCREEN_EFFECT_XXXX for this index PassEffect_Greyscale(int) Enable greyscale screen effect Declaration public static void PassEffect_Greyscale(int duration = 0) Examples using AngeliA; namespace AngeliaGame; public class Example { [OnGameUpdate] internal static void OnGameUpdate () { Game.PassEffect_Greyscale(1); } } PassEffect_Invert(int) Enable invert screen effect Declaration public static void PassEffect_Invert(int duration = 0) Examples using AngeliA; namespace AngeliaGame; public class Example { [OnGameUpdate] internal static void OnGameUpdate () { Game.PassEffect_Invert(1); } } PassEffect_RetroDarken(float, float, int) Enable darken screen effect and set the params Declaration public static void PassEffect_RetroDarken(float amount, float step = 8, int duration = 0) Parameters Type Name Description float amount 0 means no darken, 1 means full darken float step How intermittent the darken should be. Default 8 steps. Examples using AngeliA; namespace AngeliaGame; public class Example { [OnGameUpdate] internal static void OnGameUpdate () { Game.PassEffect_RetroDarken( QTest.Float(\"amount\", 0f, 0f, 1f), QTest.Float(\"step\", 8f, 2f, 16f), 1 ); } } PassEffect_RetroLighten(float, float, int) Enable lighten screen effect and set the params Declaration public static void PassEffect_RetroLighten(float amount, float step = 8, int duration = 0) Parameters Type Name Description float amount 0 means no lighten, 1 means full lighten float step How intermittent the lighten should be. Default 8 steps. Examples using AngeliA; namespace AngeliaGame; public class Example { [OnGameUpdate] internal static void OnGameUpdate () { Game.PassEffect_RetroLighten( QTest.Float(\"amount\", 0f, 0f, 1f), QTest.Float(\"step\", 8f, 2f, 16f), 1 ); } } PassEffect_Tint(Color32, int) Enable color tint screen effect and set the params Declaration public static void PassEffect_Tint(Color32 color, int duration = 0) Examples using AngeliA; namespace AngeliaGame; public class Example { [OnGameUpdate] internal static void OnGameUpdate () { var color = new Color32( (byte)QTest.Int(\"r\", 255, 0, 255), (byte)QTest.Int(\"g\", 255, 0, 255), (byte)QTest.Int(\"b\", 255, 0, 255) ); Game.PassEffect_Tint(color, 1); } } PassEffect_Vignette(float, float, float, float, float, int) Enable vignette screen effect and set the params Declaration public static void PassEffect_Vignette(float radius, float feather, float offsetX, float offsetY, float round, int duration = 0) Parameters Type Name Description float radius Size of the circle view. 0 means no view. 1 means the view covers whole screen. float feather How smooth is the edge of the circle view. 0 means sharp edge. 1 means smooth edge. float offsetX Position offset of the circle view. 0 means view's center at left edge of screen. 1 for right edge. float offsetY Position offset of the circle view. 0 means view's center at bottom edge of screen. 1 for top edge. float round How perfect the circle view is. 0 means the aspect ratio is the same with window aspect ratio. 1 means perfect circle. Examples using AngeliA; namespace AngeliaGame; public class Example { [OnGameUpdate] internal static void OnGameUpdate () { Game.PassEffect_Vignette( QTest.Float(\"radius\", 1f, 0f, 1f), QTest.Float(\"feather\", 0f, 0f, 1f), QTest.Float(\"x\", 0f, -1f, 1f), QTest.Float(\"y\", 0f, -1f, 1f), QTest.Float(\"round\", 0f, 0f, 1f), 1 ); } } PauseGame() Pause the game from playing Declaration public static void PauseGame() PauseMusic() Pause the background music Declaration public static void PauseMusic() PlayMusic(int, bool) Load the music file, create the stream and play it as the background music Declaration public static void PlayMusic(int id, bool fromStart = false) Parameters Type Name Description int id ID of the audio bool fromStart True if seek the music to start PlaySound(int, float, float, float) Play a sound Declaration public static void PlaySound(int id, float volume = 1, float pitch = 1, float pan = 0.5) Parameters Type Name Description int id Audio ID PngBytesToTexture(byte[]) Create a new instance of texture from a byte array load from png file. Declaration public static object PngBytesToTexture(byte[] bytes) Returns Type Description object Never return null and Don't throw exception. QuitApplication() Make the application quit without any confirmation Declaration public static void QuitApplication() ResetDoodle() Clear the doodle pixels canvas Declaration public static void ResetDoodle() RestartGame() Invoke the OnGameRestart event. The game-play logic will be reset after this is called Declaration public static void RestartGame() SetClipboardText(string) Set the text content of the system clipboard Declaration public static void SetClipboardText(string text) SetCursor(int) Set the appearance of the mouse cursor. Use Const.CURSOR_XXX for the index param Declaration public static void SetCursor(int index) SetCursorToNormal() Set the mouse cursor to default Declaration public static void SetCursorToNormal() SetDoodleOffset(Float2) Set position offset of the doodle pixels. x=1 means right shift the whole screen width. Declaration public static void SetDoodleOffset(Float2 screenOffset) SetDoodleZoom(float) Set zoom amount of the doodle pixels. 1 means general size. 2 means zoom-in to double the size. Declaration public static void SetDoodleZoom(float zoom) SetEffectEnable(int, bool) Make given screen effect enable of disable. Declaration public static void SetEffectEnable(int effectIndex, bool enable) Parameters Type Name Description int effectIndex Use Const.SCREEN_EFFECT_XXXX for this index SetEventWaiting(bool) Set to true to make the application only repaint when a user input happens Declaration public static void SetEventWaiting(bool enable) SetMusicVolume(int) Set volume for the background music (0 means mute, 1000 means loudest) Declaration public static void SetMusicVolume(int volume) SetSoundVolume(int) Set volume for all sound effects Declaration public static void SetSoundVolume(int volume) SetWindowIcon(int) Set the icon of the application window using a loaded artwork sprite from the main sheet Declaration public static void SetWindowIcon(int spriteID) SetWindowMinSize(int) Set the minimal size limitation of the application window Declaration public static void SetWindowMinSize(int size) SetWindowPosition(int, int) Set application window position. (0,0) is top-left corner Declaration public static void SetWindowPosition(int x, int y) SetWindowSize(int, int) Set application window size. Use Game.GetMonitorWidth and Game.GetMonitorHeight to get the size of screen size Declaration public static void SetWindowSize(int x, int y) SetWindowTitle(string) Set to title text of the application window Declaration public static void SetWindowTitle(string title) Settle() Mark the game frame as settled. Declaration public static void Settle() ShowCursor() Make the mouse cursor appear (not only for the current frame) Declaration public static void ShowCursor() ShowDoodle(int) Display the doodled pixels Declaration public static void ShowDoodle(int duration = 0) StopAllSounds() Stop all sound effects that currently playing Declaration public static void StopAllSounds() StopMusic() Stop the music stream and unload from memory Declaration public static void StopMusic() SyncAudioPool(params string[]) Update audio files between system pool and file Declaration public static void SyncAudioPool(params string[] universeRoots) Parameters Type Name Description string[] universeRoots Folder path of the universe SyncFontsWithPool(string) Reload font file if any font is modified Declaration public static bool SyncFontsWithPool(string rootPath) TextureToPngBytes(object) Encode the given texture instance into png byte array. Declaration public static byte[] TextureToPngBytes(object texture) Returns Type Description byte[] Return [] when invalid. Don't throw exception. UnloadFontsFromPool(bool) Unload fonts from system pool Declaration public static void UnloadFontsFromPool(bool ignoreBuiltIn = true) UnloadTexture(object) Unload the given texture instance from memory Declaration public static void UnloadTexture(object texture) UnpauseGame() Continue game from pausing Declaration public static void UnpauseGame() UnpauseMusic() Resume the background music Declaration public static void UnpauseMusic() Update() Call this function 60 times per second. Only call this after Initialize has been called. Declaration public void Update() _AfterAllLayersUpdate() This function is called after all rendering layer get updated Declaration protected abstract void _AfterAllLayersUpdate() _BeforeAllLayersUpdate() This function is called before any rendering layer get updated Declaration protected abstract void _BeforeAllLayersUpdate() _CenterCursor() Move the mouse cursor to the center of screen. This works when mouse cursor is hidding. Declaration protected abstract void _CenterCursor() _CursorInScreen() True if the mouse cursor is currently inside application window Declaration protected abstract bool _CursorInScreen() _CursorVisible() True if the mouse cursor is currently visible Declaration protected abstract bool _CursorVisible() _DoodleRect(FRect, Color32) Doodle the given color as pixels into the screen-space canvas. Pixels remains on screen until you hide all doodle or reset the canvas. Declaration protected abstract void _DoodleRect(FRect screenRect, Color32 color) Parameters Type Name Description FRect screenRect Rect position in screen space _DoodleWorld(IBlockSquad, FRect, IRect, int, bool, bool, bool, bool) Doodle the given map data on screen based on summary tint from rendering sheet Declaration protected abstract void _DoodleWorld(IBlockSquad squad, FRect screenRect, IRect worldUnitRange, int z, bool ignoreLevel = false, bool ignoreBG = false, bool ignoreEntity = false, bool ignoreElement = true) Parameters Type Name Description IBlockSquad squad Source of the map block data FRect screenRect Position rect in screen space for the given world-unit-range IRect worldUnitRange Rect range on the map in unit space int z Position Z on the map bool ignoreLevel True if level blocks should be ignored bool ignoreBG True if background blocks should be ignored bool ignoreEntity True if entity blocks should be ignored bool ignoreElement True if element blocks should be ignored _DrawGizmosLine(int, int, int, int, int, Color32) Draw a line as gizmos for current frame Declaration protected abstract void _DrawGizmosLine(int startX, int startY, int endX, int endY, int thickness, Color32 color) Parameters Type Name Description int startX Start point of the line in global space int startY Start point of the line in global space int endX End point of the line in global space int endY End point of the line in global space int thickness Thickness in global space Color32 color Color tint _DrawGizmosRect(IRect, Color32) Draw a rectangle as gizmos for current frame Declaration protected abstract void _DrawGizmosRect(IRect rect, Color32 color) Parameters Type Name Description IRect rect Rect position in global space Color32 color Color tint _DrawGizmosRect(IRect, Color32, Color32) Draw a rectangle as gizmos for current frame Declaration protected abstract void _DrawGizmosRect(IRect rect, Color32 colorT, Color32 colorB) Parameters Type Name Description IRect rect Rect position in global space Color32 colorT Color tint Color32 colorB Color tint _DrawGizmosRect(IRect, Color32, Color32, Color32, Color32) Draw a rectangle as gizmos for current frame Declaration protected abstract void _DrawGizmosRect(IRect rect, Color32 colorTL, Color32 colorTR, Color32 colorBL, Color32 colorBR) Parameters Type Name Description IRect rect Rect position in global space Color32 colorTL Color tint Color32 colorTR Color tint Color32 colorBL Color tint Color32 colorBR Color tint _DrawGizmosTexture(IRect, FRect, object, Color32, bool, bool, bool) Draw the given texture as gizmos for current frame Declaration protected abstract void _DrawGizmosTexture(IRect rect, FRect uv, object texture, Color32 tint, bool inverse, bool flipX, bool flipY) Parameters Type Name Description IRect rect Rect position FRect uv Which part of this texture should be draw. (0, 0, 1, 1) means all of them. (0, 0, 0.5f, 1) means left half. Color32 tint Color tint bool inverse True if the texture display as the inversed color of the current rendered pixel on screen. _Effect_SetDarkenParams(float, float) Enable darken screen effect and set the params Declaration protected abstract void _Effect_SetDarkenParams(float amount, float step) Parameters Type Name Description float amount 0 means no darken, 1 means full darken float step How intermittent the darken should be. Default 8 steps. Examples using AngeliA; namespace AngeliaGame; public class Example { [OnGameUpdate] internal static void OnGameUpdate () { Game.PassEffect_RetroDarken( QTest.Float(\"amount\", 0f, 0f, 1f), QTest.Float(\"step\", 8f, 2f, 16f), 1 ); } } _Effect_SetLightenParams(float, float) Enable lighten screen effect and set the params Declaration protected abstract void _Effect_SetLightenParams(float amount, float step) Parameters Type Name Description float amount 0 means no lighten, 1 means full lighten float step How intermittent the lighten should be. Default 8 steps. Examples using AngeliA; namespace AngeliaGame; public class Example { [OnGameUpdate] internal static void OnGameUpdate () { Game.PassEffect_RetroLighten( QTest.Float(\"amount\", 0f, 0f, 1f), QTest.Float(\"step\", 8f, 2f, 16f), 1 ); } } _Effect_SetTintParams(Color32) Enable color tint screen effect and set the params Declaration protected abstract void _Effect_SetTintParams(Color32 color) Examples using AngeliA; namespace AngeliaGame; public class Example { [OnGameUpdate] internal static void OnGameUpdate () { var color = new Color32( (byte)QTest.Int(\"r\", 255, 0, 255), (byte)QTest.Int(\"g\", 255, 0, 255), (byte)QTest.Int(\"b\", 255, 0, 255) ); Game.PassEffect_Tint(color, 1); } } _Effect_SetVignetteParams(float, float, float, float, float) Enable vignette screen effect and set the params Declaration protected abstract void _Effect_SetVignetteParams(float radius, float feather, float offsetX, float offsetY, float round) Parameters Type Name Description float radius Size of the circle view. 0 means no view. 1 means the view covers whole screen. float feather How smooth is the edge of the circle view. 0 means sharp edge. 1 means smooth edge. float offsetX Position offset of the circle view. 0 means view's center at left edge of screen. 1 for right edge. float offsetY Position offset of the circle view. 0 means view's center at bottom edge of screen. 1 for top edge. float round How perfect the circle view is. 0 means the aspect ratio is the same with window aspect ratio. 1 means perfect circle. Examples using AngeliA; namespace AngeliaGame; public class Example { [OnGameUpdate] internal static void OnGameUpdate () { Game.PassEffect_Vignette( QTest.Float(\"radius\", 1f, 0f, 1f), QTest.Float(\"feather\", 0f, 0f, 1f), QTest.Float(\"x\", 0f, -1f, 1f), QTest.Float(\"y\", 0f, -1f, 1f), QTest.Float(\"round\", 0f, 0f, 1f), 1 ); } } _FillPixelsIntoTexture(Color32[], object) Set the given pixel data into the given texture instance. Declaration protected abstract void _FillPixelsIntoTexture(Color32[] pixels, object texture) _FillResizedTexture(object, object, bool) Copy data from source texture into target texture. Stretch resize the content if two textures have different size. Declaration protected abstract void _FillResizedTexture(object sourceTexture, object targetTexture, bool nearestNeighbor = true) bool nearestNeighbor True if the misaligned pixels should be averaged with it's nearby pixels _GetCharSprite(int, char, out CharSprite) Get artwork sprite for rendering a text character Declaration protected abstract bool _GetCharSprite(int fontIndex, char c, out CharSprite result) Returns Type Description bool True if the sprite is successfuly required _GetClipboardText() Text content of the current system clipboard Declaration protected abstract string _GetClipboardText() _GetCurrentMonitor() Get index of the monitor which this application window currently in Declaration protected abstract int _GetCurrentMonitor() _GetCurrentMusicID() Audio ID of the current loaded background music Declaration protected abstract int _GetCurrentMusicID() _GetEffectEnable(int) True if the given screen effect is currently enabled. Declaration protected abstract bool _GetEffectEnable(int effectIndex) Parameters Type Name Description int effectIndex Use Const.SCREEN_EFFECT_XXXX for this index _GetFontCount() Total count of loaded fonts Declaration protected abstract int _GetFontCount() _GetGamepadLeftStickDirection() Get the specific direction of the left gamepad stick Declaration protected abstract Float2 _GetGamepadLeftStickDirection() _GetGamepadRightStickDirection() Get the specific direction of the right gamepad stick Declaration protected abstract Float2 _GetGamepadRightStickDirection() _GetMonitorHeight(int) Get height of the current monitor. Use Game.CurrentMonitor to get the monitor index Declaration protected abstract int _GetMonitorHeight(int monitor) _GetMonitorWidth(int) Get width of the current monitor. Use Game.CurrentMonitor to get the monitor index Declaration protected abstract int _GetMonitorWidth(int monitor) _GetMouseScreenPosition() Mouse position in screen space. (0,0) means top-left corner Declaration protected abstract Int2 _GetMouseScreenPosition() _GetMouseScrollDelta() Mouse wheel scrolling value at current frame. Return negative value when the page scrolls down (the content appears to move upward) Declaration protected abstract int _GetMouseScrollDelta() _GetPixelsFromTexture(object) Create a new instance of Color32 array from the given texture Declaration protected abstract Color32[] _GetPixelsFromTexture(object texture) Returns Type Description Color32[] Return [] when invalid. Don't throw exception. _GetResizedTexture(object, int, int, bool) Create a new instance of texture which is the resized version of the given texture. Declaration protected abstract object _GetResizedTexture(object texture, int newWidth, int newHeight, bool nearestNeighbor = true) bool nearestNeighbor True if the misaligned pixels should be averaged with it's nearby pixels Returns Type Description object Return null if invalid. Don't throw exception. _GetScreenHeight() Height of the application window Declaration protected abstract int _GetScreenHeight() _GetScreenRenderingTexture() Declaration protected abstract object _GetScreenRenderingTexture() _GetScreenWidth() Width of the application window Declaration protected abstract int _GetScreenWidth() _GetTextureFromPixels(Color32[], int, int) Create a new instance of texture from given pixels data. Declaration protected abstract object _GetTextureFromPixels(Color32[] pixels, int width, int height) Parameters Type Name Description Color32[] pixels Pixel data. 0 means bottom-left corner. 1 makes it goes right for 1 pixel. int width Width of the pixel data in pixel int height Heigh of the pixel data in pixel Returns Type Description object Never return null and Don't throw exception. _GetTextureID(object) Get internal ID of the given texture instance. Declaration protected abstract uint? _GetTextureID(object texture) _GetTextureSize(object) Get the size in pixel of the given texture instance Declaration protected abstract Int2 _GetTextureSize(object texture) Returns Type Description Int2 Return default when invalid. Don't throw exception. _GetWindowDecorated() True if the application window is currently having Title bar and border frame Declaration protected abstract bool _GetWindowDecorated() _GetWindowMaximized() True if the application window is currently maximized Declaration protected abstract bool _GetWindowMaximized() _GetWindowMinimized() True if the application window is currently minimized Declaration protected abstract bool _GetWindowMinimized() _GetWindowPosition() Get application window position. (0,0) is top-left corner Declaration protected abstract Int2 _GetWindowPosition() _GetWindowResizable() True if the application window can be resize by the user Declaration protected abstract bool _GetWindowResizable() _GetWindowTopmost() True if the application window renders on top of all other windows Declaration protected abstract bool _GetWindowTopmost() _HideCursor() Make the mouse cursor disappear (not only for the current frame) Declaration protected abstract void _HideCursor() _IgnoreGizmos(int) Hide all gizmos for given frames long. Declaration protected abstract void _IgnoreGizmos(int duration = 0) _IsGamepadAvailable() True if any gamepad device is currently available to use Declaration protected abstract bool _IsGamepadAvailable() _IsGamepadKeyHolding(GamepadKey) True if the given gamepad button is currently holding Declaration protected abstract bool _IsGamepadKeyHolding(GamepadKey key) _IsGamepadLeftStickHolding(Direction4) True if the left gamepad stick is tilting to given direction Declaration protected abstract bool _IsGamepadLeftStickHolding(Direction4 direction) _IsGamepadRightStickHolding(Direction4) True if the right gamepad stick is tilting to given direction Declaration protected abstract bool _IsGamepadRightStickHolding(Direction4 direction) _IsKeyboardAvailable() True is the keyboard device is currently available to use Declaration protected abstract bool _IsKeyboardAvailable() _IsKeyboardKeyHolding(KeyboardKey) True if the given keyboard key is currently holding Declaration protected abstract bool _IsKeyboardKeyHolding(KeyboardKey key) _IsMouseAvailable() True if the mouse device is currently available to use Declaration protected abstract bool _IsMouseAvailable() _IsMouseLeftHolding() True if the mouse left button is currently holding Declaration protected abstract bool _IsMouseLeftHolding() _IsMouseMidHolding() True if the mouse middle button is currently holding Declaration protected abstract bool _IsMouseMidHolding() _IsMouseRightHolding() True if the mouse right button is currently holding Declaration protected abstract bool _IsMouseRightHolding() _IsMusicPlaying() True if the background music is currently playing Declaration protected abstract bool _IsMusicPlaying() _IsTextureReady(object) True if the given texture instance is ready to use Declaration protected abstract bool _IsTextureReady(object texture) _IsWindowFocused() True if the application window is currently focused Declaration protected abstract bool _IsWindowFocused() _LoadSound(string) Load a audio file as sound effect Declaration protected abstract object _LoadSound(string filePath) _LoadSoundAlias(object) Copy a sound instance that shares the same audio data with given sound object Declaration protected abstract object _LoadSoundAlias(object source) _MakeWindowFocused() Make the application window focused Declaration protected abstract void _MakeWindowFocused() _OnLayerUpdate(int, Cell[], int) This function holds the logic to draw all rendering cells for the current frame. Declaration protected abstract void _OnLayerUpdate(int layerIndex, Cell[] cells, int cellCount) Parameters Type Name Description int layerIndex Index of the rendering layer Cell[] cells All rendering cells that may need to be drawn int cellCount How many rendering cells need to be drawn _OpenUrl(string) Open the given url with OS default application Declaration protected abstract void _OpenUrl(string url) _PauseMusic() Pause the background music Declaration protected abstract void _PauseMusic() _PlayMusic(int, bool) Load the music file, create the stream and play it as the background music Declaration protected abstract void _PlayMusic(int id, bool fromStart) Parameters Type Name Description int id ID of the audio bool fromStart True if seek the music to start _PlaySound(int, float, float, float) Play a sound Declaration protected abstract void _PlaySound(int id, float volume, float pitch, float pan) Parameters Type Name Description int id Audio ID _PngBytesToTexture(byte[]) Create a new instance of texture from a byte array load from png file. Declaration protected abstract object _PngBytesToTexture(byte[] bytes) Returns Type Description object Never return null and Don't throw exception. _QuitApplication() Make the application quit without any confirmation Declaration protected abstract void _QuitApplication() _ResetDoodle() Clear the doodle pixels canvas Declaration protected abstract void _ResetDoodle() _SetClipboardText(string) Set the text content of the system clipboard Declaration protected abstract void _SetClipboardText(string text) _SetCursor(int) Set the appearance of the mouse cursor. Use Const.CURSOR_XXX for the index param Declaration protected abstract void _SetCursor(int index) _SetCursorToNormal() Set the mouse cursor to default Declaration protected abstract void _SetCursorToNormal() _SetDoodleOffset(Float2) Set position offset of the doodle pixels. x=1 means right shift the whole screen width. Declaration protected abstract void _SetDoodleOffset(Float2 screenOffset) _SetDoodleZoom(float) Set zoom amount of the doodle pixels. 1 means general size. 2 means zoom-in to double the size. Declaration protected abstract void _SetDoodleZoom(float zoom) _SetEffectEnable(int, bool) Make given screen effect enable of disable. Declaration protected abstract void _SetEffectEnable(int effectIndex, bool enable) Parameters Type Name Description int effectIndex Use Const.SCREEN_EFFECT_XXXX for this index _SetEventWaiting(bool) Set to true to make the application only repaint when a user input happens Declaration protected abstract void _SetEventWaiting(bool enable) _SetFullscreen(bool) Set to true to make the application fullscreen Declaration protected abstract void _SetFullscreen(bool fullScreen) _SetMusicVolume(int) Set volume for the background music (0 means mute, 1000 means loudest) Declaration protected abstract void _SetMusicVolume(int volume) _SetSoundVolume(int) Set volume for all sound effects Declaration protected abstract void _SetSoundVolume(int volume) _SetWindowDecorated(bool) Set to true to make the application window have title bar and border frame Declaration protected abstract void _SetWindowDecorated(bool decorated) _SetWindowIcon(int) Set the icon of the application window using a loaded artwork sprite from the main sheet Declaration protected abstract void _SetWindowIcon(int spriteID) _SetWindowMaximized(bool) Set to true to make the application window is currently maximized Declaration protected abstract void _SetWindowMaximized(bool maximized) _SetWindowMinSize(int) Set the minimal size limitation of the application window Declaration protected abstract void _SetWindowMinSize(int size) _SetWindowMinimized(bool) Set to true to make the application window is currently minimized Declaration protected abstract void _SetWindowMinimized(bool minimized) _SetWindowPosition(int, int) Set application window position. (0,0) is top-left corner Declaration protected abstract void _SetWindowPosition(int x, int y) _SetWindowResizable(bool) Set to true to make the application window can be resize by the user Declaration protected abstract void _SetWindowResizable(bool resizable) _SetWindowSize(int, int) Set application window size. Use Game.GetMonitorWidth and Game.GetMonitorHeight to get the size of screen size Declaration protected abstract void _SetWindowSize(int x, int y) _SetWindowTitle(string) Set to title text of the application window Declaration protected abstract void _SetWindowTitle(string title) _SetWindowTopmost(bool) Set to true to make the application window renders on top of all other windows Declaration protected abstract void _SetWindowTopmost(bool topmost) _ShowCursor() Make the mouse cursor appear (not only for the current frame) Declaration protected abstract void _ShowCursor() _StopAllSounds() Stop all sound effects that currently playing Declaration protected abstract void _StopAllSounds() _StopMusic() Stop the music stream and unload from memory Declaration protected abstract void _StopMusic() _TextureToPngBytes(object) Encode the given texture instance into png byte array. Declaration protected abstract byte[] _TextureToPngBytes(object texture) Returns Type Description byte[] Return [] when invalid. Don't throw exception. _UnPauseMusic() Resume the background music Declaration protected abstract void _UnPauseMusic() _UnloadMusic(object) Unload the bgm object from memory Declaration protected abstract void _UnloadMusic(object music) _UnloadSound(SoundData) Unload the sound object from memory Declaration protected abstract void _UnloadSound(SoundData sound) _UnloadTexture(object) Unload the given texture instance from memory Declaration protected abstract void _UnloadTexture(object texture)"
  },
  "api/AngeliA.Gamekey.html": {
    "href": "api/AngeliA.Gamekey.html",
    "title": "Enum Gamekey | AngeliA",
    "summary": "Enum Gamekey Keys that generaly used with AngeliA games Fields Name Description Action Make player attack or perform action. Confirm/OK button in menu UI. Down Direction down Jump Make player jump or cancel action. Cancel button in menu UI. Left Direction left Right Direction right Select Open main menu for player, quit in-game panel UI, perform some uncommon logic inside in-game UI. Start Start the game in title screen, pause the game during gameplay, quit in-game panel UI. Up Direction up"
  },
  "api/AngeliA.GamepadKey.html": {
    "href": "api/AngeliA.GamepadKey.html",
    "title": "Enum GamepadKey | AngeliA",
    "summary": "Enum GamepadKey Key on the gamepad Fields Name Description DpadDown D-Pad down button DpadLeft D-Pad left button DpadRight D-Pad right button DpadUp D-Pad up button East Face button on right side LeftShoulder Left shoulder button (the one on top) LeftStick Left joy stick (press it as a button) LeftTrigger Left trigger button (the one on bottom) North Face button on top RightShoulder Right shoulder button (the one on top) RightStick Right joy stick (press it as a button) RightTrigger Right trigger button (the one on bottom) Select System button select (-) South Face button on button Start System button start (+) West Face button on left side"
  },
  "api/AngeliA.GenericDialogUI.html": {
    "href": "api/AngeliA.GenericDialogUI.html",
    "title": "Class GenericDialogUI | AngeliA",
    "summary": "Class GenericDialogUI Dialog UI entity for general purpose Implements IMapItem IWindowEntityUI Constructors GenericDialogUI() Declaration public GenericDialogUI() Properties BlockEvent True if this UI blocks mouse button event Declaration protected override bool BlockEvent { get; } Overrides MenuUI.BlockEvent Instance Global instance of this entity Declaration public static GenericDialogUI Instance { get; } InvokingData Custom data for internal logic Declaration public static object InvokingData { get; } ShowingDialog True if the dialog is currently displaying Declaration public static bool ShowingDialog { get; } Methods DrawMenu() Declaration protected override void DrawMenu() Overrides MenuUI.DrawMenu() FirstUpdate() [1/4] This function is called every frame when entity is in stage. Prioritize using this function to fill collider in to physics system. Declaration public override void FirstUpdate() Overrides EntityUI.FirstUpdate() LateUpdate() [4/4] This function is called every frame when entity is in stage. Prioritize using this function to render the entity. Declaration public override void LateUpdate() Overrides EntityUI.LateUpdate() OnActivated() This function is called when entity enter the stage Declaration public override void OnActivated() Overrides MenuUI.OnActivated() OnInactivated() This function is called when entity leave the stage Declaration public override void OnInactivated() Overrides Entity.OnInactivated() SetCustomData(object, object, object) Set custom data for the specified item. Get this data from GenericDialogUI.InvokingData inside the \"action\" from SpawnDialog funtion Declaration public static void SetCustomData(object dataA = null, object dataB = null, object dataC = null) SetItemTint(Color32) Set content tint of specified item Declaration public static void SetItemTint(Color32 tintA) SetItemTint(Color32, Color32) Set content tint of specified item Declaration public static void SetItemTint(Color32 tintA, Color32 tintB) SetItemTint(Color32, Color32, Color32) Set content tint of specified item Declaration public static void SetItemTint(Color32 tintA, Color32 tintB, Color32 tintC) SpawnDialog(string, string, Action) Start a dialog with buttons with solid-looking part Declaration public static void SpawnDialog(string message, string label, Action action) Parameters Type Name Description string message Text message display on top string label Label content of the button Action action This function is called when the button is pressed SpawnDialog(string, string, Action, string, Action) Start a dialog with buttons with solid-looking part Declaration public static void SpawnDialog(string message, string labelA, Action actionA, string labelB, Action actionB) Parameters Type Name Description string message Text message display on top string labelA Label content of the button Action actionA This function is called when the button is pressed string labelB Label content of the button Action actionB This function is called when the button is pressed SpawnDialog(string, string, Action, string, Action, string, Action) Start a dialog with buttons with solid-looking part Declaration public static void SpawnDialog(string message, string labelA, Action actionA, string labelB, Action actionB, string labelC, Action actionC) Parameters Type Name Description string message Text message display on top string labelA Label content of the button Action actionA This function is called when the button is pressed string labelB Label content of the button Action actionB This function is called when the button is pressed string labelC Label content of the button Action actionC This function is called when the button is pressed SpawnDialog_Button(string, string, Action) Start a dialog with buttons with solid-looking part Declaration public static void SpawnDialog_Button(string message, string label, Action action) Parameters Type Name Description string message Text message display on top string label Label content of the button Action action This function is called when the button is pressed SpawnDialog_Button(string, string, Action, string, Action) Start a dialog with buttons with solid-looking part Declaration public static void SpawnDialog_Button(string message, string labelA, Action actionA, string labelB, Action actionB) Parameters Type Name Description string message Text message display on top string labelA Label content of the button Action actionA This function is called when the button is pressed string labelB Label content of the button Action actionB This function is called when the button is pressed SpawnDialog_Button(string, string, Action, string, Action, string, Action) Start a dialog with buttons with solid-looking part Declaration public static void SpawnDialog_Button(string message, string labelA, Action actionA, string labelB, Action actionB, string labelC, Action actionC) Parameters Type Name Description string message Text message display on top string labelA Label content of the button Action actionA This function is called when the button is pressed string labelB Label content of the button Action actionB This function is called when the button is pressed string labelC Label content of the button Action actionC This function is called when the button is pressed"
  },
  "api/AngeliA.GenericPopupUI.html": {
    "href": "api/AngeliA.GenericPopupUI.html",
    "title": "Class GenericPopupUI | AngeliA",
    "summary": "Class GenericPopupUI Popup menu UI for general perpose Implements IMapItem IWindowEntityUI Constructors GenericPopupUI() Declaration public GenericPopupUI() Properties BackgroundRect Rect position of the background in global space Declaration public IRect BackgroundRect { get; } BlockEvent True if this UI blocks mouse button event Declaration protected override bool BlockEvent { get; } Overrides EntityUI.BlockEvent CurrentSubLevel Recursive layer count of the sub-menu if a new item is added Declaration public int CurrentSubLevel { get; set; } Instance Global single instance of this entity Declaration public static GenericPopupUI Instance { get; } InvokingItemData Custom data of the currently pressed item Declaration public static object InvokingItemData { get; } InvokingItemlabel Label of the currently pressed item Declaration public static string InvokingItemlabel { get; } MenuID Custom ID of the menu Declaration public int MenuID { get; } OffsetX Position offset X in global space between left edge of the camera to the left edge of this menu Declaration public int OffsetX { get; set; } OffsetY Position offset X in global space between bottom edge of the camera to the bottom edge of this menu Declaration public int OffsetY { get; set; } ShowingPopup True is the menu is currently displaying Declaration public static bool ShowingPopup { get; } Methods AddItem(string, Action, bool, bool, object, bool) Add a new item (call BeginPopup first) Declaration public static void AddItem(string label, Action action, bool enabled = true, bool @checked = false, object data = null, bool editable = false) Parameters Type Name Description string label Text content inside this item Action action This function is called when the item is pressed bool enabled True if this item can be press bool checked True if there should be a check mark display on this item object data Custom data for this item. Get this data with GenericPopupUI.InvokingItemData inside the \"action\" from param bool editable True if this label can be edit by the user AddItem(string, int, Direction2, int, Action, bool, bool, object, bool) Add a new item (call BeginPopup first) Declaration public static void AddItem(string label, int icon, Direction2 iconPosition, int checkMarkSprite, Action action, bool enabled = true, bool @checked = false, object data = null, bool editable = false) Parameters Type Name Description string label Text content inside this item int icon Artwork sprite of this item Direction2 iconPosition Position offset of this icon int checkMarkSprite Artwork sprite of the check mark Action action This function is called when the item is pressed bool enabled True if this item can be press bool checked True if there should be a check mark display on this item object data Custom data for this item. Get this data with GenericPopupUI.InvokingItemData inside the \"action\" from param bool editable True if this label can be edit by the user AddSeparator() Add a empty line (call BeginPopup first) Declaration public static void AddSeparator() BeginPopup(Int2, int) Start to make a new menu list Declaration public static void BeginPopup(Int2 globalOffset, int menuID = 0) BeginPopup(int) Start to make a new menu list Declaration public static void BeginPopup(int menuID = 0) BeginSubItem() Start to make a sub menu Declaration public static void BeginSubItem() ClearItems() Remove all items inside the current popup menu Declaration public static void ClearItems() ClosePopup() Close current open popup menu Declaration public static void ClosePopup() EndSubItem() Stop making a sub menu Declaration public static void EndSubItem() FirstUpdate() [1/4] This function is called every frame when entity is in stage. Prioritize using this function to fill collider in to physics system. Declaration public override void FirstUpdate() Overrides EntityUI.FirstUpdate() OnActivated() This function is called when entity enter the stage Declaration public override void OnActivated() Overrides Entity.OnActivated() OnInactivated() This function is called when entity leave the stage Declaration public override void OnInactivated() Overrides Entity.OnInactivated() SetTint(Color32, Color32) Set color tint for the popup menu ui Declaration public static void SetTint(Color32 labelTint, Color32 iconTint) UpdateUI() Declaration public override void UpdateUI() Overrides EntityUI.UpdateUI()"
  },
  "api/AngeliA.GlitchScope.html": {
    "href": "api/AngeliA.GlitchScope.html",
    "title": "Struct GlitchScope | AngeliA",
    "summary": "Struct GlitchScope Scope that make element inside looks glitched Implements IDisposable Examples using AngeliA; namespace AngeliaGame; public class Example { [OnGameUpdate] internal static void OnGameUpdate () { using (new GlitchScope()) { // Rendering cells inside will looks glitched } } } Constructors GlitchScope(int, int, int) Scope that make element inside looks glitched Declaration public GlitchScope(int speedAmount = 1000, int shiftAmount = 1000, int scaleAmount = 1000) Methods Dispose() Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources. Declaration public void Dispose()"
  },
  "api/AngeliA.GlobalGravityAttribute.html": {
    "href": "api/AngeliA.GlobalGravityAttribute.html",
    "title": "Class GlobalGravityAttribute | AngeliA",
    "summary": "Class GlobalGravityAttribute The gravity value applys on all rigidbody Constructors GlobalGravityAttribute(int) The gravity value applys on all rigidbody Declaration public GlobalGravityAttribute(int gravity)"
  },
  "api/AngeliA.GlobalItemCombinationAttribute-1.html": {
    "href": "api/AngeliA.GlobalItemCombinationAttribute-1.html",
    "title": "Class GlobalItemCombinationAttribute<I0> | AngeliA",
    "summary": "Class GlobalItemCombinationAttribute<I0> Define an item combination to craft the item. Constructors GlobalItemCombinationAttribute(string, int, string, string, string, string, string, string, string) Define an item combination to craft the item. Declaration public GlobalItemCombinationAttribute(string result, int count = 1, string keepId0 = \"\", string keepId1 = \"\", string keepId2 = \"\", string keepId3 = \"\", string extraB = \"\", string extraC = \"\", string extraD = \"\") int count How many item does it craft at once string keepId0 Do not consume this item string keepId1 Do not consume this item string keepId2 Do not consume this item string keepId3 Do not consume this item string extraB Use this if the item is not based on class string extraC Use this if the item is not based on class string extraD Use this if the item is not based on class"
  },
  "api/AngeliA.GlobalItemCombinationAttribute-2.html": {
    "href": "api/AngeliA.GlobalItemCombinationAttribute-2.html",
    "title": "Class GlobalItemCombinationAttribute<I0, I1> | AngeliA",
    "summary": "Class GlobalItemCombinationAttribute<I0, I1> Define an item combination to craft the item. Constructors GlobalItemCombinationAttribute(string, int, string, string, string, string, string, string) Define an item combination to craft the item. Declaration public GlobalItemCombinationAttribute(string result, int count = 1, string keepId0 = \"\", string keepId1 = \"\", string keepId2 = \"\", string keepId3 = \"\", string extraC = \"\", string extraD = \"\") int count How many item does it craft at once string keepId0 Do not consume this item string keepId1 Do not consume this item string keepId2 Do not consume this item string keepId3 Do not consume this item string extraC Use this if the item is not based on class string extraD Use this if the item is not based on class"
  },
  "api/AngeliA.GlobalItemCombinationAttribute-3.html": {
    "href": "api/AngeliA.GlobalItemCombinationAttribute-3.html",
    "title": "Class GlobalItemCombinationAttribute<I0, I1, I2> | AngeliA",
    "summary": "Class GlobalItemCombinationAttribute<I0, I1, I2> Define an item combination to craft the item. Constructors GlobalItemCombinationAttribute(string, int, string, string, string, string, string) Define an item combination to craft the item. Declaration public GlobalItemCombinationAttribute(string result, int count = 1, string keepId0 = \"\", string keepId1 = \"\", string keepId2 = \"\", string keepId3 = \"\", string extraD = \"\") int count How many item does it craft at once string keepId0 Do not consume this item string keepId1 Do not consume this item string keepId2 Do not consume this item string keepId3 Do not consume this item string extraD Use this if the item is not based on class"
  },
  "api/AngeliA.GlobalItemCombinationAttribute-4.html": {
    "href": "api/AngeliA.GlobalItemCombinationAttribute-4.html",
    "title": "Class GlobalItemCombinationAttribute<I0, I1, I2, I3> | AngeliA",
    "summary": "Class GlobalItemCombinationAttribute<I0, I1, I2, I3> Define an item combination to craft the item. Constructors GlobalItemCombinationAttribute(string, int, string, string, string, string) Define an item combination to craft the item. Declaration public GlobalItemCombinationAttribute(string result, int count = 1, string keepId0 = \"\", string keepId1 = \"\", string keepId2 = \"\", string keepId3 = \"\") int count How many item does it craft at once string keepId0 Do not consume this item string keepId1 Do not consume this item string keepId2 Do not consume this item string keepId3 Do not consume this item"
  },
  "api/AngeliA.GlobalItemCombinationAttribute.html": {
    "href": "api/AngeliA.GlobalItemCombinationAttribute.html",
    "title": "Class GlobalItemCombinationAttribute | AngeliA",
    "summary": "Class GlobalItemCombinationAttribute Define an item combination to craft the item. Constructors GlobalItemCombinationAttribute(string, int, string, string, string, string, string, string, string, string) Define an item combination to craft the item. Declaration public GlobalItemCombinationAttribute(string result, int count = 1, string keepId0 = \"\", string keepId1 = \"\", string keepId2 = \"\", string keepId3 = \"\", string extraA = \"\", string extraB = \"\", string extraC = \"\", string extraD = \"\") int count How many item does it craft at once string keepId0 Do not consume this item string keepId1 Do not consume this item string keepId2 Do not consume this item string keepId3 Do not consume this item string extraA Use this if the item is not based on class string extraB Use this if the item is not based on class string extraC Use this if the item is not based on class string extraD Use this if the item is not based on class"
  },
  "api/AngeliA.GroupAnimationHolder.html": {
    "href": "api/AngeliA.GroupAnimationHolder.html",
    "title": "Class GroupAnimationHolder | AngeliA",
    "summary": "Class GroupAnimationHolder Display animation from artwork sheet Implements IMapItem Methods BeforeUpdate() [2/4] This function is called every frame when entity is in stage. Prioritize using this function to update physics logic. Declaration public override sealed void BeforeUpdate() Overrides Entity.BeforeUpdate() Follow(Entity) Makes the holder follow the target all the time Declaration public void Follow(Entity target) LateUpdate() [4/4] This function is called every frame when entity is in stage. Prioritize using this function to render the entity. Declaration public override void LateUpdate() Overrides Entity.LateUpdate() OnActivated() This function is called when entity enter the stage Declaration public override void OnActivated() Overrides Entity.OnActivated() Spawn(int, int, int, int, int, int, int) Create a new animation to the stage Declaration public static GroupAnimationHolder Spawn(int groupID, int x, int y, int renderLayer = 3, int rotation1000 = 0, int rotationSpeed = 0, int scale = 1000) Parameters Type Name Description int groupID Artwork sprite group ID int x Position X in global space int y Position Y in global space int renderLayer Which rendering layer does it renders into int rotation1000 Initialize rotation (0 means 0°, 1000 means 1°) int rotationSpeed Speed of the rotation (0 means 0°, 1 means 1°) Returns Type Description GroupAnimationHolder Instance of the holder Spawn(int, int, int, int, int, int, int, bool, Color32, int, int) Create a new animation to the stage Declaration public static GroupAnimationHolder Spawn(int groupID, int x, int y, int rotation1000, int rotationSpeed, int duration, int framePerSprite, bool loop, Color32 tint, int z = 2147483646, int renderLayer = 3) Parameters Type Name Description int groupID Artwork sprite group ID int x Position X in global space int y Position Y in global space int rotation1000 Initialize rotation (0 means 0°, 1000 means 1°) int rotationSpeed Speed of the rotation (0 means 0°, 1 means 1°) int duration How long this animation is in frame. Set to -1 to get duration from artwork sprite group int framePerSprite How long does a single sprite takes in frame bool loop True if the animation loops Color32 tint Color tint int z Z value for sort rendering cells int renderLayer Which rendering layer does it renders into Returns Type Description GroupAnimationHolder Instance of the holder Spawn(int, int, int, int, int, int, int, int, int, int, int, bool, Color32, int, int) Create a new animation to the stage Declaration public static GroupAnimationHolder Spawn(int groupID, int x, int y, int width, int height, int pivotX, int pivotY, int rotation1000, int rotationSpeed, int duration, int framePerSprite, bool loop, Color32 tint, int z = 2147483646, int renderLayer = 3) Parameters Type Name Description int groupID Artwork sprite group ID int x Position X in global space int y Position Y in global space int width Size X in global space int height Size Y in global space int pivotX Pivot X of the artwork sprite int pivotY Pivot Y of the artwork sprite int rotation1000 Initialize rotation (0 means 0°, 1000 means 1°) int rotationSpeed Speed of the rotation (0 means 0°, 1 means 1°) int duration How long this animation is in frame. Set to -1 to get duration from artwork sprite group int framePerSprite How long does a single sprite takes in frame bool loop True if the animation loops Color32 tint Color tint int z Z value for sort rendering cells int renderLayer Which rendering layer does it renders into Returns Type Description GroupAnimationHolder Instance of the holder"
  },
  "api/AngeliA.Hair.html": {
    "href": "api/AngeliA.Hair.html",
    "title": "Class Hair | AngeliA",
    "summary": "Class Hair Hair gadget for pose styled characters Properties DropMotionAmountForBraid Amount of the braid's animation generate when character rise and drop (0 means 0%, 1000 means 100%) Declaration protected virtual int DropMotionAmountForBraid { get; } FlowAmountX Amount of the horizontal flow animation generate from character's movements (0 means 0%, 1000 means 100%) Declaration protected virtual int FlowAmountX { get; } FlowAmountY Amount of the vertical flow animation generate from character's movements (0 means 0%, 1000 means 100%) Declaration protected virtual int FlowAmountY { get; } FlowMotionAmountForBraid Amount of the braid's motion animation for hairs flowing in air (0 means 0%, 1000 means 100%) Declaration protected virtual int FlowMotionAmountForBraid { get; } ForceBackOnFlowForBraid Set to true will make braid rendered in backside when it flows Declaration protected virtual bool ForceBackOnFlowForBraid { get; } GadgetType Type of this body gadget Declaration public override sealed BodyGadgetType GadgetType { get; } Overrides BodyGadget.GadgetType MotionAmountForBraid Amount of the braid's rotating animation generate from character's movements (0 means 0%, 1000 means 100%) Declaration protected virtual int MotionAmountForBraid { get; } SpriteBraidLeft Artwork sprite of left braid Declaration public OrientedSprite SpriteBraidLeft { get; } SpriteBraidRight Artwork sprite of right braid Declaration public OrientedSprite SpriteBraidRight { get; } SpriteHairBackward Artwork sprite rendering in the back-side of character's head Declaration public OrientedSprite SpriteHairBackward { get; } SpriteHairForward Artwork sprite rendering in the front-side of character's head Declaration public OrientedSprite SpriteHairForward { get; } SpriteLoaded True if artwork sprite is loaded Declaration public override bool SpriteLoaded { get; } Overrides BodyGadget.SpriteLoaded UseLimbRotateForBraid Make braids perform limb rotate instead of simply rotate the rendering cell Declaration protected virtual bool UseLimbRotateForBraid { get; } Methods DrawBraid(PoseCharacterRenderer, bool, OrientedSprite, OrientedSprite, int, int, int, bool, int, int) Draw given sprites as braids for given character Declaration public static void DrawBraid(PoseCharacterRenderer renderer, bool forceBackOnFlow, OrientedSprite spriteLeft, OrientedSprite spriteRight, int motionAmount, int flowMotionAmount, int dropMotionAmount, bool useLimbRotate, int offsetX, int offsetY) Parameters Type Name Description PoseCharacterRenderer renderer Target character bool forceBackOnFlow Set to true will make braid rendered in backside when it flows OrientedSprite spriteLeft Artwork sprite on the left side OrientedSprite spriteRight Artwork sprite on the right side int motionAmount Motion animation amount int flowMotionAmount Motion animation amount for hairs flowing in air int dropMotionAmount Motion animation amount from character's rise and drop bool useLimbRotate Perform limb rotate instead of simply rotate the rendering cell int offsetX Position offset X int offsetY Position offset Y DrawGadget(PoseCharacterRenderer) Render the gadget for the given character Declaration public override void DrawGadget(PoseCharacterRenderer renderer) Overrides BodyGadget.DrawGadget(PoseCharacterRenderer) DrawGadgetFromPool(PoseCharacterRenderer) Draw hair gadget for given character Declaration public static void DrawGadgetFromPool(PoseCharacterRenderer renderer) DrawGadgetGizmos(IRect, Color32, int) Render the gadget as gizmos Declaration public override void DrawGadgetGizmos(IRect rect, Color32 tint, int z) Parameters Type Name Description IRect rect Global rect position Color32 tint Color tint int z Z position for sorting Overrides BodyGadget.DrawGadgetGizmos(IRect, Color32, int) DrawSpriteAsHair(PoseCharacterRenderer, OrientedSprite, OrientedSprite, int, int) Draw given sprites as hair for given character Declaration public static void DrawSpriteAsHair(PoseCharacterRenderer renderer, OrientedSprite spriteForward, OrientedSprite spriteBackward, int flowAmountX, int flowAmountY) Parameters Type Name Description PoseCharacterRenderer renderer Target character OrientedSprite spriteForward Hair artwork sprite for the front-side OrientedSprite spriteBackward Hair artwork sprite for the back-side int flowAmountX Horizontal motion animation amount for hairs flowing in air int flowAmountY Vertical motion animation amount for hairs flowing in air FillFromSheet(string) Load sprite data from Renderer.CurrentSheet Declaration public override bool FillFromSheet(string name) Overrides BodyGadget.FillFromSheet(string)"
  },
  "api/AngeliA.HandCloth.html": {
    "href": "api/AngeliA.HandCloth.html",
    "title": "Class HandCloth | AngeliA",
    "summary": "Class HandCloth Gloves for a pose-style character Properties ClothType Where should characters wear this cloth Declaration public override sealed ClothType ClothType { get; } Overrides Cloth.ClothType SpriteLoaded True if the artwork sprites are loaded Declaration public override bool SpriteLoaded { get; } Overrides Cloth.SpriteLoaded Methods DrawCloth(PoseCharacterRenderer) Draw cloth for the given character Declaration public override void DrawCloth(PoseCharacterRenderer renderer) Overrides Cloth.DrawCloth(PoseCharacterRenderer) DrawClothForHand(PoseCharacterRenderer, OrientedSprite, OrientedSprite, int) Draw artwork sprite as gloves for given character Declaration public static void DrawClothForHand(PoseCharacterRenderer renderer, OrientedSprite spriteLeft, OrientedSprite spriteRight, int localZ = 1) Parameters Type Name Description PoseCharacterRenderer renderer Target character OrientedSprite spriteLeft Artwork for left glove OrientedSprite spriteRight Artwork for right glove int localZ Z value for sort rendering cells DrawClothFromPool(PoseCharacterRenderer) Draw gloves for given character from system pool Declaration public static void DrawClothFromPool(PoseCharacterRenderer renderer) DrawClothGizmos(IRect, Color32, int) Draw cloth as gizmos Declaration public override void DrawClothGizmos(IRect rect, Color32 tint, int z) Parameters Type Name Description IRect rect Rect position in global space Color32 tint Color tint int z Z value for sort rendering cell Overrides Cloth.DrawClothGizmos(IRect, Color32, int) FillFromSheet(string) Load sprite data from Renderer.CurrentSheet Declaration public override bool FillFromSheet(string name) Overrides Cloth.FillFromSheet(string)"
  },
  "api/AngeliA.HandTool.html": {
    "href": "api/AngeliA.HandTool.html",
    "title": "Class HandTool | AngeliA",
    "summary": "Class HandTool Tool equipment that can be equip in hand slot of a character Implements IMapItem Constructors HandTool() Declaration public HandTool() HandTool(bool) Declaration public HandTool(bool loadArtwork) Properties AvailableInAir True if character can use this tool when not touching ground Declaration public virtual bool AvailableInAir { get; } AvailableInWater True if character can use this tool when inside water Declaration public virtual bool AvailableInWater { get; } AvailableWhenClimbing True if character can use this tool when climbing Declaration public virtual bool AvailableWhenClimbing { get; } AvailableWhenDashing True if character can use this tool when dashing Declaration public virtual bool AvailableWhenDashing { get; } AvailableWhenFlying True if character can use this tool when flying Declaration public virtual bool AvailableWhenFlying { get; } AvailableWhenGrabbing True if character can use this tool when grabbing Declaration public virtual bool AvailableWhenGrabbing { get; } AvailableWhenPounding True if character can use this tool when ground pounding Declaration public virtual bool AvailableWhenPounding { get; } AvailableWhenRolling True if character can use this tool when rolling Declaration public virtual bool AvailableWhenRolling { get; } AvailableWhenRunning True if character can use this tool when running Declaration public virtual bool AvailableWhenRunning { get; } AvailableWhenRushing True if character can use this tool when rushing Declaration public virtual bool AvailableWhenRushing { get; } AvailableWhenSliding True if character can use this tool when sliding on wall Declaration public virtual bool AvailableWhenSliding { get; } AvailableWhenSquatting True if character can use this tool when squatting Declaration public virtual bool AvailableWhenSquatting { get; } AvailableWhenWalking True if character can use this tool when walking Declaration public virtual bool AvailableWhenWalking { get; } CancelUseWhenRelease True if usage of this tool should be stop when user relase the action button Declaration public virtual bool CancelUseWhenRelease { get; } ChargeDuration How many frames does it have to charge to perform the tool as charged. Set to int.MaxValue to disable charge feature. Declaration public virtual int ChargeDuration { get; } Cooldown How long have to wait to use again after the tool being used for once Declaration public virtual int Cooldown { get; } DefaultMovementSpeedRateOnUse How fast can the character move when using this tool. (0 means do not move. 1000 means move as normal speed. null means do not effect movement speed.) Declaration public virtual int? DefaultMovementSpeedRateOnUse { get; } Duration How long does the tool perform it's function for once Declaration public virtual int Duration { get; } EquipmentType Which type is this quipment Declaration public override sealed EquipmentType EquipmentType { get; } Overrides Equipment.EquipmentType HoldPunish How many extra frames have to wait if the user hold the action button to use the tool multiple time Declaration public virtual int HoldPunish { get; } IgnoreGrabTwist Do not read grab twist data from character when rendering this tool Declaration public virtual bool IgnoreGrabTwist { get; } LockFacingOnUse Do not change character facing when the tool is being use Declaration public virtual bool LockFacingOnUse { get; } PerformDelayFrame How many frame does the internal tool logic invoke after character start to use the tool Declaration public int PerformDelayFrame { get; } PerformDelayRate How many frame based on \"duration\" does the internal tool logic invoke after character start to use the tool. (0 means immediately invoke. 1000 means invoke after \"duration\" frames) Declaration public virtual int PerformDelayRate { get; } RepeatWhenHolding True if this tool can be use repeatedly when holding the action button Declaration public virtual bool RepeatWhenHolding { get; } RunningMovementSpeedRateOnUse How fast can the character move when using this tool when running. (0 means do not move. 1000 means move as normal speed. null means do not effect movement speed.) Declaration public virtual int? RunningMovementSpeedRateOnUse { get; } SpriteID Artwork sprite ID for render this tool Declaration public int SpriteID { get; protected set; } TypeName Name of the class type Declaration public string TypeName { get; init; } UseStackAsUsage True if this tool treat it's inventory stack count as durability bar Declaration public virtual bool UseStackAsUsage { get; } WalkingMovementSpeedRateOnUse How fast can the character move when using this tool when walking. (0 means do not move. 1000 means move as normal speed. null means do not effect movement speed.) Declaration public virtual int? WalkingMovementSpeedRateOnUse { get; } Methods AllowingUse(Character) True if the tool can be use by the character Declaration public virtual bool AllowingUse(Character character) GetHandheldPoseAnimationID(Character) Get the ID of the pose animation for handheld Declaration public virtual int GetHandheldPoseAnimationID(Character character) GetPerformPoseAnimationID(Character) Get the ID of the pose animation for using the tool Declaration public virtual int GetPerformPoseAnimationID(Character character) LoadFromSheet() Load artwork sprite from current rendering sheet Declaration public void LoadFromSheet() OnToolPerform(Character) This function is called when this tool is used for once by the given character Declaration public virtual void OnToolPerform(Character user) OnToolSpriteRendered(PoseCharacterRenderer, int, int, int, int, int, int, AngeSprite, int) This function is called when the tool is rendering by pose-style character Declaration public virtual Cell OnToolSpriteRendered(PoseCharacterRenderer renderer, int x, int y, int width, int height, int grabRotation, int grabScale, AngeSprite sprite, int z) Parameters Type Name Description PoseCharacterRenderer renderer Target character int x Position X of the sprite in global space int y Position Y of the sprite in global space int width Width of the sprite in global space int height Height of the sprite in global space int grabRotation Rotation of the sprite int grabScale Size scale of the sprite (0 means 0%, 1000 means 100%) AngeSprite sprite Artwork sprite int z Z value for sort rendering cells"
  },
  "api/AngeliA.HandheldPoseAnimation.html": {
    "href": "api/AngeliA.HandheldPoseAnimation.html",
    "title": "Class HandheldPoseAnimation | AngeliA",
    "summary": "Class HandheldPoseAnimation Pose animation which override onto a character for holding a handtool Methods DrawTool(HandTool, PoseCharacterRenderer) Rendering the given handtool Declaration public abstract void DrawTool(HandTool tool, PoseCharacterRenderer renderer)"
  },
  "api/AngeliA.HeadCloth.html": {
    "href": "api/AngeliA.HeadCloth.html",
    "title": "Class HeadCloth | AngeliA",
    "summary": "Class HeadCloth Hat for a pose-style character Properties ClothType Where should characters wear this cloth Declaration public override sealed ClothType ClothType { get; } Overrides Cloth.ClothType SpriteLoaded True if the artwork sprites are loaded Declaration public override bool SpriteLoaded { get; } Overrides Cloth.SpriteLoaded Methods DrawCloth(PoseCharacterRenderer) Draw cloth for the given character Declaration public override void DrawCloth(PoseCharacterRenderer renderer) Overrides Cloth.DrawCloth(PoseCharacterRenderer) DrawClothForHead(PoseCharacterRenderer, OrientedSprite) Draw artwork sprite as hat for given character Declaration public static void DrawClothForHead(PoseCharacterRenderer renderer, OrientedSprite clothSprite) Parameters Type Name Description PoseCharacterRenderer renderer Target character OrientedSprite clothSprite Artwork sprite DrawClothFromPool(PoseCharacterRenderer) Draw hat for given character from system pool Declaration public static void DrawClothFromPool(PoseCharacterRenderer renderer) DrawClothGizmos(IRect, Color32, int) Draw cloth as gizmos Declaration public override void DrawClothGizmos(IRect rect, Color32 tint, int z) Parameters Type Name Description IRect rect Rect position in global space Color32 tint Color tint int z Z value for sort rendering cell Overrides Cloth.DrawClothGizmos(IRect, Color32, int) FillFromSheet(string) Load sprite data from Renderer.CurrentSheet Declaration public override bool FillFromSheet(string name) Overrides Cloth.FillFromSheet(string)"
  },
  "api/AngeliA.HipCloth.HipClothType.html": {
    "href": "api/AngeliA.HipCloth.HipClothType.html",
    "title": "Enum HipCloth.HipClothType | AngeliA",
    "summary": "Enum HipCloth.HipClothType Fields Name Description"
  },
  "api/AngeliA.HipCloth.html": {
    "href": "api/AngeliA.HipCloth.html",
    "title": "Class HipCloth | AngeliA",
    "summary": "Class HipCloth Pants or skirt for a pose-style character. Include hip and legs (no foot) Properties ClothType Where should characters wear this cloth Declaration public override sealed ClothType ClothType { get; } Overrides Cloth.ClothType CoverLegs True if the pants renders on front of lengs Declaration protected virtual bool CoverLegs { get; } SpriteLoaded True if the artwork sprites are loaded Declaration public override bool SpriteLoaded { get; } Overrides Cloth.SpriteLoaded Methods DrawCloth(PoseCharacterRenderer) Draw cloth for the given character Declaration public override void DrawCloth(PoseCharacterRenderer rendering) Overrides Cloth.DrawCloth(PoseCharacterRenderer) DrawClothAsPants(PoseCharacterRenderer, OrientedSprite, int) Draw artwork sprite as pants for given character Declaration public static void DrawClothAsPants(PoseCharacterRenderer rendering, OrientedSprite clothSprite, int localZ = 1) Parameters Type Name Description PoseCharacterRenderer rendering Target character OrientedSprite clothSprite Artwork sprite int localZ Z value for sort rendering cells DrawClothAsSkirt(PoseCharacterRenderer, OrientedSprite, int, int) Draw artwork sprite as skirt for given character Declaration public static void DrawClothAsSkirt(PoseCharacterRenderer rendering, OrientedSprite clothSprite, int localZ = 6, int motionAmount = 1000) Parameters Type Name Description PoseCharacterRenderer rendering Target character OrientedSprite clothSprite Artwork sprite (should be a sprite group) int localZ Z value for sort rendering cells int motionAmount How much does the skirt flow with character movement (0 means 0%, 1000 means 100%) DrawClothForLowerLeg(PoseCharacterRenderer, OrientedSprite, OrientedSprite, int) Draw artwork sprite as cloth only for lower-leg Declaration public static void DrawClothForLowerLeg(PoseCharacterRenderer rendering, OrientedSprite spriteLeft, OrientedSprite spriteRight, int localZ = 1) Parameters Type Name Description PoseCharacterRenderer rendering Target character OrientedSprite spriteLeft Artwork sprite for left leg OrientedSprite spriteRight Artwork sprite for right leg int localZ Z value for sort rendering cells DrawClothForUpperLeg(PoseCharacterRenderer, OrientedSprite, OrientedSprite, int) Draw artwork sprite as cloth only for upper-leg Declaration public static void DrawClothForUpperLeg(PoseCharacterRenderer rendering, OrientedSprite spriteLeft, OrientedSprite spriteRight, int localZ = 1) Parameters Type Name Description PoseCharacterRenderer rendering Target character OrientedSprite spriteLeft Artwork sprite for left leg OrientedSprite spriteRight Artwork sprite for right leg int localZ Z value for sort rendering cells DrawClothFromPool(PoseCharacterRenderer) Draw pants/skirt for given character from system pool Declaration public static void DrawClothFromPool(PoseCharacterRenderer rendering) DrawClothGizmos(IRect, Color32, int) Draw cloth as gizmos Declaration public override void DrawClothGizmos(IRect rect, Color32 tint, int z) Parameters Type Name Description IRect rect Rect position in global space Color32 tint Color tint int z Z value for sort rendering cell Overrides Cloth.DrawClothGizmos(IRect, Color32, int) DrawDoubleClothTailsOnHip(PoseCharacterRenderer, OrientedSprite, bool) Draw two tails as cloth decoration (like Suisei's standard suit from Hololive) Declaration public static void DrawDoubleClothTailsOnHip(PoseCharacterRenderer rendering, OrientedSprite clothSprite, bool drawOnAllPose = false) Parameters Type Name Description PoseCharacterRenderer rendering Target character OrientedSprite clothSprite Artwork sprite bool drawOnAllPose Draw this tail even when character is Rolling, Sleeping, Passout and Flying DrawSingleClothTail(AngeSprite, int, int, int, int, int, int, int, int) Draw a single tail as cloth decoration (like Suisei's standard suit from Hololive) Declaration public static void DrawSingleClothTail(AngeSprite sprite, int globalX, int globalY, int z, int rotation, int deltaY, int scaleX = 1000, int scaleY = 1000, int motionAmount = 1000) Parameters Type Name Description AngeSprite sprite Artwork sprite int globalX Pivot position X of the tail in global space int globalY Pivot position Y of the tail in global space int z Z value for sorting rendering cells int rotation Rotation of this tail int deltaY Character's current movement speed Y int scaleX Horizontal size scale (0 means 0%, 1000 means 100%) int scaleY Vertical size scale (0 means 0%, 1000 means 100%) int motionAmount How much flow motion should apply from characters movement (0 means 0%, 1000 means 100%) FillFromSheet(string) Load sprite data from Renderer.CurrentSheet Declaration public override bool FillFromSheet(string name) Overrides Cloth.FillFromSheet(string)"
  },
  "api/AngeliA.Horn.html": {
    "href": "api/AngeliA.Horn.html",
    "title": "Class Horn | AngeliA",
    "summary": "Class Horn Horn body gadget for pose-style character Properties AnchorOnFace True if the horn grows from character's face (like Ayame from Hololive) Declaration protected virtual bool AnchorOnFace { get; } GadgetType Type of this body gadget Declaration public override sealed BodyGadgetType GadgetType { get; } Overrides BodyGadget.GadgetType SpriteLoaded True if artwork sprite is loaded Declaration public override bool SpriteLoaded { get; } Overrides BodyGadget.SpriteLoaded Methods DrawGadget(PoseCharacterRenderer) Render the gadget for the given character Declaration public override void DrawGadget(PoseCharacterRenderer renderer) Overrides BodyGadget.DrawGadget(PoseCharacterRenderer) DrawGadgetFromPool(PoseCharacterRenderer) Draw horn gadget for given character Declaration public static void DrawGadgetFromPool(PoseCharacterRenderer renderer) DrawGadgetGizmos(IRect, Color32, int) Render the gadget as gizmos Declaration public override void DrawGadgetGizmos(IRect rect, Color32 tint, int z) Parameters Type Name Description IRect rect Global rect position Color32 tint Color tint int z Z position for sorting Overrides BodyGadget.DrawGadgetGizmos(IRect, Color32, int) DrawSpriteAsHorn(PoseCharacterRenderer, OrientedSprite, OrientedSprite, bool, bool, bool) Draw given sprites as horn for given character Declaration public static void DrawSpriteAsHorn(PoseCharacterRenderer renderer, OrientedSprite spriteLeft, OrientedSprite spriteRight, bool frontOfHeadL = true, bool frontOfHeadR = true, bool onFace = false) Parameters Type Name Description PoseCharacterRenderer renderer Target character OrientedSprite spriteLeft Artwork sprite for left horn OrientedSprite spriteRight Artwork sprite for right horn bool frontOfHeadL True if the left horn should render in front of character's head bool frontOfHeadR True if the right horn should render in front of character's head bool onFace True if the horn grows from character's face (like Ayame from Hololive) FillFromSheet(string) Load sprite data from Renderer.CurrentSheet Declaration public override bool FillFromSheet(string name) Overrides BodyGadget.FillFromSheet(string) FrontOfHeadL(PoseCharacterRenderer) True if the left horn should render in front of character's head Declaration protected virtual bool FrontOfHeadL(PoseCharacterRenderer renderer) FrontOfHeadR(PoseCharacterRenderer) True if the right horn should render in front of character's head Declaration protected virtual bool FrontOfHeadR(PoseCharacterRenderer renderer)"
  },
  "api/AngeliA.Hotkey.html": {
    "href": "api/AngeliA.Hotkey.html",
    "title": "Struct Hotkey | AngeliA",
    "summary": "Struct Hotkey Data for a keyboard hotkey configuration Constructors Hotkey(KeyboardKey, bool, bool, bool) Declaration public Hotkey(KeyboardKey key, bool ctrl = false, bool shift = false, bool alt = false) Hotkey(string) Create a hotkey config from string data. Get this string using hotkey.GetStringData(); Declaration public Hotkey(string data) Fields Alt True if this hotkey require alt to be holding Declaration public readonly bool Alt Ctrl True if this hotkey require ctrl to be holding Declaration public readonly bool Ctrl Key The target keyboard key Declaration public readonly KeyboardKey Key Shift True if this hotkey require shift to be holding Declaration public readonly bool Shift Methods Down() True if the hotkey is pressed for the current frame Declaration public bool Down() DownGUI() True if the hotkey is triggered repeatedly by holding Declaration public bool DownGUI() Equals(object) Indicates whether this instance and a specified object are equal. Declaration public override bool Equals(object obj) Parameters Type Name Description object obj The object to compare with the current instance. Returns Type Description bool true if obj and this instance are the same type and represent the same value; otherwise, false. Overrides ValueType.Equals(object) GetHashCode() Returns the hash code for this instance. Declaration public override int GetHashCode() Returns Type Description int A 32-bit signed integer that is the hash code for this instance. Overrides ValueType.GetHashCode() GetStringData() Get a string that saves the infomation of this hotkey Declaration public string GetStringData() Holding() True if the hotkey is currently holding Declaration public bool Holding() ToString() Returns the fully qualified type name of this instance. Declaration public override string ToString() Returns Type Description string The fully qualified type name. Overrides ValueType.ToString()"
  },
  "api/AngeliA.IActionTarget.html": {
    "href": "api/AngeliA.IActionTarget.html",
    "title": "Interface IActionTarget | AngeliA",
    "summary": "Interface IActionTarget Interface that makes the entity react with player action. When player goes nearby, they can press action button to invoke the logic from this entity Properties AllowInvokeOnSquat True if this entity can be highlight when player is squatting Declaration bool AllowInvokeOnSquat { get; } AllowInvokeOnStand True if this entity can be highlight when player is standing Declaration bool AllowInvokeOnStand { get; } InvokeOnTouch True if this entity will be invoke when player comes nearby without pressing the action button Declaration bool InvokeOnTouch { get; } IsHighlighted True if this entity is currently highlighting Declaration bool IsHighlighted { get; } LockInput True if this entity lock player's input when highlighting Declaration bool LockInput { get; } Methods AllowInvoke() True if the entity can be invoke at current frame Declaration bool AllowInvoke() DrawActionTarget(IActionTarget, AngeSprite, IRect, float, float, bool, bool) Draw the artwork sprite for given action target entity Declaration public static void DrawActionTarget(IActionTarget target, AngeSprite sprite, IRect rect, float pivotX = 0.5, float pivotY = 0, bool blinkHorizontal = true, bool blinkVertical = true) Parameters Type Name Description IActionTarget target The action target entity IRect rect Rect position in global space float pivotX Pivot X for the artwork sprite float pivotY Pivot Y for the artwork sprite bool blinkHorizontal True if the entity blink with nearby entities together horizontaly bool blinkVertical True if the entity blink with nearby entities together Verticaly Invoke() Invoke the logic provided by this entity. Declaration bool Invoke() Returns Type Description bool True if the logic performs successfuly MakeCellAsActionTarget(IActionTarget, Cell, float, float, bool, bool) Make the rendering cell blink like an action target entity Declaration public static void MakeCellAsActionTarget(IActionTarget target, Cell cell, float pivotX = 0.5, float pivotY = 0, bool blinkHorizontal = true, bool blinkVertical = true) Parameters Type Name Description IActionTarget target The entity Cell cell The rendering cell float pivotX Pivot X for the artwork sprite float pivotY Pivot Y for the artwork sprite bool blinkHorizontal True if the entity blink with nearby entities together horizontaly bool blinkVertical True if the entity blink with nearby entities together Verticaly"
  },
  "api/AngeliA.IBlockEntity.html": {
    "href": "api/AngeliA.IBlockEntity.html",
    "title": "Interface IBlockEntity | AngeliA",
    "summary": "Interface IBlockEntity Interface that makes the entity behave like a block from map. This will make the entity become a block item for ItemSystem. Properties AllowBeingEmbedAsElement True if this entity can be embed as a element in map (like putting a coin into a launcher in SMM2 and this entity would be the coin) Declaration bool AllowBeingEmbedAsElement { get; } EmbedEntityAsElement True if this entity can embed other entity as a element in map (like putting a coin into a launcher in SMM2 and this entity would be the launcher) Declaration bool EmbedEntityAsElement { get; } MaxStackCount Max item stack count as a block item. Declaration int MaxStackCount { get; } Methods IsIgnoreEmbedAsElement(int) True if the given type of entity do not take other entity as embed element Declaration public static bool IsIgnoreEmbedAsElement(int blockEntityID) OnEntityPicked() This function is called when this entity being picked as a block by a pick-tool Declaration void OnEntityPicked() OnEntityPut() This function is called when this entity being put into the map as a block Declaration void OnEntityPut() OnEntityRefresh() This function is called when there are map changes happens nearby and the entity needs to refresh itself Declaration void OnEntityRefresh() RefreshBlockEntitiesNearby(Int2, Entity) Refresh all block entity instances near the given position. Declaration public static void RefreshBlockEntitiesNearby(Int2 centerUnitPos, Entity ignore = null) Parameters Type Name Description Int2 centerUnitPos This position is in unit space Entity ignore Do not refresh this entity"
  },
  "api/AngeliA.IBlockSquad.html": {
    "href": "api/AngeliA.IBlockSquad.html",
    "title": "Interface IBlockSquad | AngeliA",
    "summary": "Interface IBlockSquad Instance that provide map block data from unit position Methods FindBlock(int, int, int, int, Direction4, BlockType, out int, out int, int) Get block position from given unit position to given direction Declaration bool FindBlock(int id, int unitX, int unitY, int unitZ, Direction4 direction, BlockType type, out int resultX, out int resultY, int maxDistance = 128) Parameters Type Name Description int id Block ID to find int unitX Start unit position X int unitY Start unit position Y int unitZ Position Z Direction4 direction Searching direction BlockType type Type of the target block int resultX Position X in unit space int resultY Position Y in unit space int maxDistance Limitation of searching distance (Default 128) Returns Type Description bool True if the block founded GetAllBlocksAt(int, int, int) Get all blocks ID at given unit position Declaration (int level, int bg, int entity, int element) GetAllBlocksAt(int unitX, int unitY, int z) Parameters Type Name Description int unitX X position in unit space int unitY Y position in unit space int z Z position GetBlockAt(int, int, int, BlockType) Get block ID at given unit position Declaration int GetBlockAt(int unitX, int unitY, int z, BlockType type) Parameters Type Name Description int unitX X position in unit space int unitY Y position in unit space int z Z position BlockType type Type of the block SetBlockAt(int, int, int, BlockType, int) Set block ID at given unit position Declaration void SetBlockAt(int unitX, int unitY, int z, BlockType type, int newID) Parameters Type Name Description int unitX X position in unit space int unitY Y position in unit space int z Z position BlockType type Type of the block int newID Block ID WorldExists(Int3) True if world data exists at given position Declaration bool WorldExists(Int3 worldPos) Parameters Type Name Description Int3 worldPos Position in world space (1 world space = 256 * 128 global space)"
  },
  "api/AngeliA.IBumpable.html": {
    "href": "api/AngeliA.IBumpable.html",
    "title": "Interface IBumpable | AngeliA",
    "summary": "Interface IBumpable Interface that makes the entity can be bump by other (like question mark block in Mario) Properties BumpCooldown How many frames does it have to wait to be bump again Declaration int BumpCooldown { get; } BumpTransferPower Extra speed that gives to the rigidbody when they got transfered bump from this entity Declaration int BumpTransferPower { get; } FromAbove True if the entity can be bump from above Declaration bool FromAbove { get; } FromBelow True if the entity can be bump from below Declaration bool FromBelow { get; } FromLeft True if the entity can be bump from left Declaration bool FromLeft { get; } FromRight True if the entity can be bump from right Declaration bool FromRight { get; } LastBumpFrom Direction for the last bump of this entity Declaration Direction4 LastBumpFrom { get; set; } LastBumpedFrame Frame when the entity get it's last bump Declaration int LastBumpedFrame { get; set; } TransferBumpFromOther True if the entity take transfered bumps from other Declaration bool TransferBumpFromOther { get; } TransferBumpToOther True if the entity bump other entities when being bumped Declaration bool TransferBumpToOther { get; } TransferWithAttack True if the entity perform attack to the entity when transfer bumps (like in Mario bump on question block can kill the goombas on top) Declaration bool TransferWithAttack { get; } Methods AllowBump(Entity, Direction4) True if the entity can be bump by the given target and direction currently Declaration bool AllowBump(Entity rig, Direction4 from) AnimateForBump(IBumpable, Cell, int, int, int) Update the animation for bump, call this function every frame Declaration public static void AnimateForBump(IBumpable bumpable, Cell cell, int duration = 12, int distance = 32, int size = 32) Parameters Type Name Description IBumpable bumpable Target entity Cell cell Rendering cell int duration How length does the animation takes when it get bump int distance How far does it move when it get bump int size How big does it scale when it get bump BumpAllOverlap(Entity, Direction4, bool, Damage, int) Perform bump for all overlaped IBumpable entities Declaration public static void BumpAllOverlap(Entity sender, Direction4 directionTo, bool forceBump = false, Damage damageToBumpedObject = default, int collisionMask = 3) Parameters Type Name Description Entity sender Entity that send the bump Direction4 directionTo Bump the IBumpables to this direction bool forceBump True if ignore the AllowBump function check this time Damage damageToBumpedObject Damage data that apply to the entities being bump int collisionMask Which layer does this bump applies GetBumpTransferDamage() Get the instance of the damage that this entity deal to other when it transfer bump Declaration Damage GetBumpTransferDamage() IsValidBumpDirection(IBumpable, Direction4) Trie if the given direction can be bump Declaration public static bool IsValidBumpDirection(IBumpable bump, Direction4 from) Parameters Type Name Description IBumpable bump Target entity OnBumped(Entity, Damage) This function is called when this entity is bumped Declaration void OnBumped(Entity rig, Damage damage) Parameters Type Name Description Entity rig Rigidbody that bumps this entity Damage damage The damage this entity got from this bump"
  },
  "api/AngeliA.ICarrier.html": {
    "href": "api/AngeliA.ICarrier.html",
    "title": "Interface ICarrier | AngeliA",
    "summary": "Interface ICarrier Interface that makes entity carry other entities on top Properties AllowBeingCarry True if this entity can be carry by other carrier Declaration bool AllowBeingCarry { get; } CarryHorizontalFrame Declaration int CarryHorizontalFrame { get; set; } CarryLeft Declaration int CarryLeft { get; set; } CarryRight Declaration int CarryRight { get; set; } Methods CarryTargetsOnTopHorizontally(Entity, int, OperationMode) Carry all ICarrier on top. This operation do not make any movement for the host entity itself Declaration public static void CarryTargetsOnTopHorizontally(Entity self, int _deltaX, OperationMode colMode = OperationMode.ColliderOnly) Parameters Type Name Description Entity self Host entity int _deltaX Position delta X at current frame in global space OperationMode colMode Does this operation include colliders and triggers CarryTargetsOnTopVertically(Entity, int, OperationMode) Carry all ICarrier on top. This operation do not make any movement for the host entity itself Declaration public static void CarryTargetsOnTopVertically(Entity self, int _deltaY, OperationMode colMode = OperationMode.ColliderOnly) Parameters Type Name Description Entity self Host entity int _deltaY Position delta Y at current frame in global space OperationMode colMode Does this operation include colliders and triggers OnBeingCarry(int, int) This function is called when this entity is being carried by other Declaration void OnBeingCarry(int deltaX, int deltaY) Parameters Type Name Description int deltaX Position delta X at current frame in global space int deltaY Position delta Y at current frame in global space PerformCarry(int, int) Carry other entities for once Declaration void PerformCarry(int x, int y) Parameters Type Name Description int x Position delta X at current frame in global space int y Position delta Y at current frame in global space"
  },
  "api/AngeliA.ICircuitOperator.html": {
    "href": "api/AngeliA.ICircuitOperator.html",
    "title": "Interface ICircuitOperator | AngeliA",
    "summary": "Interface ICircuitOperator Interface that makes an entity behave like operator in circuit system Methods IsOperator(int) True if the given type of entity is a circuit operator Declaration public static bool IsOperator(int typeID) OnTriggeredByCircuit() This function is called when the operator get triggered by the system Declaration void OnTriggeredByCircuit()"
  },
  "api/AngeliA.ICombustible.html": {
    "href": "api/AngeliA.ICombustible.html",
    "title": "Interface ICombustible | AngeliA",
    "summary": "Interface ICombustible This interface makes the entity can be set on fire Properties BurnStartFrame The frame this entity start on fire Declaration int BurnStartFrame { get; set; } BurnedDuration How many frames does it takes to burn down this entity Declaration int BurnedDuration { get; } IsBurning True if the entity is having a fire entity on Declaration bool IsBurning { get; } Methods OnBurned() This function is called when the entity is burned down Declaration void OnBurned()"
  },
  "api/AngeliA.IDamageReceiver.html": {
    "href": "api/AngeliA.IDamageReceiver.html",
    "title": "Interface IDamageReceiver | AngeliA",
    "summary": "Interface IDamageReceiver Interface that makes entity take damage from other Properties IgnoreDamageType This entity do not take damage with this tags Declaration Tag IgnoreDamageType { get; } IsInvincible True if this entity is invincible Declaration bool IsInvincible { get; } TakeDamageFromLevel True if this entity take damage when overlap with colliders from PhysicsLayer.Damage Declaration bool TakeDamageFromLevel { get; } Team Which team does this entity belongs to Declaration int Team { get; } Methods DamageAllOverlap(IRect, Damage, int, Entity, OperationMode, bool) Deal damage to all IDamageReceiver overlap by given range Declaration public static void DamageAllOverlap(IRect rect, Damage damage, int physicsMask = 10, Entity host = null, OperationMode mode = OperationMode.ColliderAndTrigger, bool allowMultipleDamage = true) Parameters Type Name Description IRect rect The range in global space int physicsMask Which physics layer is included Entity host Sender of this damage OperationMode mode Does this operation include collider or trigger bool allowMultipleDamage True if more than one receiver will take damage OnDamaged(Damage) This function is called when the entity takes a damage Declaration void OnDamaged(Damage damage) TakeDamage(Damage) Make this entity take the given damage. This function will call ValidDamage internally Declaration bool TakeDamage(Damage damage) Returns Type Description bool True if the damage is taken ValidDamage(Damage) True if the damage will be take by this entity Declaration bool ValidDamage(Damage damage)"
  },
  "api/AngeliA.IFire.html": {
    "href": "api/AngeliA.IFire.html",
    "title": "Interface IFire | AngeliA",
    "summary": "Interface IFire Interface that makes the entity behave like fire Methods Putout(bool) Putout this fire Declaration void Putout(bool manually) Parameters Type Name Description bool manually True if the fire got putout by something else PutoutFire(IRect) Putout fire in given range Declaration public static void PutoutFire(IRect rect) Parameters Type Name Description IRect rect Range in global space Setup(ICombustible) Set fire onto a target Declaration void Setup(ICombustible com) SpreadFire(int, IRect, Entity) Set fire at given range Declaration public static void SpreadFire(int fireID, IRect rect, Entity ignore = null) Parameters Type Name Description int fireID Which type of fire will be spawn IRect rect Target range in global space Entity ignore Do not set this entity on fire"
  },
  "api/AngeliA.IItemTransfer.html": {
    "href": "api/AngeliA.IItemTransfer.html",
    "title": "Interface IItemTransfer | AngeliA",
    "summary": "Interface IItemTransfer Interface that mark the entity as can be transfer item through map Properties Direction Declaration Direction4 Direction { get; }"
  },
  "api/AngeliA.IJsonSerializationCallback.html": {
    "href": "api/AngeliA.IJsonSerializationCallback.html",
    "title": "Interface IJsonSerializationCallback | AngeliA",
    "summary": "Interface IJsonSerializationCallback Interface that receive callback functions when Serialized with JsonUtil Methods OnAfterLoadedFromDisk() This function is called after json object load from file Declaration void OnAfterLoadedFromDisk() OnBeforeSaveToDisk() This function is called before json object save to file Declaration void OnBeforeSaveToDisk()"
  },
  "api/AngeliA.IMapItem.html": {
    "href": "api/AngeliA.IMapItem.html",
    "title": "Interface IMapItem | AngeliA",
    "summary": "Interface IMapItem Marks class as item that can be paint as map editor block"
  },
  "api/AngeliA.IPlayable.html": {
    "href": "api/AngeliA.IPlayable.html",
    "title": "Interface IPlayable | AngeliA",
    "summary": "Interface IPlayable Interface that mark the character as playable character Properties IlluminateAmount Lighting system illuminate amount. 0 means no illuminate. 1000 means general amount. Declaration int IlluminateAmount { get; } IlluminateRadius Lighting system illuminate size in global space Declaration int IlluminateRadius { get; }"
  },
  "api/AngeliA.IProgressiveItem.html": {
    "href": "api/AngeliA.IProgressiveItem.html",
    "title": "Interface IProgressiveItem | AngeliA",
    "summary": "Interface IProgressiveItem Interface that makes the item break/repair into other item Properties NextItemID ID of the item that this item will become when it got repair Declaration int NextItemID { get; set; } PrevItemID ID of the item that this item will become when it's broken Declaration int PrevItemID { get; set; } Progress Current localtion inside the profress chain Declaration int Progress { get; set; } TotalProgress Total count of the profress chain Declaration int TotalProgress { get; set; }"
  },
  "api/AngeliA.IRect.html": {
    "href": "api/AngeliA.IRect.html",
    "title": "Struct IRect | AngeliA",
    "summary": "Struct IRect rectangle with intager data Implements IEquatable<IRect> IFormattable Constructors IRect(IRect) Declaration public IRect(IRect source) IRect(Int2, Int2) Declaration public IRect(Int2 position, Int2 size) IRect(int, int, int, int) Declaration public IRect(int xMin, int yMin, int width, int height) Fields height Vertical size Declaration public int height width Horizontal size Declaration public int width x Left position Declaration public int x y Bottom position Declaration public int y Properties center Declaration public readonly Float2 center { get; } max Declaration public Int2 max { readonly get; set; } min Declaration public Int2 min { readonly get; set; } position Always return (x, y) no matter size is positive of negative Declaration public Int2 position { readonly get; set; } size (width, height) Declaration public Int2 size { readonly get; set; } xMax Declaration public int xMax { readonly get; set; } xMin Declaration public int xMin { readonly get; set; } yMax Declaration public int yMax { readonly get; set; } yMin Declaration public int yMin { readonly get; set; } Methods Contains(Int2) True if the given position is inside this rectangle Declaration public readonly bool Contains(Int2 position) Equals(IRect) Indicates whether the current object is equal to another object of the same type. Declaration public readonly bool Equals(IRect other) Parameters Type Name Description IRect other An object to compare with this object. Returns Type Description bool true if the current object is equal to the other parameter; otherwise, false. Equals(object) Indicates whether this instance and a specified object are equal. Declaration public override readonly bool Equals(object other) Returns Type Description bool true if obj and this instance are the same type and represent the same value; otherwise, false. Overrides ValueType.Equals(object) GetHashCode() Returns the hash code for this instance. Declaration public override readonly int GetHashCode() Returns Type Description int A 32-bit signed integer that is the hash code for this instance. Overrides ValueType.GetHashCode() MinMaxRect(Int2, Int2) Create a rectangle with given min and max positions Declaration public static IRect MinMaxRect(Int2 min, Int2 max) MinMaxRect(int, int, int, int) Create a rectangle with given min and max positions Declaration public static IRect MinMaxRect(int minX, int minY, int maxX, int maxY) Overlaps(IRect) True if the given rectangle overlap with current one Declaration public readonly bool Overlaps(IRect other) Point(Int2) Create a rectangle with 1 in width and height Declaration public static IRect Point(Int2 pos) Point(int, int) Create a rectangle with 1 in width and height Declaration public static IRect Point(int x, int y) SetMinMax(Int2, Int2) Set value of this rectangle with min and max position Declaration public void SetMinMax(Int2 minPosition, Int2 maxPosition) ToString() Returns the fully qualified type name of this instance. Declaration public override readonly string ToString() Returns Type Description string The fully qualified type name. Overrides ValueType.ToString() ToString(string) Declaration public readonly string ToString(string format) ToString(string, IFormatProvider) Formats the value of the current instance using the specified format. Declaration public readonly string ToString(string format, IFormatProvider formatProvider) Parameters Type Name Description string format The format to use. -or- A null reference (Nothing in Visual Basic) to use the default format defined for the type of the IFormattable implementation. IFormatProvider formatProvider The provider to use to format the value. -or- A null reference (Nothing in Visual Basic) to obtain the numeric format information from the current locale setting of the operating system. Returns Type Description string The value of the current instance in the specified format. Operators operator ==(IRect, IRect) Declaration public static bool operator ==(IRect lhs, IRect rhs) operator !=(IRect, IRect) Declaration public static bool operator !=(IRect lhs, IRect rhs)"
  },
  "api/AngeliA.IRouteWalker.html": {
    "href": "api/AngeliA.IRouteWalker.html",
    "title": "Interface IRouteWalker | AngeliA",
    "summary": "Interface IRouteWalker Interface that makes an entity walks along a given path Properties CurrentDirection Which direction this entity is currently walking Declaration Direction8 CurrentDirection { get; set; } TargetPosition Where does this entity currently walking Declaration Int2 TargetPosition { get; set; } Methods GetNextRoutePosition(Entity, ref Direction8, ref Int2, int, int, bool, BlockType, bool, HashSet<int>) Get the position in global space that the walker entity should go to Declaration public static Int2 GetNextRoutePosition(Entity entity, ref Direction8 currentDirection, ref Int2 targetPosition, int pathID, int speed, bool allowTurnBack = false, BlockType pathType = BlockType.Element, bool allowTilt = true, HashSet<int> pathSet = null) Parameters Type Name Description Entity entity Target entity that walks Direction8 currentDirection Which direction this entity is currently walking Int2 targetPosition Where does this entity currently walking int pathID Which map block should be treat as the path marker int speed Movement speed in global space bool allowTurnBack True if the walker turn back when reach the edge BlockType pathType Block type of the path marker bool allowTilt True if the walker can walk diagonally HashSet<int> pathSet A hash set of path marks, set to null if there's only one mark Returns Type Description Int2 The final position in global space GetNextRoutePosition(IRouteWalker, int, int, bool, BlockType, bool, HashSet<int>) Get the position in global space that the walker entity should go to Declaration public static Int2 GetNextRoutePosition(IRouteWalker walker, int pathID, int speed, bool allowTurnBack = false, BlockType pathType = BlockType.Element, bool allowTilt = true, HashSet<int> pathSet = null) Parameters Type Name Description IRouteWalker walker Target walker int pathID Which map block should be treat as the path marker int speed Movement speed in global space bool allowTurnBack True if the walker turn back when reach the edge BlockType pathType Block type of the path marker bool allowTilt True if the walker can walk diagonally HashSet<int> pathSet A hash set of path marks, set to null if there's only one mark Returns Type Description Int2 The final position in global space TryGetRouteFromMap(HashSet<int>, int, int, Direction8, out Direction8, BlockType, bool) Get path marker block from map Declaration public static bool TryGetRouteFromMap(HashSet<int> pathSet, int unitX, int unitY, Direction8 currentDirection, out Direction8 result, BlockType pathType = BlockType.Element, bool allowTilt = true) Parameters Type Name Description HashSet<int> pathSet A hash set of path marks, set to null if there's only one mark int unitX Position X in unit space int unitY Position Y in unit space Direction8 currentDirection Which direction this entity is currently walking Direction8 result Direction the walker should go BlockType pathType Block type of the path marker bool allowTilt True if the walker can walk diagonally Returns Type Description bool True if the path is successfuly found TryGetRouteFromMap(int, int, int, Direction8, out Direction8, BlockType, bool) Get path marker block from map Declaration public static bool TryGetRouteFromMap(int pathID, int unitX, int unitY, Direction8 currentDirection, out Direction8 result, BlockType pathType = BlockType.Element, bool allowTilt = true) Parameters Type Name Description int pathID ID of the path marker block int unitX Position X in unit space int unitY Position Y in unit space Direction8 currentDirection Which direction this entity is currently walking Direction8 result Direction the walker should go BlockType pathType Block type of the path marker bool allowTilt True if the walker can walk diagonally Returns Type Description bool True if the path is successfuly found"
  },
  "api/AngeliA.IUndoItem.html": {
    "href": "api/AngeliA.IUndoItem.html",
    "title": "Interface IUndoItem | AngeliA",
    "summary": "Interface IUndoItem Properties Step Declaration int Step { get; set; }"
  },
  "api/AngeliA.IWindowEntityUI.html": {
    "href": "api/AngeliA.IWindowEntityUI.html",
    "title": "Interface IWindowEntityUI | AngeliA",
    "summary": "Interface IWindowEntityUI Interface that indicate the entity is a UI window Properties BackgroundRect Rect position of the background in global space Declaration IRect BackgroundRect { get; }"
  },
  "api/AngeliA.IWithCharacterAttackness.html": {
    "href": "api/AngeliA.IWithCharacterAttackness.html",
    "title": "Interface IWithCharacterAttackness | AngeliA",
    "summary": "Interface IWithCharacterAttackness Interface that makes the entity contains a instance of character attackness behaviour Properties CurrentAttackness Declaration CharacterAttackness CurrentAttackness { get; }"
  },
  "api/AngeliA.IWithCharacterBuff.html": {
    "href": "api/AngeliA.IWithCharacterBuff.html",
    "title": "Interface IWithCharacterBuff | AngeliA",
    "summary": "Interface IWithCharacterBuff Interface that makes the entity contains a instance of character buff behaviour Properties CurrentBuff Declaration CharacterBuff CurrentBuff { get; }"
  },
  "api/AngeliA.IWithCharacterHealth.html": {
    "href": "api/AngeliA.IWithCharacterHealth.html",
    "title": "Interface IWithCharacterHealth | AngeliA",
    "summary": "Interface IWithCharacterHealth Interface that makes the entity contains a instance of character health behaviour Properties CurrentHealth Declaration CharacterHealth CurrentHealth { get; }"
  },
  "api/AngeliA.IWithCharacterMovement.html": {
    "href": "api/AngeliA.IWithCharacterMovement.html",
    "title": "Interface IWithCharacterMovement | AngeliA",
    "summary": "Interface IWithCharacterMovement Interface that makes the entity contains a instance of character movement behaviour Properties CurrentMovement Declaration CharacterMovement CurrentMovement { get; }"
  },
  "api/AngeliA.IWithCharacterRenderer.html": {
    "href": "api/AngeliA.IWithCharacterRenderer.html",
    "title": "Interface IWithCharacterRenderer | AngeliA",
    "summary": "Interface IWithCharacterRenderer Interface that makes the entity contains a instance of character rendering behaviour Properties CurrentRenderer Declaration CharacterRenderer CurrentRenderer { get; }"
  },
  "api/AngeliA.IgnoreArtworkPixelsAttribute.html": {
    "href": "api/AngeliA.IgnoreArtworkPixelsAttribute.html",
    "title": "Class IgnoreArtworkPixelsAttribute | AngeliA",
    "summary": "Class IgnoreArtworkPixelsAttribute Current application do not load pixel data from sheet"
  },
  "api/AngeliA.IgnoreInputScope.html": {
    "href": "api/AngeliA.IgnoreInputScope.html",
    "title": "Struct IgnoreInputScope | AngeliA",
    "summary": "Struct IgnoreInputScope Scope that make GUI elements ignore keyboard or mouse input from user Implements IDisposable Examples using AngeliA; namespace AngeliaGame; public class Example { [OnGameUpdate] internal static void OnGameUpdate () { using (new IgnoreInputScope()) { // GUI elements inside will ignore keyboard or mouse input from user } } } Constructors IgnoreInputScope() Scope that make GUI elements ignore keyboard or mouse input from user Declaration public IgnoreInputScope() IgnoreInputScope(bool, bool) Scope that make GUI elements ignore keyboard or mouse input from user Declaration public IgnoreInputScope(bool ignoreKey, bool ignoreMouse) Methods Dispose() Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources. Declaration public void Dispose()"
  },
  "api/AngeliA.Input.html": {
    "href": "api/AngeliA.Input.html",
    "title": "Class Input | AngeliA",
    "summary": "Class Input Frame based core system for user input from keyboard, mouse and gamepad Properties AllowGamepad True if gamepad is allow to use from game setting Declaration public static bool AllowGamepad { get; set; } AnyGamekeyDown True if any game-key key start to be holding at current frame Declaration public static bool AnyGamekeyDown { get; } AnyGamekeyHolding True if any game-key is holding at current frame Declaration public static bool AnyGamekeyHolding { get; } AnyGamepadButtonDown True if any gamepad button start to be holding at current frame Declaration public static bool AnyGamepadButtonDown { get; } AnyGamepadButtonHolding True if any gamepad button is holding at current frame Declaration public static bool AnyGamepadButtonHolding { get; } AnyKeyDown True if any keyboard/gamepad/mouse key start to be holding at current frame Declaration public static bool AnyKeyDown { get; } AnyKeyHolding True if any keyboard/gamepad/mouse key is holding at current frame Declaration public static bool AnyKeyHolding { get; } AnyKeyboardKeyDown True if any keyboard key start to be holding at current frame Declaration public static bool AnyKeyboardKeyDown { get; } AnyKeyboardKeyHolding True if any keyboard key is holding at current frame Declaration public static bool AnyKeyboardKeyHolding { get; } AnyMouseButtonDown True if any mouse button start to be holding at current frame Declaration public static bool AnyMouseButtonDown { get; } AnyMouseButtonHolding True if any mouse button is holding at current frame Declaration public static bool AnyMouseButtonHolding { get; } Direction Direction at current frame from gamekey, d-pad and joystick Declaration public static Int2 Direction { get; } DirectionX Horizontal direction at current frame from gamekey, d-pad and joystick Declaration public static Direction3 DirectionX { get; } DirectionY Vertical direction at current frame from gamekey, d-pad and joystick Declaration public static Direction3 DirectionY { get; } HoldingAlt True if alt key is holding at current frame Declaration public static bool HoldingAlt { get; } HoldingCtrl True if ctrl key is holding at current frame Declaration public static bool HoldingCtrl { get; } HoldingShift True if shift key is holding at current frame Declaration public static bool HoldingShift { get; } IgnoringKeyInput True if the input system do not receive keyboard/game-key input currently Declaration public static bool IgnoringKeyInput { get; } IgnoringMouseInput True if the input system do not receive mouse input currently Declaration public static bool IgnoringMouseInput { get; } LastActionFromMouse True if last user action is from mouse instead of keyboard Declaration public static bool LastActionFromMouse { get; } MouseGlobalPosition Position of the mouse at current frame in global space Declaration public static Int2 MouseGlobalPosition { get; } MouseGlobalPositionDelta Position changed of the mouse at current frame in global space Declaration public static Int2 MouseGlobalPositionDelta { get; } MouseLeftButtonDown True if mouse left button start to be holding at current frame Declaration public static bool MouseLeftButtonDown { get; } MouseLeftButtonHolding True if mouse left button is holding at current frame Declaration public static bool MouseLeftButtonHolding { get; } MouseLeftDownGlobalPosition Position of the mouse in global space when last time mouse left button press down Declaration public static Int2 MouseLeftDownGlobalPosition { get; } MouseMidButtonDown True if mouse middle button start to be holding at current frame Declaration public static bool MouseMidButtonDown { get; } MouseMidButtonHolding True if mouse middle button is holding at current frame Declaration public static bool MouseMidButtonHolding { get; } MouseMidDownGlobalPosition Position of the mouse in global space when last time mouse middle button press down Declaration public static Int2 MouseMidDownGlobalPosition { get; } MouseMove True if mouse moved at current frame Declaration public static bool MouseMove { get; } MouseRightButtonDown True if mouse right button start to be holding at current frame Declaration public static bool MouseRightButtonDown { get; } MouseRightButtonHolding True if mouse right button is holding at current frame Declaration public static bool MouseRightButtonHolding { get; } MouseRightDownGlobalPosition Position of the mouse in global space when last time mouse right button press down Declaration public static Int2 MouseRightDownGlobalPosition { get; } MouseScreenPosition Position of the mouse at current frame in screen space Declaration public static Int2 MouseScreenPosition { get; } MouseScreenPositionDelta Position changed of the mouse at current frame in screen space Declaration public static Int2 MouseScreenPositionDelta { get; } MouseWheelDelta Mouse wheel scroll value at current frame. Return negative value when the page scrolls down (the content appears to move upward) Declaration public static int MouseWheelDelta { get; } UnshiftedMouseGlobalPosition Position changed of the mouse at current frame in global space which is not effect by Input.SetMousePositionShift Declaration public static Int2 UnshiftedMouseGlobalPosition { get; } UsingGamepad True if the user just used the gamepad Declaration public static bool UsingGamepad { get; } UsingLeftStick True if the user just used the list joystick Declaration public static bool UsingLeftStick { get; } Methods CancelIgnoreKeyInput() Do not ignore key input any more Declaration public static void CancelIgnoreKeyInput() CancelIgnoreMouseInput() Do not ignore mouse input any more Declaration public static void CancelIgnoreMouseInput() GameKeyDown(Gamekey) True if given game-key start to be holding at current frame Declaration public static bool GameKeyDown(Gamekey key) GameKeyDownGUI(Gamekey) True if given game-key pressed down repeatedly by holding down Declaration public static bool GameKeyDownGUI(Gamekey key) GameKeyHolding(Gamekey) True if given game-key is currently holding Declaration public static bool GameKeyHolding(Gamekey key) GameKeyUp(Gamekey) True if the given game-key just released at current frame Declaration public static bool GameKeyUp(Gamekey key) GetDefaultGamepadMap(Gamekey) Get which gamepad-button is default mapping key for given game-key Declaration public static GamepadKey GetDefaultGamepadMap(Gamekey key) GetDefaultKeyboardMap(Gamekey) Get which keyboard key is default mapping key for given game-key Declaration public static KeyboardKey GetDefaultKeyboardMap(Gamekey key) GetGamepadMap(Gamekey) Get which gamepad-button is mapping into given game-key Declaration public static GamepadKey GetGamepadMap(Gamekey key) GetHoldingMouseButton() Get index of the current holding mouse button. (order: left > right > middle) Declaration public static int GetHoldingMouseButton() Returns Type Description int 0 means left, 1 means right, 2 means middle, -1 means no button holding GetKeyboardMap(Gamekey) Get which keyboard key is mapping into given game-key Declaration public static KeyboardKey GetKeyboardMap(Gamekey key) IgnoreAllInput(int) Make all user input ignored by the system for given frames long Declaration public static void IgnoreAllInput(int duration = 0) IgnoreKeyInput(int) Make user keyboard/game-key input ignored by the system for given frames long Declaration public static void IgnoreKeyInput(int duration = 0) IgnoreMouseInput(int) Make all user mouse input ignored by the system for given frames long Declaration public static void IgnoreMouseInput(int duration = 0) IgnoreMouseToActionJump(bool, bool, bool, int) Ignore \"mouse left to action and mouse right to jump\" for given frames long Declaration public static void IgnoreMouseToActionJump(bool ignoreAction = true, bool ignoreJump = true, bool useMidButtonAsAction = false, int duration = 1) IgnoreRightStickToMouseWheel(int) Ignore \"gamepad right stick to control mouse wheel\" for given frames long Declaration public static void IgnoreRightStickToMouseWheel(int duration = 1) IsMouseLeftButtonDoubleClick(int) True if mouse left button performed a double click at current frame Declaration public static bool IsMouseLeftButtonDoubleClick(int clickDeltaFrame = 30) Parameters Type Name Description int clickDeltaFrame Two clicks inside this time range count as a double click IsMouseMiddleButtonDoubleClick(int) True if mouse middle button performed a double click at current frame Declaration public static bool IsMouseMiddleButtonDoubleClick(int clickDeltaFrame = 30) Parameters Type Name Description int clickDeltaFrame Two clicks inside this time range count as a double click IsMouseRightButtonDoubleClick(int) True if mouse right button performed a double click at current frame Declaration public static bool IsMouseRightButtonDoubleClick(int clickDeltaFrame = 30) Parameters Type Name Description int clickDeltaFrame Two clicks inside this time range count as a double click KeyboardDown(KeyboardKey) True if given keyboard-key start to be holding at current frame Declaration public static bool KeyboardDown(KeyboardKey key) KeyboardDownGUI(KeyboardKey) True if given keyboard-key pressed down repeatedly by holding down Declaration public static bool KeyboardDownGUI(KeyboardKey key) KeyboardHolding(KeyboardKey) True if given keyboard-key is currently holding Declaration public static bool KeyboardHolding(KeyboardKey key) KeyboardKeyUsed(KeyboardKey) True if the given keyboard-key is mark as used Declaration public static bool KeyboardKeyUsed(KeyboardKey key) KeyboardUp(KeyboardKey) True if the given keyboard-key just released at current frame Declaration public static bool KeyboardUp(KeyboardKey key) MouseButtonHolding(int) True if the given mouse button is holding at current frame Declaration public static bool MouseButtonHolding(int button) Parameters Type Name Description int button 0 means left, 1 means right, 2 means middle MouseKeyUsed(int) True if the given mouse button is mark as used Declaration public static bool MouseKeyUsed(int key) Parameters Type Name Description int key 0 means left, 1 means right, 2 means middle SetGamepadMap(Gamekey, GamepadKey) Map given gamepad-button into given game-key and save it to disk Declaration public static void SetGamepadMap(Gamekey gameKey, GamepadKey gamepadKey) SetKeyboardMap(Gamekey, KeyboardKey) Map given keyboard-key into given game-key and save it to disk Declaration public static void SetKeyboardMap(Gamekey gameKey, KeyboardKey keyboardKey) SetMousePositionShift(int, int) Shift mouse position for current frame. Only effect internal system not where the cursor appearingly is. Declaration public static void SetMousePositionShift(int x, int y) TryGetHoldingGamepadButton(out GamepadKey) Get the gamepad button that currently holding Declaration public static bool TryGetHoldingGamepadButton(out GamepadKey button) Parameters Type Name Description GamepadKey button Result holding button Returns Type Description bool True if holding button founded TryGetHoldingKeyboardKey(out KeyboardKey) Get the keyboard key that currently holding Declaration public static bool TryGetHoldingKeyboardKey(out KeyboardKey key) Parameters Type Name Description KeyboardKey key Result holding key Returns Type Description bool True if holding key founded UnuseAllMouseKey() Remove the used mark for all mouse button Declaration public static void UnuseAllMouseKey() UnuseGameKey(Gamekey) Remove the used mark for given game-key Declaration public static void UnuseGameKey(Gamekey key) UnuseKeyboardKey(KeyboardKey) Remove the used mark for given keyboard-key Declaration public static void UnuseKeyboardKey(KeyboardKey key) UnuseMouseKey(int) Remove the used mark for given mouse button Declaration public static void UnuseMouseKey(int key) UseAllHoldingKeys(bool) Mark all current holding game-keys ans keyboard-keys as used so they will not be \"down\" or \"holding\" at current frame Declaration public static void UseAllHoldingKeys(bool ignoreMouse = false) UseAllMouseKey() Mark all current holding mouse buttons as used so they will not be \"down\" or \"holding\" at current frame Declaration public static void UseAllMouseKey() UseGameKey(Gamekey) Mark given game-key as used so it will not be \"down\" or \"holding\" at current frame Declaration public static void UseGameKey(Gamekey key) UseKeyboardKey(KeyboardKey) Mark given keyboard-key as used so it will not be \"down\" or \"holding\" at current frame Declaration public static void UseKeyboardKey(KeyboardKey key) UseMouseKey(int) Mark given mouse button as used so it will not be \"down\" or \"holding\" at current frame Declaration public static void UseMouseKey(int index)"
  },
  "api/AngeliA.Int2.html": {
    "href": "api/AngeliA.Int2.html",
    "title": "Struct Int2 | AngeliA",
    "summary": "Struct Int2 2D vector with intager data Implements IEquatable<Int2> Constructors Int2(int, int) Declaration public Int2(int x, int y) Fields Down Declaration public static readonly Int2 Down Left Declaration public static readonly Int2 Left One Declaration public static readonly Int2 One Right Declaration public static readonly Int2 Right Up Declaration public static readonly Int2 Up Zero Declaration public static readonly Int2 Zero x Declaration public int x y Declaration public int y Properties Area x * y Declaration public readonly int Area { get; } this[int] Get int data inside with given index. (0 means x, 1 means y) Declaration public int this[int index] { readonly get; set; } Magnitude Length of the vector Declaration public readonly float Magnitude { get; } SqrMagnitude Square length of the vector Declaration public readonly int SqrMagnitude { get; } Methods Deconstruct(out int, out int) Declaration public readonly void Deconstruct(out int x, out int y) Distance(Int2, Int2) Distance between two given position Declaration public static float Distance(Int2 a, Int2 b) Equals(Int2) Indicates whether the current object is equal to another object of the same type. Declaration public readonly bool Equals(Int2 other) Parameters Type Name Description Int2 other An object to compare with this object. Returns Type Description bool true if the current object is equal to the other parameter; otherwise, false. Equals(object) Indicates whether this instance and a specified object are equal. Declaration public override readonly bool Equals(object other) Returns Type Description bool true if obj and this instance are the same type and represent the same value; otherwise, false. Overrides ValueType.Equals(object) GetHashCode() Returns the hash code for this instance. Declaration public override readonly int GetHashCode() Returns Type Description int A 32-bit signed integer that is the hash code for this instance. Overrides ValueType.GetHashCode() Set(int, int) Declaration public void Set(int x, int y) Shift(int, int) Move the position with given amount Declaration public readonly Int2 Shift(int x, int y) ToString() Returns the fully qualified type name of this instance. Declaration public override readonly string ToString() Returns Type Description string The fully qualified type name. Overrides ValueType.ToString() Operators operator +(Int2, Int2) Declaration public static Int2 operator +(Int2 a, Int2 b) operator /(Int2, int) Declaration public static Int2 operator /(Int2 a, int b) operator ==(Int2, Int2) Declaration public static bool operator ==(Int2 lhs, Int2 rhs) explicit operator Int3(Int2) Declaration public static explicit operator Int3(Int2 v) implicit operator Float2(Int2) Declaration public static implicit operator Float2(Int2 v) operator !=(Int2, Int2) Declaration public static bool operator !=(Int2 lhs, Int2 rhs) operator *(Int2, Int2) Declaration public static Int2 operator *(Int2 a, Int2 b) operator *(Int2, int) Declaration public static Int2 operator *(Int2 a, int b) operator *(int, Int2) Declaration public static Int2 operator *(int a, Int2 b) operator -(Int2, Int2) Declaration public static Int2 operator -(Int2 a, Int2 b) operator -(Int2) Declaration public static Int2 operator -(Int2 v)"
  },
  "api/AngeliA.Int3.html": {
    "href": "api/AngeliA.Int3.html",
    "title": "Struct Int3 | AngeliA",
    "summary": "Struct Int3 3D vector with intager data Implements IEquatable<Int3> Constructors Int3(int, int) Declaration public Int3(int x, int y) Int3(int, int, int) Declaration public Int3(int x, int y, int z) Fields Back Declaration public static readonly Int3 Back Down Declaration public static readonly Int3 Down Forward Declaration public static readonly Int3 Forward Left Declaration public static readonly Int3 Left One Declaration public static readonly Int3 One Right Declaration public static readonly Int3 Right Up Declaration public static readonly Int3 Up Zero Declaration public static readonly Int3 Zero x Declaration public int x y Declaration public int y z Declaration public int z Properties this[int] Get int data inside with given index. (0 means x, 1 means y, 2 means z) Declaration public int this[int index] { readonly get; set; } Magnitude Length of this vector Declaration public readonly float Magnitude { get; } SqrMagnitude Square length of this vector Declaration public readonly int SqrMagnitude { get; } Methods Distance(Int3, Int3) Distance between two given position Declaration public static float Distance(Int3 a, Int3 b) Equals(Int3) Indicates whether the current object is equal to another object of the same type. Declaration public readonly bool Equals(Int3 other) Parameters Type Name Description Int3 other An object to compare with this object. Returns Type Description bool true if the current object is equal to the other parameter; otherwise, false. Equals(object) Indicates whether this instance and a specified object are equal. Declaration public override readonly bool Equals(object other) Returns Type Description bool true if obj and this instance are the same type and represent the same value; otherwise, false. Overrides ValueType.Equals(object) GetHashCode() Returns the hash code for this instance. Declaration public override readonly int GetHashCode() Returns Type Description int A 32-bit signed integer that is the hash code for this instance. Overrides ValueType.GetHashCode() Set(int, int, int) Declaration public void Set(int x, int y, int z) Shift(int, int, int) Move position by given amount Declaration public readonly Int3 Shift(int x, int y, int z = 0) ToString() Returns the fully qualified type name of this instance. Declaration public override readonly string ToString() Returns Type Description string The fully qualified type name. Overrides ValueType.ToString() Operators operator +(Int3, Int3) Declaration public static Int3 operator +(Int3 a, Int3 b) operator /(Int3, int) Declaration public static Int3 operator /(Int3 a, int b) operator ==(Int3, Int3) Declaration public static bool operator ==(Int3 lhs, Int3 rhs) explicit operator Int2(Int3) Declaration public static explicit operator Int2(Int3 v) implicit operator Float3(Int3) Declaration public static implicit operator Float3(Int3 v) operator !=(Int3, Int3) Declaration public static bool operator !=(Int3 lhs, Int3 rhs) operator *(Int3, Int3) Declaration public static Int3 operator *(Int3 a, Int3 b) operator *(Int3, int) Declaration public static Int3 operator *(Int3 a, int b) operator *(int, Int3) Declaration public static Int3 operator *(int a, Int3 b) operator -(Int3, Int3) Declaration public static Int3 operator -(Int3 a, Int3 b) operator -(Int3) Declaration public static Int3 operator -(Int3 a)"
  },
  "api/AngeliA.Int4.html": {
    "href": "api/AngeliA.Int4.html",
    "title": "Struct Int4 | AngeliA",
    "summary": "Struct Int4 4D vector with intager data Implements IEquatable<Int4> Constructors Int4(int, int, int, int) 4D vector with intager data Declaration public Int4(int x, int y, int z, int w) Fields One Declaration public static readonly Int4 One Three Declaration public static readonly Int4 Three Two Declaration public static readonly Int4 Two Zero Declaration public static readonly Int4 Zero w Declaration public int w x Declaration public int x y Declaration public int y z Declaration public int z Properties IsZero True if all values of this vector are 0 Declaration public readonly bool IsZero { get; } this[int] Get int data inside with given index. (0 means x, 1 means y, 2 means z, 3 means w) Declaration public int this[int index] { readonly get; set; } down Treat this vector as padding/border value with 4 directions Declaration public int down { readonly get; set; } horizontal left + right Declaration public readonly int horizontal { get; } left Treat this vector as padding/border value with 4 directions Declaration public int left { readonly get; set; } right Treat this vector as padding/border value with 4 directions Declaration public int right { readonly get; set; } up Treat this vector as padding/border value with 4 directions Declaration public int up { readonly get; set; } vertical down + up Declaration public readonly int vertical { get; } Methods Contains(int) True if any value inside this vector is given value Declaration public readonly bool Contains(int value) Count(int) How many value inside this vector is equal to given value Declaration public readonly int Count(int value) Direction(int, int, int, int) Get a Int4 as a padding/border with 4 directions Declaration public static Int4 Direction(int left, int right, int down, int up) Equals(Int4) Indicates whether the current object is equal to another object of the same type. Declaration public readonly bool Equals(Int4 other) Parameters Type Name Description Int4 other An object to compare with this object. Returns Type Description bool true if the current object is equal to the other parameter; otherwise, false. Equals(object) Indicates whether this instance and a specified object are equal. Declaration public override readonly bool Equals(object other) Returns Type Description bool true if obj and this instance are the same type and represent the same value; otherwise, false. Overrides ValueType.Equals(object) FindIndex(int) Index of the given value from this vector Declaration public readonly int FindIndex(int value) GetHashCode() Returns the hash code for this instance. Declaration public override readonly int GetHashCode() Returns Type Description int A 32-bit signed integer that is the hash code for this instance. Overrides ValueType.GetHashCode() ToString() Returns the fully qualified type name of this instance. Declaration public override readonly string ToString() Returns Type Description string The fully qualified type name. Overrides ValueType.ToString() Operators operator +(Int4, Int4) Declaration public static Int4 operator +(Int4 a, Int4 b) operator /(Int4, int) Declaration public static Int4 operator /(Int4 a, int b) operator ==(Int4, Int4) Declaration public static bool operator ==(Int4 a, Int4 b) explicit operator Int2(Int4) Declaration public static explicit operator Int2(Int4 i) explicit operator Int3(Int4) Declaration public static explicit operator Int3(Int4 i) operator !=(Int4, Int4) Declaration public static bool operator !=(Int4 a, Int4 b) operator *(Int4, int) Declaration public static Int4 operator *(Int4 a, int b) operator *(int, Int4) Declaration public static Int4 operator *(int b, Int4 a)"
  },
  "api/AngeliA.IntToChars.html": {
    "href": "api/AngeliA.IntToChars.html",
    "title": "Class IntToChars | AngeliA",
    "summary": "Class IntToChars Get char array that holds the given intager as text content without creating heap pressure Constructors IntToChars(string, string) Get char array that holds the given intager as text content without creating heap pressure Declaration public IntToChars(string prefix = \"\", string suffix = \"\") Parameters Type Name Description string prefix Label that add before the text content string suffix Label that add after the text content Methods Chars_to_Int(char[], int) Get intager from the given char array Declaration public static int Chars_to_Int(char[] charsValue, int startIndex = 0) GetChars(int) Calculate the char array based on the given intager Declaration public char[] GetChars(int value) Int_to_Chars(int, char[], ref int) Calculate char array based on the given intager Declaration public static void Int_to_Chars(int intValue, char[] charsValue, ref int startIndex) int startIndex Index of the next edit value"
  },
  "api/AngeliA.Inventory.html": {
    "href": "api/AngeliA.Inventory.html",
    "title": "Class Inventory | AngeliA",
    "summary": "Class Inventory Core system to handle storage of items Properties PoolReady True if the system is read to use Declaration public static bool PoolReady { get; } Methods AddItemAt(int, int, int) Add \"count\" to the given item Declaration public static int AddItemAt(int inventoryID, int itemIndex, int count = 1) Returns Type Description int How many items has been added. 0 means no item added. \"count\" means all items added. CollectItem(int, int, int, bool, bool, bool) Add item into given inventory to first free slot founded. Declaration public static int CollectItem(int inventoryID, int item, int count = 1, bool ignoreEquipment = true, bool ignoreInventory = false, bool dontCollectIntoEmptyEquipmentSlot = false) int item ID of the item int count Count of the item bool ignoreEquipment True if do not add into equipment part bool ignoreInventory True if do not add into inventory part (non-equipment part) bool dontCollectIntoEmptyEquipmentSlot True if do not add item into empty slot of equipment part Returns Type Description int How many items has been collected. 0 means no item collected. \"count\" means all items collected. CollectItem(int, int, out int, int, bool, bool, bool) Add item into given inventory to first free slot founded. Declaration public static int CollectItem(int inventoryID, int item, out int collectIndex, int count = 1, bool ignoreEquipment = true, bool ignoreInventory = false, bool dontCollectIntoEmptyEquipmentSlot = false) int item ID of the item int collectIndex Index of which slot collect the item. -1 if not collected. int count Count of the item bool ignoreEquipment True if do not add into equipment part bool ignoreInventory True if do not add into inventory part (non-equipment part) bool dontCollectIntoEmptyEquipmentSlot True if do not add item into empty slot of equipment part Returns Type Description int How many items has been collected. 0 means no item collected. \"count\" means all items collected. FillEquipmentFromInventory(int, EquipmentType) Make items with same ID inside inventory part stack onto equipment part Declaration public static void FillEquipmentFromInventory(int inventoryID, EquipmentType type) FindAndAddItem(int, int, int, bool) Find given item and add \"count\" to the item Declaration public static int FindAndAddItem(int inventoryID, int targetItemID, int count = 1, bool ignoreEquipment = true) bool ignoreEquipment True if do not search for equipment part Returns Type Description int How many items has been added. 0 means no item added. \"count\" means all items added. FindAndTakeItem(int, int, int) Take \"count\" items with \"targetItemID\" from given inventory Declaration public static int FindAndTakeItem(int inventoryID, int targetItemID, int count = 1) Returns Type Description int How many items has been taken. 0 means no item taken. \"count\" means all items taken. GetEquipment(int, EquipmentType, out int) Get ID of equipment for given inventory Declaration public static int GetEquipment(int inventoryID, EquipmentType type, out int equipmentCount) EquipmentType type Type of the equipment int equipmentCount Stack count of the equipment GetInventoryCapacity(int) Get the item count limit for target inventory Declaration public static int GetInventoryCapacity(int inventoryID) GetInventoryIdFromBasicIdAndPos(int, string, Int3) Calculate inventory ID based of the given information Declaration public static int GetInventoryIdFromBasicIdAndPos(int basicID, string baseName, Int3 mapPos) Parameters Type Name Description int basicID ID of the holder string baseName Name of the holder Int3 mapPos Original position in unit space for the map-type inventory. (int.MinValue, int.MinValue, int.MinValue) for other type inventory. GetInventoryMapPosFromName(string, out string) Calculate the original holder position from the given inventory file name Declaration public static Int3 GetInventoryMapPosFromName(string invNameWithoutExt, out string basicName) GetItemAt(int, int) Get ID of the item inside given inventory Declaration public static int GetItemAt(int inventoryID, int itemIndex) int itemIndex Index of the item GetItemAt(int, int, out int) Get ID of the item inside given inventory Declaration public static int GetItemAt(int inventoryID, int itemIndex, out int count) int itemIndex Index of the item int count Count of the item GetItemCount(int, int) Get count of the given item Declaration public static int GetItemCount(int inventoryID, int itemIndex) int itemIndex Index of the item Returns Type Description int Count of the item GiveItemToTarget(Entity, int, int, bool) Add target item to inventory of target entity Declaration public static bool GiveItemToTarget(Entity target, int itemID, int count = 1, bool spawnWhenInventoryFull = true) bool spawnWhenInventoryFull True if spawn an ItemHolder entity to hold the item Returns Type Description bool True if the item is given HasEnoughRoomToCollect(int, int, int) True if the inventory have enough room to contain all the target items Declaration public static bool HasEnoughRoomToCollect(int inventoryID, int item, int count) HasInventory(int) True if the given ID refers to a valid inventory Declaration public static bool HasInventory(int inventoryID) HasItem(int, int, bool) True if the given item founded in the target inventory. Declaration public static bool HasItem(int inventoryID, int itemID, bool includeEquipment = true) bool includeEquipment True if search inside equipment part IndexOfItem(int, int) Find index of the target item inside given inventory Declaration public static int IndexOfItem(int inventoryID, int itemID) Returns Type Description int Index of the item. -1 when not found. InitializeInventoryData(int, string, int, Int3, bool) Initialize an inventory data for the system Declaration public static int InitializeInventoryData(int basicID, string basicName, int capacity, Int3 mapUnitPos, bool hasEquipment = false) Parameters Type Name Description int basicID ID of the holder string basicName Name of the holder int capacity Maximal item count the inventory can hold Int3 mapUnitPos Original position in unit space for the map-type inventory. (int.MinValue, int.MinValue, int.MinValue) for other type inventory. bool hasEquipment True if this inventory requires equipment part. Returns Type Description int Inventory ID InitializeInventoryData(int, string, int, bool) Declaration public static int InitializeInventoryData(int basicID, string basicName, int capacity, bool hasEquipment = false) InitializeInventoryData(string, int, Int3, bool) Declaration public static int InitializeInventoryData(string basicName, int capacity, Int3 mapUnitPos, bool hasEquipment = false) InitializeInventoryData(string, int, bool) Declaration public static int InitializeInventoryData(string basicName, int capacity, bool hasEquipment = false) ItemTotalCount(int, int, bool) How many target items are currently inside the inventory Declaration public static int ItemTotalCount(int inventoryID, int itemID, bool ignoreStack = false) bool ignoreStack True if stacked items count as one ItemTotalCount(int, int, int, out int, bool) How many target items are currently inside the inventory Declaration public static int ItemTotalCount(int inventoryID, int itemID, int targetIndex, out int targetOrder, bool ignoreStack = false) int targetIndex Index of the special target int targetOrder Order of the special target between all items inside the inventory with same ID bool ignoreStack True if stacked items count as one ItemTotalCount<I>(int, bool) How many target items are currently inside the inventory Declaration public static int ItemTotalCount<I>(int inventoryID, bool ignoreStack = false) where I : Item bool ignoreStack True if stacked items count as one ItemTotalCount<I>(int, int, out int, bool) How many target items are currently inside the inventory Declaration public static int ItemTotalCount<I>(int inventoryID, int targetIndex, out int targetOrder, bool ignoreStack = false) where I : Item int targetIndex Index of the special target int targetOrder Order of the special target between all items inside the inventory with same ID bool ignoreStack True if stacked items count as one ReduceEquipmentCount(int, int, EquipmentType) Remove equipment count by \"delta\" (set delta to 1 means remove 1) Declaration public static void ReduceEquipmentCount(int inventoryID, int delta, EquipmentType type) RepositionInventory(int, Int3) Reset the map position for the inventory into a new value Declaration public static void RepositionInventory(int inventoryID, Int3 newMapUnitPosition) ResizeInventory(int, int) Set capacity of the inventory without changing the content. (items will be clip out if the capacity is not enough to hold) Declaration public static void ResizeInventory(int inventoryID, int newSize) SetEquipment(int, EquipmentType, int, int) Set ID of equipment for given inventory Declaration public static bool SetEquipment(int inventoryID, EquipmentType type, int equipmentID, int equipmentCount) EquipmentType type Type of the equipment int equipmentCount Stack count of the equipment Returns Type Description bool True if the value successfuly setted SetItemAt(int, int, int, int) Set item ID at index of the given inventory Declaration public static void SetItemAt(int inventoryID, int itemIndex, int newItem, int newCount) int itemIndex Index of the item int newItem ID of the item int newCount Count of the item TakeItemAt(int, int, int) Take \"count\" items at given index for target inventory Declaration public static int TakeItemAt(int inventoryID, int itemIndex, int count = 1) Returns Type Description int How many items has been taken. 0 means no item taken. \"count\" means all items taken. UnlockAllItemsInside(int) Unlock all items inside given inventory for player Declaration public static void UnlockAllItemsInside(int inventoryID)"
  },
  "api/AngeliA.InventoryPartnerUI.html": {
    "href": "api/AngeliA.InventoryPartnerUI.html",
    "title": "Class InventoryPartnerUI | AngeliA",
    "summary": "Class InventoryPartnerUI A partner UI display on top of the player menu that display and manage an inventory Implements IWindowEntityUI Properties AvatarID Artwork sprite ID of the avatar icon Declaration public int AvatarID { get; set; } Column Inventory column count Declaration public override int Column { get; } Overrides PlayerMenuPartnerUI.Column Row Inventory row count Declaration public override int Row { get; } Overrides PlayerMenuPartnerUI.Row _Column Column count of the inventory Declaration public int _Column { get; set; } _Row Row count of the inventory Declaration public int _Row { get; set; } Methods DrawPanel(IRect) This function is called every frame for displaying this panel Declaration public override void DrawPanel(IRect panelRect) Parameters Type Name Description IRect panelRect Rect position for the range of this panel in global space Overrides PlayerMenuPartnerUI.DrawPanel(IRect)"
  },
  "api/AngeliA.Item.html": {
    "href": "api/AngeliA.Item.html",
    "title": "Class Item | AngeliA",
    "summary": "Class Item Basic unit inside inventory system. ※※⚠ Use global single instance ⚠※※ Implements IMapItem Constructors Item() Declaration public Item() Properties AllowDuplicateUpdate True if same type of item can update multiple times during same frame for same holder Declaration public virtual bool AllowDuplicateUpdate { get; } EmbedIntoLevel True if this item can Embed into level blocks and get spawn when the block is picked. (like ore inside stone) Declaration public virtual bool EmbedIntoLevel { get; } MaxStackCount Count limitation for multiple items inside one inventory slot Declaration public abstract int MaxStackCount { get; } TypeID Unique ID for this type of item Declaration public int TypeID { get; init; } Methods BeforeItemUpdate_FromEquipment(Character) This function is called every frame when the holder is equipping this item Declaration public virtual void BeforeItemUpdate_FromEquipment(Character holder) BeforeItemUpdate_FromInventory(Character, int, int) This function is called every frame when this item is in an holder's inventory Declaration public virtual void BeforeItemUpdate_FromInventory(Character holder, int inventoryID, int itemIndex) Parameters Type Name Description Character holder The holder of the inventory int inventoryID ID of the inventory BeforePoseAnimationUpdate_FromEquipment(PoseCharacterRenderer) This function is called every frame when a pose-style character equipping this item Declaration public virtual void BeforePoseAnimationUpdate_FromEquipment(PoseCharacterRenderer rendering) CanUse(Character) True if this item can be use at current frame Declaration public virtual bool CanUse(Character holder) Parameters Type Name Description Character holder Holder that trying to use this item DrawItem(Entity, IRect, Color32, int) Call this function to render the item Declaration public virtual void DrawItem(Entity holder, IRect rect, Color32 tint, int z) Parameters Type Name Description Entity holder Holder that own this item IRect rect Rect position in global space Color32 tint Color tint int z Z value for sort rendering cells ItemConditionCheck(Character) True if the item should receive update callback at current condition Declaration public virtual bool ItemConditionCheck(Character holder) Parameters Type Name Description Character holder Holder that own this item OnCharacterAttack_FromEquipment(Character, Bullet) This function is called when the holder attack with this item equipping Declaration public virtual void OnCharacterAttack_FromEquipment(Character character, Bullet bullet) Bullet bullet Instance of the bullet entity from the attack OnCharacterAttack_FromInventory(Character, Bullet, int, int) This function is called when holder attacks Declaration public virtual void OnCharacterAttack_FromInventory(Character character, Bullet bullet, int inventoryID, int itemIndex) Parameters Type Name Description Character character The inventory holder Bullet bullet Bullet entity this attack spawns int inventoryID ID of the inventory OnCollect(Character) This function is called when this item get collect from ItemHolder Declaration public virtual void OnCollect(Character holder) Parameters Type Name Description Character holder Character that collects this item OnItemUpdate_FromEquipment(Character) This function is called every frame when the holder is equipping this item Declaration public virtual void OnItemUpdate_FromEquipment(Character holder) OnItemUpdate_FromInventory(Character, int, int) This function is called every frame when this item is in an holder's inventory Declaration public virtual void OnItemUpdate_FromInventory(Character holder, int inventoryID, int itemIndex) Parameters Type Name Description Character holder The holder of the inventory int inventoryID ID of the inventory OnItemUpdate_FromItemHolder(ItemHolder, int) This funtion is called every frame when it's being holded by a ItemHolder entity on stage Declaration public virtual void OnItemUpdate_FromItemHolder(ItemHolder holder, int count) OnPoseAnimationUpdate_FromEquipment(PoseCharacterRenderer) This function is called every frame when a pose-style character equipping this item Declaration public virtual void OnPoseAnimationUpdate_FromEquipment(PoseCharacterRenderer rendering) OnPoseAnimationUpdate_FromInventory(PoseCharacterRenderer, int, int) This function is called every frame when pose-style character update after rendering is ready Declaration public virtual void OnPoseAnimationUpdate_FromInventory(PoseCharacterRenderer rendering, int inventoryID, int itemIndex) Parameters Type Name Description PoseCharacterRenderer rendering The inventory holder int inventoryID ID of the inventory OnTakeDamage_FromEquipment(Character, ref Damage) This function is called when the holder took damage with this item equipping Declaration public virtual void OnTakeDamage_FromEquipment(Character holder, ref Damage damage) OnTakeDamage_FromInventory(Character, int, int, ref Damage) This function is called when holder take damage Declaration public virtual void OnTakeDamage_FromInventory(Character holder, int inventoryID, int itemIndex, ref Damage damage) Parameters Type Name Description Character holder The inventory holder int inventoryID ID of the inventory TryRepairEquipment(Character) Perform a repair for this item as an equipment Declaration public virtual bool TryRepairEquipment(Character holder) Use(Character, int, int, out bool) Perform the logic when the item get used Declaration public virtual bool Use(Character holder, int inventoryID, int itemIndex, out bool consume) Parameters Type Name Description Character holder Holder that using this item int inventoryID Inventory ID of this holder int itemIndex Index of this item inside the inventory bool consume True if the item should disappear after being used Returns Type Description bool True if the item is used"
  },
  "api/AngeliA.ItemCombinationAttribute-1.html": {
    "href": "api/AngeliA.ItemCombinationAttribute-1.html",
    "title": "Class ItemCombinationAttribute<I0> | AngeliA",
    "summary": "Class ItemCombinationAttribute<I0> Define an item combination to craft the item. Constructors ItemCombinationAttribute(int, string, string, string, string, string, string, string) Define an item combination to craft the item. Declaration public ItemCombinationAttribute(int count = 1, string keepId0 = \"\", string keepId1 = \"\", string keepId2 = \"\", string keepId3 = \"\", string extraB = \"\", string extraC = \"\", string extraD = \"\") Parameters Type Name Description int count How many item does it craft at once string keepId0 Do not consume this item string keepId1 Do not consume this item string keepId2 Do not consume this item string keepId3 Do not consume this item string extraB Use this if the item is not based on class string extraC Use this if the item is not based on class string extraD Use this if the item is not based on class"
  },
  "api/AngeliA.ItemCombinationAttribute-2.html": {
    "href": "api/AngeliA.ItemCombinationAttribute-2.html",
    "title": "Class ItemCombinationAttribute<I0, I1> | AngeliA",
    "summary": "Class ItemCombinationAttribute<I0, I1> Define an item combination to craft the item. Constructors ItemCombinationAttribute(int, string, string, string, string, string, string) Define an item combination to craft the item. Declaration public ItemCombinationAttribute(int count = 1, string keepId0 = \"\", string keepId1 = \"\", string keepId2 = \"\", string keepId3 = \"\", string extraC = \"\", string extraD = \"\") Parameters Type Name Description int count How many item does it craft at once string keepId0 Do not consume this item string keepId1 Do not consume this item string keepId2 Do not consume this item string keepId3 Do not consume this item string extraC Use this if the item is not based on class string extraD Use this if the item is not based on class"
  },
  "api/AngeliA.ItemCombinationAttribute-3.html": {
    "href": "api/AngeliA.ItemCombinationAttribute-3.html",
    "title": "Class ItemCombinationAttribute<I0, I1, I2> | AngeliA",
    "summary": "Class ItemCombinationAttribute<I0, I1, I2> Define an item combination to craft the item. Constructors ItemCombinationAttribute(int, string, string, string, string, string) Define an item combination to craft the item. Declaration public ItemCombinationAttribute(int count = 1, string keepId0 = \"\", string keepId1 = \"\", string keepId2 = \"\", string keepId3 = \"\", string extraD = \"\") Parameters Type Name Description int count How many item does it craft at once string keepId0 Do not consume this item string keepId1 Do not consume this item string keepId2 Do not consume this item string keepId3 Do not consume this item string extraD Use this if the item is not based on class"
  },
  "api/AngeliA.ItemCombinationAttribute-4.html": {
    "href": "api/AngeliA.ItemCombinationAttribute-4.html",
    "title": "Class ItemCombinationAttribute<I0, I1, I2, I3> | AngeliA",
    "summary": "Class ItemCombinationAttribute<I0, I1, I2, I3> Define an item combination to craft the item. Constructors ItemCombinationAttribute(int, string, string, string, string) Define an item combination to craft the item. Declaration public ItemCombinationAttribute(int count = 1, string keepId0 = \"\", string keepId1 = \"\", string keepId2 = \"\", string keepId3 = \"\") Parameters Type Name Description int count How many item does it craft at once string keepId0 Do not consume this item string keepId1 Do not consume this item string keepId2 Do not consume this item string keepId3 Do not consume this item"
  },
  "api/AngeliA.ItemCombinationAttribute.html": {
    "href": "api/AngeliA.ItemCombinationAttribute.html",
    "title": "Class ItemCombinationAttribute | AngeliA",
    "summary": "Class ItemCombinationAttribute Define an item combination to craft the item. Constructors ItemCombinationAttribute(int, string, string, string, string, string, string, string, string) Define an item combination to craft the item. Declaration public ItemCombinationAttribute(int count = 1, string keepId0 = \"\", string keepId1 = \"\", string keepId2 = \"\", string keepId3 = \"\", string extraA = \"\", string extraB = \"\", string extraC = \"\", string extraD = \"\") Parameters Type Name Description int count How many item does it craft at once string keepId0 Do not consume this item string keepId1 Do not consume this item string keepId2 Do not consume this item string keepId3 Do not consume this item string extraA Use this if the item is not based on class string extraB Use this if the item is not based on class string extraC Use this if the item is not based on class string extraD Use this if the item is not based on class"
  },
  "api/AngeliA.ItemCombinationParam.html": {
    "href": "api/AngeliA.ItemCombinationParam.html",
    "title": "Class ItemCombinationParam | AngeliA",
    "summary": "Class ItemCombinationParam Operators implicit operator int(ItemCombinationParam) Declaration public static implicit operator int(ItemCombinationParam param) implicit operator string(ItemCombinationParam) Declaration public static implicit operator string(ItemCombinationParam param) implicit operator ItemCombinationParam(string) Declaration public static implicit operator ItemCombinationParam(string name) implicit operator ItemCombinationParam(Type) Declaration public static implicit operator ItemCombinationParam(Type type)"
  },
  "api/AngeliA.ItemDropAttribute-1.html": {
    "href": "api/AngeliA.ItemDropAttribute-1.html",
    "title": "Class ItemDropAttribute<I> | AngeliA",
    "summary": "Class ItemDropAttribute<I> Register item drop for the entity, use ItemSystem.DropItemFor(Entity) to perform the item drop. Type Parameters Name Description I Which item does it drops Constructors ItemDropAttribute(int, int) Register item drop for the entity, use ItemSystem.DropItemFor(Entity) to perform the item drop. Declaration public ItemDropAttribute(int dropChance, int dropCount = 1) Parameters Type Name Description int dropChance Probability of dropping this item. 0 means 0%, 1000 means 100% int dropCount How many items does it drop at once"
  },
  "api/AngeliA.ItemDropAttribute.html": {
    "href": "api/AngeliA.ItemDropAttribute.html",
    "title": "Class ItemDropAttribute | AngeliA",
    "summary": "Class ItemDropAttribute Register item drop for the entity, use ItemSystem.DropItemFor(Entity) to perform the item drop. Constructors ItemDropAttribute(int, int, int) Register item drop for the entity, use ItemSystem.DropItemFor(Entity) to perform the item drop. Declaration protected ItemDropAttribute(int typeID, int dropChance, int dropCount = 1) int dropChance Probability of dropping this item. 0 means 0%, 1000 means 100% int dropCount How many items does it drop at once"
  },
  "api/AngeliA.ItemHolder.html": {
    "href": "api/AngeliA.ItemHolder.html",
    "title": "Class ItemHolder | AngeliA",
    "summary": "Class ItemHolder Entity that represent an item on map Implements IMapItem ICarrier Fields TYPE_ID Declaration public static readonly int TYPE_ID Properties CarryOtherOnTop Trhe if this entity can carry other ICarrier on top Declaration public override bool CarryOtherOnTop { get; } Overrides Rigidbody.CarryOtherOnTop ItemCount How many items does this holder contains Declaration public int ItemCount { get; set; } ItemID Item ID from inventory system Declaration public int ItemID { get; set; } PhysicalLayer Which physical layer should this entity fill it's collider in Declaration public override int PhysicalLayer { get; } Overrides Rigidbody.PhysicalLayer SelfCollisionMask Intrinsic physics layers this entity should collide with Declaration public override int SelfCollisionMask { get; } Overrides Rigidbody.SelfCollisionMask Methods BeforeUpdate() [2/4] This function is called every frame when entity is in stage. Prioritize using this function to update physics logic. Declaration public override void BeforeUpdate() Overrides Entity.BeforeUpdate() ClearHoldingPool() Reset the internal data of the items that's exists outside player's view Declaration public static void ClearHoldingPool() Collect(Character) Collect the item holded inside this container Declaration public bool Collect(Character character) Returns Type Description bool True if the item has been collected FirstUpdate() [1/4] This function is called every frame when entity is in stage. Prioritize using this function to fill collider in to physics system. Declaration public override void FirstUpdate() Overrides Rigidbody.FirstUpdate() InsideGroundCheck() Function that holds the stuck inside ground checking logic Declaration protected override bool InsideGroundCheck() Overrides Rigidbody.InsideGroundCheck() Jump(int) Perform a jump for once Declaration public void Jump(int velocity = 42) Parameters Type Name Description int velocity Initial speed Y LateUpdate() [4/4] This function is called every frame when entity is in stage. Prioritize using this function to render the entity. Declaration public override void LateUpdate() Overrides Entity.LateUpdate() OnActivated() This function is called when entity enter the stage Declaration public override void OnActivated() Overrides Rigidbody.OnActivated() OnInactivated() This function is called when entity leave the stage Declaration public override void OnInactivated() Overrides Entity.OnInactivated() Update() [3/4] This function is called every frame when entity is in stage. Prioritize using this function to update physics logic. Declaration public override void Update() Overrides Rigidbody.Update()"
  },
  "api/AngeliA.ItemSystem.ItemData.html": {
    "href": "api/AngeliA.ItemSystem.ItemData.html",
    "title": "Class ItemSystem.ItemData | AngeliA",
    "summary": "Class ItemSystem.ItemData Constructors ItemData(Item, int, int, string, int) Declaration public ItemData(Item item, int nameID, int descriptionID, string typeName, int maxStackCount) Fields DescriptionID Declaration public int DescriptionID Item Declaration public Item Item MaxStackCount Declaration public int MaxStackCount NameID Declaration public int NameID TypeName Declaration public string TypeName Unlocked Declaration public bool Unlocked"
  },
  "api/AngeliA.ItemSystem.html": {
    "href": "api/AngeliA.ItemSystem.html",
    "title": "Class ItemSystem | AngeliA",
    "summary": "Class ItemSystem Core system that handles item related logic Properties ItemPoolReady True if the system is ready to use Declaration public static bool ItemPoolReady { get; } ItemUnlockReady True if the item unlock data is loaded Declaration public static bool ItemUnlockReady { get; } Methods CanUseItem(int, Character) True if the item can be use by the given character Declaration public static bool CanUseItem(int id, Character target) ClearCombination() Reset the system craft combination pool Declaration public static void ClearCombination() DropItemFor(Entity) Perform an item drop the target entity when the entity is destroyed Declaration public static bool DropItemFor(Entity entity) Returns Type Description bool True if the item drop successfuly performs DropItemFor(int, int, int) Perform an item drop the target entity when the entity is destroyed Declaration public static bool DropItemFor(int sourceID, int x, int y) Parameters Type Name Description int sourceID ID of the target entity int x Position X of the item holder appears in global space int y Position Y of the item holder appears in global space Returns Type Description bool True if the item drop successfuly performs ForAllCombinations() Iterate through all crafting combination inside the pool Declaration public static IEnumerable<KeyValuePair<Int4, int>> ForAllCombinations() Examples using AngeliA; namespace AngeliaGame; public class Example { [OnGameInitializeLater(4096)] internal static void OnGameUpdate () { Debug.Log(\"All item combinations inside this game:\"); foreach (var com in ItemSystem.ForAllCombinations()) { string name0 = ItemSystem.GetItemDisplayName(com.Key.x); string name1 = ItemSystem.GetItemDisplayName(com.Key.y); string name2 = ItemSystem.GetItemDisplayName(com.Key.z); string name3 = ItemSystem.GetItemDisplayName(com.Key.w); string nameResult = ItemSystem.GetItemDisplayName(com.Value); Debug.Log($\"{name0} + {name1} + {name2} + {name3} = {nameResult}\"); } } } GetItem(int) Get global single instance of the item from given ID Declaration public static Item GetItem(int id) GetItemDescription(int) Get description from the language system from the given item ID Declaration public static string GetItemDescription(int id) GetItemDisplayName(int) Get display name from the language system from the given item ID Declaration public static string GetItemDisplayName(int id) GetItemMaxStackCount(int) Get stack count limit of the given item in inventory panel Declaration public static int GetItemMaxStackCount(int id) GetRelatedCombinations(Int4, List<Int4>, int) Get all craft combination that include the given combination. This is for making a helper list for the user to know what items can they craft. Declaration public static void GetRelatedCombinations(Int4 combination, List<Int4> output, int materialCountLimit) Parameters Type Name Description Int4 combination Current combination the user putted into the crafting fields List<Int4> output The helper list data int materialCountLimit Combinations which have more source items than this number will be ignored GetSortedCombination(int, int, int, int) Sort the given combination to make it always unique no matter what order the source items are Declaration public static Int4 GetSortedCombination(int a, int b, int c, int d) Parameters Type Name Description int a Crafting source item ID int b Crafting source item ID int c Crafting source item ID int d Crafting source item ID Returns Type Description Int4 Sorted combination ID HasItem(int) True if there is an item inside the system pool for the given ID Declaration public static bool HasItem(int id) IsEquipment(int) True if the given item is equipment type Declaration public static bool IsEquipment(int itemID) IsEquipment(int, out EquipmentType) True if the given item is equipment type Declaration public static bool IsEquipment(int itemID, out EquipmentType type) IsItemUnlocked(int) True if the given item is unlocked. Locked items will display as \"?\" in crafting UI helper menu Declaration public static bool IsItemUnlocked(int itemID) SetItemUnlocked(int, bool) Set given item into locked or unlocked. Locked items will display as \"?\" in crafting UI helper menu Declaration public static void SetItemUnlocked(int itemID, bool unlocked) SpawnItem(int, int, int, int, bool) Spawn an item holder entity that holds the given item. Declaration public static ItemHolder SpawnItem(int itemID, int x, int y, int count = 1, bool jump = true) Parameters Type Name Description int itemID Target item id int x Position X of the item holder in global space int y Position Y of the item holder in global space int count Count of the target item inside the item holder. This function always spawn only one item holder entity. bool jump True if the item holder entity jump up when it spawns Returns Type Description ItemHolder Instance of the item holder entity TryGetCombination(int, int, int, int, out int, out int, out int, out int, out int, out int) Get item crafting combination data of the given item ID pair Declaration public static bool TryGetCombination(int item0, int item1, int item2, int item3, out int result, out int resultCount, out int keep0, out int keep1, out int keep2, out int keep3) Parameters Type Name Description int item0 Source item ID int item1 Source item ID int item2 Source item ID int item3 Source item ID int result Result item ID that the given pair will craft into int resultCount How many result item does a single craft will get int keep0 Source item ID which do not get consume after craft int keep1 Source item ID which do not get consume after craft int keep2 Source item ID which do not get consume after craft int keep3 Source item ID which do not get consume after craft Returns Type Description bool True if it is a valid craft combination"
  },
  "api/AngeliA.Jewelry.html": {
    "href": "api/AngeliA.Jewelry.html",
    "title": "Class Jewelry | AngeliA",
    "summary": "Class Jewelry A type of equipment that EquipmentType always set to Jewelry Implements IMapItem Properties EquipmentType Which type is this quipment Declaration public override sealed EquipmentType EquipmentType { get; } Overrides Equipment.EquipmentType"
  },
  "api/AngeliA.JsonUtil.html": {
    "href": "api/AngeliA.JsonUtil.html",
    "title": "Class JsonUtil | AngeliA",
    "summary": "Class JsonUtil Utility class for json operation Methods GetJsonPath<T>(string, string, string) Calculate auto path fot json file Declaration public static string GetJsonPath<T>(string rootPath, string name = \"\", string ext = \"json\") Parameters Type Name Description string rootPath Root folder string name Name that override the type name string ext Extension of the file Type Parameters Name Description T Type of the json object LoadJsonFromPath<T>(string) Load json file at given path. Declaration public static T LoadJsonFromPath<T>(string jsonPath) Returns Type Description T Json object instance if file valid. Return default if file not valid Type Parameters Name Description T Type of the json object LoadJson<T>(string, string, string) Load json file inside given folder. Declaration public static T LoadJson<T>(string rootPath, string name = \"\", string ext = \"json\") Parameters Type Name Description string rootPath Root folder string name Name that override the type name string ext Extension of the file Returns Type Description T Json object instance if file valid. Return default if file not valid. Type Parameters Name Description T Type of the json object LoadOrCreateJsonFromPath<T>(string) Load json file at given path. Create new instance if file not found. Declaration public static T LoadOrCreateJsonFromPath<T>(string jsonPath) where T : new() Type Parameters Name Description T Type of the json object LoadOrCreateJson<T>(string, string, string) Load json file inside given folder. Create new instance if file not found. Declaration public static T LoadOrCreateJson<T>(string rootPath, string name = \"\", string ext = \"json\") where T : new() Parameters Type Name Description string rootPath Root folder string name Name that override the type name string ext Extension of the file Type Parameters Name Description T Type of the json object SaveJsonToPath(object, string, bool) Save json object into given path Declaration public static void SaveJsonToPath(object data, string jsonPath, bool prettyPrint = false) bool prettyPrint True if write with indent and line warp SaveJson<T>(T, string, string, string, bool) Save json object into given folder Declaration public static void SaveJson<T>(T data, string rootPath, string name = \"\", string ext = \"json\", bool prettyPrint = false) string rootPath Root folder path string name Name that override the type name string ext Extension of the file bool prettyPrint True if write with indent and line warp Type Parameters Name Description T Type of the json object"
  },
  "api/AngeliA.KeyboardKey.html": {
    "href": "api/AngeliA.KeyboardKey.html",
    "title": "Enum KeyboardKey | AngeliA",
    "summary": "Enum KeyboardKey Key on the keyboard Fields Name Description"
  },
  "api/AngeliA.Language.html": {
    "href": "api/AngeliA.Language.html",
    "title": "Class Language | AngeliA",
    "summary": "Class Language Core system to handle localization logic Properties CurrentLanguage Current selecting language ISO Declaration public static string CurrentLanguage { get; } LanguageCount Total count of languages loaded inside the system Declaration public static int LanguageCount { get; } PoolReady True if the system is ready to use Declaration public static bool PoolReady { get; } Methods Get(int, string) Get display content from given ID Declaration public static string Get(int id, string failback = \"\") string failback Default value if content not found in system pool GetLanguageAt(int) Get ISO of the language from system list at given index Declaration public static string GetLanguageAt(int index) SetLanguage(string) Set current selecting language Declaration public static bool SetLanguage(string language) Parameters Type Name Description string language ISO of target language Returns Type Description bool True if successfuly setted"
  },
  "api/AngeliA.LanguageCode.html": {
    "href": "api/AngeliA.LanguageCode.html",
    "title": "Class LanguageCode | AngeliA",
    "summary": "Class LanguageCode Quick setup for an language system key Examples private static readonly LanguageCode LanguageCodeName = (\"Key for language system\", \"Default content in English\"); Constructors LanguageCode(string, string) Quick setup for an language system key Declaration public LanguageCode(string name, string defaultValue) Examples private static readonly LanguageCode LanguageCodeName = (\"Key for language system\", \"Default content in English\"); Fields ID Declaration public readonly int ID Properties DefaultValue Declaration public string DefaultValue { get; } Name Declaration public string Name { get; } Methods ToString() Returns a string that represents the current object. Declaration public override string ToString() Returns Type Description string A string that represents the current object. Overrides object.ToString() Operators implicit operator string(LanguageCode) Declaration public static implicit operator string(LanguageCode code) implicit operator LanguageCode((string name, string defaultValue)) Declaration public static implicit operator LanguageCode((string name, string defaultValue) value)"
  },
  "api/AngeliA.LanguageUtil.html": {
    "href": "api/AngeliA.LanguageUtil.html",
    "title": "Class LanguageUtil | AngeliA",
    "summary": "Class LanguageUtil Utility class for language system Fields ADD_KEYS_FOR_ALL_LANGUAGE_CODE_SETTING_ID Used for remote setting between engine and rigged game Declaration public const int ADD_KEYS_FOR_ALL_LANGUAGE_CODE_SETTING_ID = 914528783 Methods AddKeysForAllLanguageCode(string) Add all required keys for all language inside the root folder Declaration public static void AddKeysForAllLanguageCode(string languageRoot) GetLanguageFolderPath(string, string) Get folder for given language Declaration public static string GetLanguageFolderPath(string languageRoot, string language) Parameters Type Name Description string languageRoot Root of the language folder string language ISO of the target language Returns Type Description string Path for the target language file GetSystemLanguageISO() Get current language ISO of the OS Declaration public static string GetSystemLanguageISO() LoadAllPairsFromDiskAtPath(string, bool) Load and iterate through all language data pairs from given file Declaration public static IEnumerable<KeyValuePair<string, string>> LoadAllPairsFromDiskAtPath(string path, bool keepEscapeCharacters = false) Parameters Type Name Description string path Language file path bool keepEscapeCharacters True if the escape characters (like \"\\n\") will be set to original data LoadAllPairsFromFolder(string, string, bool) Load and iterate through all language data pairs from given folder Declaration public static IEnumerable<KeyValuePair<string, string>> LoadAllPairsFromFolder(string languageRoot, string language, bool keepEscapeCharacters = false) Parameters Type Name Description string languageRoot Root folder of the language data string language ISO of the target language bool keepEscapeCharacters True if the escape characters (like \"\\n\") will be set to original data SaveAllPairsToDisk(string, IEnumerable<KeyValuePair<string, string>>) Save given language data pairs into file Declaration public static void SaveAllPairsToDisk(string filePath, IEnumerable<KeyValuePair<string, string>> pairs)"
  },
  "api/AngeliA.LayerScope.html": {
    "href": "api/AngeliA.LayerScope.html",
    "title": "Struct LayerScope | AngeliA",
    "summary": "Struct LayerScope Scope that make rendering cells inside use given render layer Implements IDisposable Examples using AngeliA; namespace AngeliaGame; public class Example { [OnGameUpdate] internal static void OnGameUpdate () { using (new LayerScope(RenderLayer.ADD)) { // Rendering cells inside will be draw into additive layer } } } Constructors LayerScope(int) Scope that make rendering cells inside use given render layer Declaration public LayerScope(int layer) Parameters Type Name Description int layer Use RenderLayer.XXX to get this index Methods Dispose() Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources. Declaration public void Dispose()"
  },
  "api/AngeliA.LightingSystem.html": {
    "href": "api/AngeliA.LightingSystem.html",
    "title": "Class LightingSystem | AngeliA",
    "summary": "Class LightingSystem Core system that handles dynamic lighting of the stage Fields SETTING_AIR_ILLUMINANCE_DAY ID for remote setting between engine and rigged game Declaration public const int SETTING_AIR_ILLUMINANCE_DAY = 948523 SETTING_AIR_ILLUMINANCE_NIGHT ID for remote setting between engine and rigged game Declaration public const int SETTING_AIR_ILLUMINANCE_NIGHT = 948524 SETTING_BACKGROUND_TINT ID for remote setting between engine and rigged game Declaration public const int SETTING_BACKGROUND_TINT = 948525 SETTING_FREE_IN_GAME_DAYTIME ID for remote setting between engine and rigged game Declaration public const int SETTING_FREE_IN_GAME_DAYTIME = 948528 SETTING_IN_GAME_DAYTIME ID for remote setting between engine and rigged game Declaration public const int SETTING_IN_GAME_DAYTIME = 948527 SETTING_LEVEL_ILLUMINATE_REMAIN ID for remote setting between engine and rigged game Declaration public const int SETTING_LEVEL_ILLUMINATE_REMAIN = 948526 SETTING_PIXEL_STYLE ID for remote setting between engine and rigged game Declaration public const int SETTING_PIXEL_STYLE = 948520 SETTING_SELF_LERP ID for remote setting between engine and rigged game Declaration public const int SETTING_SELF_LERP = 948521 SETTING_SOLID_ILLUMINANCE ID for remote setting between engine and rigged game Declaration public const int SETTING_SOLID_ILLUMINANCE = 948522 Properties Enable True if the system is in-use Declaration public static bool Enable { get; } Methods CancelIgnoreLighting() Do not ignore lighting any more Declaration public static void CancelIgnoreLighting() ForceAirLerp(float, int) Override light amount for air Declaration public static void ForceAirLerp(float lerp, int duration = 1) int duration How long this operation last in frames ForceCameraScale(float, int) Override the total size scale Declaration public static void ForceCameraScale(float scale, int duration = 1) int duration How long this operation last in frames IgnoreLighting(int) Do not perform any lighting for given frames long Declaration public static void IgnoreLighting(int duration = 1) Illuminate(int, int, int, int) Require light at given circle range in global space Declaration public static void Illuminate(int x, int y, int radius, int amount = 1000) int amount 0 means no light. 1000 means general amount."
  },
  "api/AngeliA.Long4.html": {
    "href": "api/AngeliA.Long4.html",
    "title": "Struct Long4 | AngeliA",
    "summary": "Struct Long4 Implements IEquatable<Long4> IFormattable Constructors Long4(long, long, long, long) Declaration public Long4(long x, long y, long z, long w) Fields one Declaration public static readonly Long4 one three Declaration public static readonly Long4 three two Declaration public static readonly Long4 two w Declaration public long w x Declaration public long x y Declaration public long y z Declaration public long z zero Declaration public static readonly Long4 zero Properties IsZero Declaration public readonly bool IsZero { get; } this[int] Declaration public long this[int index] { readonly get; set; } down Declaration public long down { readonly get; set; } horizontal Declaration public readonly long horizontal { get; } left Declaration public long left { readonly get; set; } right Declaration public long right { readonly get; set; } up Declaration public long up { readonly get; set; } vertical Declaration public readonly long vertical { get; } Methods Contains(long) Declaration public readonly bool Contains(long value) Direction(long, long, long, long) Declaration public static Long4 Direction(long left, long right, long down, long up) Equals(Long4) Indicates whether the current object is equal to another object of the same type. Declaration public readonly bool Equals(Long4 other) Parameters Type Name Description Long4 other An object to compare with this object. Returns Type Description bool true if the current object is equal to the other parameter; otherwise, false. Equals(object) Indicates whether this instance and a specified object are equal. Declaration public override readonly bool Equals(object other) Returns Type Description bool true if obj and this instance are the same type and represent the same value; otherwise, false. Overrides ValueType.Equals(object) GetHashCode() Returns the hash code for this instance. Declaration public override readonly int GetHashCode() Returns Type Description int A 32-bit signed integer that is the hash code for this instance. Overrides ValueType.GetHashCode() Swap(long, long) Declaration public bool Swap(long value, long newValue) ToString() Returns the fully qualified type name of this instance. Declaration public override readonly string ToString() Returns Type Description string The fully qualified type name. Overrides ValueType.ToString() ToString(string) Declaration public readonly string ToString(string format) ToString(string, IFormatProvider) Formats the value of the current instance using the specified format. Declaration public readonly string ToString(string format, IFormatProvider formatProvider) Parameters Type Name Description string format The format to use. -or- A null reference (Nothing in Visual Basic) to use the default format defined for the type of the IFormattable implementation. IFormatProvider formatProvider The provider to use to format the value. -or- A null reference (Nothing in Visual Basic) to obtain the numeric format information from the current locale setting of the operating system. Returns Type Description string The value of the current instance in the specified format. Operators operator +(Long4, Long4) Declaration public static Long4 operator +(Long4 a, Long4 b) operator ==(Long4, Long4) Declaration public static bool operator ==(Long4 a, Long4 b) operator !=(Long4, Long4) Declaration public static bool operator !=(Long4 a, Long4 b) operator *(Long4, long) Declaration public static Long4 operator *(Long4 a, long b) operator *(long, Long4) Declaration public static Long4 operator *(long b, Long4 a)"
  },
  "api/AngeliA.MapEditor.html": {
    "href": "api/AngeliA.MapEditor.html",
    "title": "Class MapEditor | AngeliA",
    "summary": "Class MapEditor Entity for edit the map in run-time Implements IMapItem IWindowEntityUI Constructors MapEditor() Declaration public MapEditor() Fields SETTING_QUICK_PLAYER_DROP ID for send/receive remote setting with the engine Declaration public const int SETTING_QUICK_PLAYER_DROP = 921761 SETTING_SHOW_BEHIND ID for send/receive remote setting with the engine Declaration public const int SETTING_SHOW_BEHIND = 921762 SETTING_SHOW_GRID_GIZMOS ID for send/receive remote setting with the engine Declaration public const int SETTING_SHOW_GRID_GIZMOS = 921764 SETTING_SHOW_STATE ID for send/receive remote setting with the engine Declaration public const int SETTING_SHOW_STATE = 921763 TYPE_ID Map editor's type id Declaration public static readonly int TYPE_ID Properties BackgroundRect Rect position of the background part in global space Declaration public override IRect BackgroundRect { get; } Overrides WindowUI.BackgroundRect CurrentZ Current position Z value for the camera view Declaration public int CurrentZ { get; } Instance Single instance of the map editor Declaration public static MapEditor Instance { get; } IsActived True if the map editor entity is actived Declaration public static bool IsActived { get; } IsEditing True if the map editor is in edit mode Declaration public static bool IsEditing { get; } IsEditorNavigating True if the map editor entity is in navigating mode Declaration public static bool IsEditorNavigating { get; } IsPlaying True if the map editor entity is in play mode Declaration public static bool IsPlaying { get; } Methods OnActivated() This function is called when entity enter the stage Declaration public override void OnActivated() Overrides Entity.OnActivated() Save(bool) Require save the data Declaration public override void Save(bool forceSave = false) Parameters Type Name Description bool forceSave True if this save performs without dirty checks Overrides WindowUI.Save(bool) SetViewZ(int) Set view position Z for map editor Declaration public void SetViewZ(int newZ) UpdateWindowUI() Declaration public override void UpdateWindowUI() Overrides WindowUI.UpdateWindowUI()"
  },
  "api/AngeliA.MapEditorToolbarButton.html": {
    "href": "api/AngeliA.MapEditorToolbarButton.html",
    "title": "Class MapEditorToolbarButton | AngeliA",
    "summary": "Class MapEditorToolbarButton Base class for detect toolbar button logic of the map editor Properties Active True if the button display inside the toolbar Declaration public virtual Func<bool> Active { get; } Enable True if the button apears to be enabled Declaration public virtual Func<bool> Enable { get; } Func This function is called when user click the button Declaration public abstract Action Func { get; } Icon Icon artwork sprite for the button Declaration public abstract SpriteCode Icon { get; } Order Order of the button inside the toolbar Declaration public virtual int Order { get; } Tip Tooltip which shows when user hover mouse on it Declaration public abstract LanguageCode Tip { get; } Methods ButtonGUI(IRect) Draw UI for the button Declaration public virtual void ButtonGUI(IRect rect) Parameters Type Name Description IRect rect Rect position in global space"
  },
  "api/AngeliA.MenuUI.html": {
    "href": "api/AngeliA.MenuUI.html",
    "title": "Class MenuUI | AngeliA",
    "summary": "Class MenuUI General class for menu entity ui Implements IMapItem IWindowEntityUI Fields AllowMouseClick True if the menu react to mouse input Declaration protected bool AllowMouseClick AnimationAmount How many amount of appearing animation should apply on this menu Declaration protected int AnimationAmount ArrowMarkCode Artwork sprite for the adjusting arrows Declaration protected SpriteCode ArrowMarkCode BackgroundCode Artwork sprite for the background Declaration protected SpriteCode BackgroundCode BackgroundTint Color tint of the background panel Declaration protected Color32 BackgroundTint ContentPadding Unified padding gap for the content panel Declaration protected Int4 ContentPadding Interactable True if the menu react to player input currently Declaration protected bool Interactable ItemGap Unified space between two items Declaration protected int ItemGap ItemHeight Unified height of a single item Declaration protected int ItemHeight MaxItemCount How many items can it display at the same time Declaration protected int MaxItemCount MoreItemMarkCode Artwork sprite for the mark displays on bottom when there's hiden item under the menu Declaration protected SpriteCode MoreItemMarkCode MoreMarkSize Unified size of the hidden item indicator Declaration protected Int2 MoreMarkSize MoreMarkTint Color tint of the hidden item indicator Declaration protected Color32 MoreMarkTint MouseHighlightTint Color tint for the current hovering item Declaration protected Color32 MouseHighlightTint QuitOnPressStartOrEscKey True if the menu close when player press \"Start\" button Declaration protected bool QuitOnPressStartOrEscKey ScreenTint Color tint that blocks all screen behind Declaration protected Color32 ScreenTint SelectionArrowMarkSize Unified size of the item adjusting arrow Declaration protected Int2 SelectionArrowMarkSize SelectionMarkCode Artwork sprite for the selecting item mark Declaration protected SpriteCode SelectionMarkCode SelectionMarkSize Unified size of the selection hand mark Declaration protected Int2 SelectionMarkSize SelectionMarkTint Color tint of the selecting hand mark Declaration protected Color32 SelectionMarkTint WindowWidth Unified width of the window Declaration protected int WindowWidth Properties AnimationDuration Length in frame for the appearing animation Declaration public int AnimationDuration { get; set; } BackgroundRect Rect position of the background range in global space Declaration public IRect BackgroundRect { get; } BackgroundStyle GUI style instance of the background panel Declaration protected GUIStyle BackgroundStyle { get; set; } BlockEvent True if this UI blocks mouse button event Declaration protected override bool BlockEvent { get; } Overrides EntityUI.BlockEvent DefaultContentStyle GUI style instance of the item content Declaration protected GUIStyle DefaultContentStyle { get; init; } DefaultLabelStyle GUI style instance of the item label Declaration protected GUIStyle DefaultLabelStyle { get; init; } Message Text content of the message display on top. Set to empty means no message should be display. Declaration public string Message { get; set; } MessageStyle GUI style instance of the message box Declaration protected GUIStyle MessageStyle { get; set; } OverrideWindowWidth Forced horizontal size in global space Declaration public int OverrideWindowWidth { get; set; } SelectionIndex Index of the current selecting item Declaration public int SelectionIndex { get; } Methods BeforeUpdate() [2/4] This function is called every frame when entity is in stage. Prioritize using this function to update physics logic. Declaration public override void BeforeUpdate() Overrides Entity.BeforeUpdate() DrawArrowItem(string, char[], bool, bool, out int, int, GUIStyle, GUIStyle, bool) Draw an item inside the menu Declaration protected bool DrawArrowItem(string label, char[] chars, bool leftArrow, bool rightArrow, out int delta, int icon = 0, GUIStyle labelStyle = null, GUIStyle contentStyle = null, bool drawStyleBody = false) Parameters Type Name Description string label Text displays on left side of this item char[] chars Text displays on right side of this item int delta Adjusted value from the user at current frame int icon Artwork sprite GUIStyle labelStyle GUI style of the label part GUIStyle contentStyle GUI style of the content part bool drawStyleBody True if the body of GUI style should be display Returns Type Description bool True if the item is pressed DrawArrowItem(string, string, bool, bool, out int, int, GUIStyle, GUIStyle, bool) Draw an item inside the menu Declaration protected bool DrawArrowItem(string label, string content, bool leftArrow, bool rightArrow, out int delta, int icon = 0, GUIStyle labelStyle = null, GUIStyle contentStyle = null, bool drawStyleBody = false) Parameters Type Name Description string label Text displays on left side of this item string content Text displays on right side of this item int delta Adjusted value from the user at current frame int icon Artwork sprite GUIStyle labelStyle GUI style of the label part GUIStyle contentStyle GUI style of the content part bool drawStyleBody True if the body of GUI style should be display Returns Type Description bool True if the item is pressed DrawItem(string, char[], int, GUIStyle, GUIStyle, bool) Draw an item inside the menu Declaration protected bool DrawItem(string label, char[] chars, int icon = 0, GUIStyle labelStyle = null, GUIStyle contentStyle = null, bool drawStyleBody = false) Parameters Type Name Description string label Text displays on left side of this item char[] chars Text displays on right side of this item int icon Artwork sprite GUIStyle labelStyle GUI style of the label part GUIStyle contentStyle GUI style of the content part bool drawStyleBody True if the body of GUI style should be display Returns Type Description bool True if the item is pressed DrawItem(string, int, GUIStyle, GUIStyle, bool) Draw an item inside the menu Declaration protected bool DrawItem(string label, int icon = 0, GUIStyle labelStyle = null, GUIStyle contentStyle = null, bool drawStyleBody = false) Parameters Type Name Description string label Text displays on left side of this item int icon Artwork sprite GUIStyle labelStyle GUI style of the label part GUIStyle contentStyle GUI style of the content part bool drawStyleBody True if the body of GUI style should be display Returns Type Description bool True if the item is pressed DrawItem(string, string, int, GUIStyle, GUIStyle, bool) Draw an item inside the menu Declaration protected bool DrawItem(string label, string content, int icon = 0, GUIStyle labelStyle = null, GUIStyle contentStyle = null, bool drawStyleBody = false) Parameters Type Name Description string label Text displays on left side of this item string content Text displays on right side of this item int icon Artwork sprite GUIStyle labelStyle GUI style of the label part GUIStyle contentStyle GUI style of the content part bool drawStyleBody True if the body of GUI style should be display Returns Type Description bool True if the item is pressed DrawMenu() Declaration protected abstract void DrawMenu() GetWindowRect() Get the rect position of the panel window in global space Declaration protected virtual IRect GetWindowRect() OnActivated() This function is called when entity enter the stage Declaration public override void OnActivated() Overrides Entity.OnActivated() OnSelectionChanged() This function is called when item selection is changed Declaration protected virtual void OnSelectionChanged() RefreshAnimation() Declaration protected void RefreshAnimation() SetSelection(int) Set current selecting item Declaration protected void SetSelection(int index) UpdateUI() Declaration public override void UpdateUI() Overrides EntityUI.UpdateUI()"
  },
  "api/AngeliA.MethodTask.html": {
    "href": "api/AngeliA.MethodTask.html",
    "title": "Class MethodTask | AngeliA",
    "summary": "Class MethodTask Task that invoke the given System.Action. Require the action as UserData. Fields TYPE_ID Declaration public static readonly int TYPE_ID Methods FrameUpdate() This function is used to handle the internal logic. Declaration public override TaskResult FrameUpdate() Returns Type Description TaskResult \"Continue\" if the task should keep on after this frame. \"End\" if the task should end. Overrides Task.FrameUpdate()"
  },
  "api/AngeliA.ModularBodySuit.html": {
    "href": "api/AngeliA.ModularBodySuit.html",
    "title": "Class ModularBodySuit | AngeliA",
    "summary": "Class ModularBodySuit Body cloth that auto generate from artwork sheet Properties ModularName Declaration public string ModularName { get; }"
  },
  "api/AngeliA.ModularEar.html": {
    "href": "api/AngeliA.ModularEar.html",
    "title": "Class ModularEar | AngeliA",
    "summary": "Class ModularEar Ear body gadget that auto generate from artwork sheet"
  },
  "api/AngeliA.ModularFace.html": {
    "href": "api/AngeliA.ModularFace.html",
    "title": "Class ModularFace | AngeliA",
    "summary": "Class ModularFace Face body gadget that auto generate from artwork sheet"
  },
  "api/AngeliA.ModularFootSuit.html": {
    "href": "api/AngeliA.ModularFootSuit.html",
    "title": "Class ModularFootSuit | AngeliA",
    "summary": "Class ModularFootSuit Shoes that auto generate from artwork sheet Properties ModularName Declaration public string ModularName { get; }"
  },
  "api/AngeliA.ModularHair.html": {
    "href": "api/AngeliA.ModularHair.html",
    "title": "Class ModularHair | AngeliA",
    "summary": "Class ModularHair Hair body gadget that auto generate from artwork sheet"
  },
  "api/AngeliA.ModularHandSuit.html": {
    "href": "api/AngeliA.ModularHandSuit.html",
    "title": "Class ModularHandSuit | AngeliA",
    "summary": "Class ModularHandSuit Gloves that auto generate from artwork sheet Properties ModularName Declaration public string ModularName { get; }"
  },
  "api/AngeliA.ModularHeadSuit.html": {
    "href": "api/AngeliA.ModularHeadSuit.html",
    "title": "Class ModularHeadSuit | AngeliA",
    "summary": "Class ModularHeadSuit Hat that auto generate from artwork sheet Properties ModularName Declaration public string ModularName { get; }"
  },
  "api/AngeliA.ModularHipSuit.html": {
    "href": "api/AngeliA.ModularHipSuit.html",
    "title": "Class ModularHipSuit | AngeliA",
    "summary": "Class ModularHipSuit Pants or skirt that auto generate from artwork sheet Properties ModularName Declaration public string ModularName { get; }"
  },
  "api/AngeliA.ModularHorn.html": {
    "href": "api/AngeliA.ModularHorn.html",
    "title": "Class ModularHorn | AngeliA",
    "summary": "Class ModularHorn Horn body gadget that auto generate from artwork sheet"
  },
  "api/AngeliA.ModularTail.html": {
    "href": "api/AngeliA.ModularTail.html",
    "title": "Class ModularTail | AngeliA",
    "summary": "Class ModularTail Tail body gadget that auto generate from artwork sheet"
  },
  "api/AngeliA.ModularWing.html": {
    "href": "api/AngeliA.ModularWing.html",
    "title": "Class ModularWing | AngeliA",
    "summary": "Class ModularWing Wing body gadget that auto generate from artwork sheet"
  },
  "api/AngeliA.MovementEditor.html": {
    "href": "api/AngeliA.MovementEditor.html",
    "title": "Class MovementEditor | AngeliA",
    "summary": "Class MovementEditor Fields SETTING_PANEL Declaration public const int SETTING_PANEL = 3632167"
  },
  "api/AngeliA.MusicData.html": {
    "href": "api/AngeliA.MusicData.html",
    "title": "Class MusicData | AngeliA",
    "summary": "Class MusicData"
  },
  "api/AngeliA.NoItemCombinationAttribute.html": {
    "href": "api/AngeliA.NoItemCombinationAttribute.html",
    "title": "Class NoItemCombinationAttribute | AngeliA",
    "summary": "Class NoItemCombinationAttribute Indicates to the system that this item does not require crafting combination"
  },
  "api/AngeliA.NoiseMatching.html": {
    "href": "api/AngeliA.NoiseMatching.html",
    "title": "Enum NoiseMatching | AngeliA",
    "summary": "Enum NoiseMatching Fields Name Description"
  },
  "api/AngeliA.NonStackableItem.html": {
    "href": "api/AngeliA.NonStackableItem.html",
    "title": "Class NonStackableItem | AngeliA",
    "summary": "Class NonStackableItem A type of item that do not stack-up inside inventory panel. The MaxStackCount is always 1. Implements IMapItem Properties MaxStackCount Count limitation for multiple items inside one inventory slot Declaration public override sealed int MaxStackCount { get; } Overrides Item.MaxStackCount"
  },
  "api/AngeliA.NotificationUI.html": {
    "href": "api/AngeliA.NotificationUI.html",
    "title": "Class NotificationUI | AngeliA",
    "summary": "Class NotificationUI Display a temporarily notification on top of screen during gameplay Implements IMapItem Methods BeforeUpdate() [2/4] This function is called every frame when entity is in stage. Prioritize using this function to update physics logic. Declaration public override void BeforeUpdate() Overrides Entity.BeforeUpdate() OnActivated() This function is called when entity enter the stage Declaration public override void OnActivated() Overrides Entity.OnActivated() SpawnNotification(string, int) Require a notification. Call this function once for a single notification. Declaration public static void SpawnNotification(string content, int icon = -2147483648) Parameters Type Name Description string content Text content of the notification int icon Artwork sprite ID for the notification. Set to int.MinValue if no icon should be display. Update() [3/4] This function is called every frame when entity is in stage. Prioritize using this function to update physics logic. Declaration public override void Update() Overrides EntityUI.Update() UpdateUI() Declaration public override void UpdateUI() Overrides EntityUI.UpdateUI()"
  },
  "api/AngeliA.NumberEight.html": {
    "href": "api/AngeliA.NumberEight.html",
    "title": "Class NumberEight | AngeliA",
    "summary": "Class NumberEight Element for indicate a number on map Implements IMapItem Fields TYPE_ID Declaration public static readonly int TYPE_ID"
  },
  "api/AngeliA.NumberFive.html": {
    "href": "api/AngeliA.NumberFive.html",
    "title": "Class NumberFive | AngeliA",
    "summary": "Class NumberFive Element for indicate a number on map Implements IMapItem Fields TYPE_ID Declaration public static readonly int TYPE_ID"
  },
  "api/AngeliA.NumberFour.html": {
    "href": "api/AngeliA.NumberFour.html",
    "title": "Class NumberFour | AngeliA",
    "summary": "Class NumberFour Element for indicate a number on map Implements IMapItem Fields TYPE_ID Declaration public static readonly int TYPE_ID"
  },
  "api/AngeliA.NumberNine.html": {
    "href": "api/AngeliA.NumberNine.html",
    "title": "Class NumberNine | AngeliA",
    "summary": "Class NumberNine Element for indicate a number on map Implements IMapItem Fields TYPE_ID Declaration public static readonly int TYPE_ID"
  },
  "api/AngeliA.NumberOne.html": {
    "href": "api/AngeliA.NumberOne.html",
    "title": "Class NumberOne | AngeliA",
    "summary": "Class NumberOne Element for indicate a number on map Implements IMapItem Fields TYPE_ID Declaration public static readonly int TYPE_ID"
  },
  "api/AngeliA.NumberSeven.html": {
    "href": "api/AngeliA.NumberSeven.html",
    "title": "Class NumberSeven | AngeliA",
    "summary": "Class NumberSeven Element for indicate a number on map Implements IMapItem Fields TYPE_ID Declaration public static readonly int TYPE_ID"
  },
  "api/AngeliA.NumberSix.html": {
    "href": "api/AngeliA.NumberSix.html",
    "title": "Class NumberSix | AngeliA",
    "summary": "Class NumberSix Element for indicate a number on map Implements IMapItem Fields TYPE_ID Declaration public static readonly int TYPE_ID"
  },
  "api/AngeliA.NumberThree.html": {
    "href": "api/AngeliA.NumberThree.html",
    "title": "Class NumberThree | AngeliA",
    "summary": "Class NumberThree Element for indicate a number on map Implements IMapItem Fields TYPE_ID Declaration public static readonly int TYPE_ID"
  },
  "api/AngeliA.NumberTwo.html": {
    "href": "api/AngeliA.NumberTwo.html",
    "title": "Class NumberTwo | AngeliA",
    "summary": "Class NumberTwo Element for indicate a number on map Implements IMapItem Fields TYPE_ID Declaration public static readonly int TYPE_ID"
  },
  "api/AngeliA.NumberZero.html": {
    "href": "api/AngeliA.NumberZero.html",
    "title": "Class NumberZero | AngeliA",
    "summary": "Class NumberZero Element for indicate a number on map Implements IMapItem Fields TYPE_ID Declaration public static readonly int TYPE_ID"
  },
  "api/AngeliA.OnBlockPicked_IntSpriteID_IRectAttribute.html": {
    "href": "api/AngeliA.OnBlockPicked_IntSpriteID_IRectAttribute.html",
    "title": "Class OnBlockPicked_IntSpriteID_IRectAttribute | AngeliA",
    "summary": "Class OnBlockPicked_IntSpriteID_IRectAttribute The function will be called when a map block has been picked Examples [OnBlockPicked_IntSpriteID_IRect] internal static void ExampleFunction (int spriteID, IRect rectPosition) { }"
  },
  "api/AngeliA.OnBulletHitEnvironment_BulletAttribute.html": {
    "href": "api/AngeliA.OnBulletHitEnvironment_BulletAttribute.html",
    "title": "Class OnBulletHitEnvironment_BulletAttribute | AngeliA",
    "summary": "Class OnBulletHitEnvironment_BulletAttribute The function will be called when a bullet hit environment (something not an IDamageReceiver) Examples [OnBulletHitEnvironment_Bullet] internal static void ExampleFunction (Bullet bullet) { }"
  },
  "api/AngeliA.OnCameOutOfWater_Rigidbody_EntityAttribute.html": {
    "href": "api/AngeliA.OnCameOutOfWater_Rigidbody_EntityAttribute.html",
    "title": "Class OnCameOutOfWater_Rigidbody_EntityAttribute | AngeliA",
    "summary": "Class OnCameOutOfWater_Rigidbody_EntityAttribute The function will be called when a rigidbody came out of water Examples [OnCameOutOfWater_Rigidbody_Entity] internal static void ExampleFunction (Rigidbody rig, Entity water) { }"
  },
  "api/AngeliA.OnCharacterCrash_EntityAttribute.html": {
    "href": "api/AngeliA.OnCharacterCrash_EntityAttribute.html",
    "title": "Class OnCharacterCrash_EntityAttribute | AngeliA",
    "summary": "Class OnCharacterCrash_EntityAttribute The function will be called when a character crash Examples [OnCharacterCrash_Entity] internal static void ExampleFunction (Entity character) { }"
  },
  "api/AngeliA.OnCharacterFly_EntityAttribute.html": {
    "href": "api/AngeliA.OnCharacterFly_EntityAttribute.html",
    "title": "Class OnCharacterFly_EntityAttribute | AngeliA",
    "summary": "Class OnCharacterFly_EntityAttribute The function will be called when a character fly Examples [OnCharacterFly_Entity] internal static void ExampleFunction (Entity character) { }"
  },
  "api/AngeliA.OnCharacterFootStepped_EntityAttribute.html": {
    "href": "api/AngeliA.OnCharacterFootStepped_EntityAttribute.html",
    "title": "Class OnCharacterFootStepped_EntityAttribute | AngeliA",
    "summary": "Class OnCharacterFootStepped_EntityAttribute The function will be called when a character makes a foot step on running Examples [OnCharacterFootStepped_Entity] internal static void ExampleFunction (Entity character) { }"
  },
  "api/AngeliA.OnCharacterJump_EntityAttribute.html": {
    "href": "api/AngeliA.OnCharacterJump_EntityAttribute.html",
    "title": "Class OnCharacterJump_EntityAttribute | AngeliA",
    "summary": "Class OnCharacterJump_EntityAttribute The function will be called when a character jumps Examples [OnCharacterJump_Entity] internal static void ExampleFunction (Entity character) { }"
  },
  "api/AngeliA.OnCharacterPassOut_EntityAttribute.html": {
    "href": "api/AngeliA.OnCharacterPassOut_EntityAttribute.html",
    "title": "Class OnCharacterPassOut_EntityAttribute | AngeliA",
    "summary": "Class OnCharacterPassOut_EntityAttribute The function will be called when a character pass out Examples [OnCharacterPassOut_Entity] internal static void ExampleFunction (Entity character) { }"
  },
  "api/AngeliA.OnCharacterPound_EntityAttribute.html": {
    "href": "api/AngeliA.OnCharacterPound_EntityAttribute.html",
    "title": "Class OnCharacterPound_EntityAttribute | AngeliA",
    "summary": "Class OnCharacterPound_EntityAttribute The function will be called when a character ground pound Examples [OnCharacterPound_Entity] internal static void ExampleFunction (Entity character) { }"
  },
  "api/AngeliA.OnCharacterSleeping_EntityAttribute.html": {
    "href": "api/AngeliA.OnCharacterSleeping_EntityAttribute.html",
    "title": "Class OnCharacterSleeping_EntityAttribute | AngeliA",
    "summary": "Class OnCharacterSleeping_EntityAttribute The function will be called when a character is sleeping Examples [OnCharacterSleeping_Entity] internal static void ExampleFunction (Entity character) { }"
  },
  "api/AngeliA.OnCharacterSlideStepped_EntityAttribute.html": {
    "href": "api/AngeliA.OnCharacterSlideStepped_EntityAttribute.html",
    "title": "Class OnCharacterSlideStepped_EntityAttribute | AngeliA",
    "summary": "Class OnCharacterSlideStepped_EntityAttribute The function will be called when a character makes a step when sliding Examples [OnCharacterSlideStepped_Entity] internal static void ExampleFunction (Entity character) { }"
  },
  "api/AngeliA.OnCharacterTeleport_EntityAttribute.html": {
    "href": "api/AngeliA.OnCharacterTeleport_EntityAttribute.html",
    "title": "Class OnCharacterTeleport_EntityAttribute | AngeliA",
    "summary": "Class OnCharacterTeleport_EntityAttribute The function will be called when a character teleport Examples [OnCharacterTeleport_Entity] internal static void ExampleFunction (Entity character) { }"
  },
  "api/AngeliA.OnCheatPerformed_StringCodeAttribute.html": {
    "href": "api/AngeliA.OnCheatPerformed_StringCodeAttribute.html",
    "title": "Class OnCheatPerformed_StringCodeAttribute | AngeliA",
    "summary": "Class OnCheatPerformed_StringCodeAttribute The function will be called when user performed any cheat code. Cheat code can be perform like those in NES games. Examples [OnCheatPerformed_StringCode] internal static void ExampleFunction (string code) { }"
  },
  "api/AngeliA.OnCircuitWireActived_Int3UnitPosAttribute.html": {
    "href": "api/AngeliA.OnCircuitWireActived_Int3UnitPosAttribute.html",
    "title": "Class OnCircuitWireActived_Int3UnitPosAttribute | AngeliA",
    "summary": "Class OnCircuitWireActived_Int3UnitPosAttribute The function will be called when CircuitSystem's electric current pass through Examples [OnCircuitWireActived_Int3UnitPos] internal static void ExampleFunction (Int3 unitPos) { }"
  },
  "api/AngeliA.OnDealDamage_Damage_IDamageReceiverAttribute.html": {
    "href": "api/AngeliA.OnDealDamage_Damage_IDamageReceiverAttribute.html",
    "title": "Class OnDealDamage_Damage_IDamageReceiverAttribute | AngeliA",
    "summary": "Class OnDealDamage_Damage_IDamageReceiverAttribute The function will be called when something deal damage to a damage-receiver Examples [OnDealDamage_Damage_IDamageReceiver] internal static void ExampleFunction (Damage damage, IDamageReceiver receiver) { }"
  },
  "api/AngeliA.OnFallIntoWater_Rigidbody_EntityAttribute.html": {
    "href": "api/AngeliA.OnFallIntoWater_Rigidbody_EntityAttribute.html",
    "title": "Class OnFallIntoWater_Rigidbody_EntityAttribute | AngeliA",
    "summary": "Class OnFallIntoWater_Rigidbody_EntityAttribute The function will be called when a rigidbody fall into water Examples [OnFallIntoWater_Rigidbody_Entity] internal static void ExampleFunction (Rigidbody rig, Entity water) { }"
  },
  "api/AngeliA.OnFileDropped_StringPathAttribute.html": {
    "href": "api/AngeliA.OnFileDropped_StringPathAttribute.html",
    "title": "Class OnFileDropped_StringPathAttribute | AngeliA",
    "summary": "Class OnFileDropped_StringPathAttribute The function will be called when user drag and drop a file into the application window Examples [OnFileDropped_StringPath] internal static void ExampleFunction (string filePath) { }"
  },
  "api/AngeliA.OnGameFocusedAttribute.html": {
    "href": "api/AngeliA.OnGameFocusedAttribute.html",
    "title": "Class OnGameFocusedAttribute | AngeliA",
    "summary": "Class OnGameFocusedAttribute The function will be called when the application window regain focus. Examples [OnGameFocused] internal static void ExampleFunction () { }"
  },
  "api/AngeliA.OnGameInitializeAttribute.html": {
    "href": "api/AngeliA.OnGameInitializeAttribute.html",
    "title": "Class OnGameInitializeAttribute | AngeliA",
    "summary": "Class OnGameInitializeAttribute The function will be called when game initialize. Examples [OnGameInitialize] internal static void ExampleFunction () { } Constructors OnGameInitializeAttribute(int) The function will be called when game initialize. Declaration public OnGameInitializeAttribute(int order = 0) Parameters Type Name Description int order Function with smaller order will be called earlier Examples [OnGameInitialize] internal static void ExampleFunction () { }"
  },
  "api/AngeliA.OnGameInitializeLaterAttribute.html": {
    "href": "api/AngeliA.OnGameInitializeLaterAttribute.html",
    "title": "Class OnGameInitializeLaterAttribute | AngeliA",
    "summary": "Class OnGameInitializeLaterAttribute The function will be called when game initialize but after all [OnGameInitialize] functions already called Examples [OnGameInitializeLater] internal static void ExampleFunction () { } Constructors OnGameInitializeLaterAttribute(int) The function will be called when game initialize but after all [OnGameInitialize] functions already called Declaration public OnGameInitializeLaterAttribute(int order = 0) Parameters Type Name Description int order Function with smaller order will be called earlier Examples [OnGameInitializeLater] internal static void ExampleFunction () { }"
  },
  "api/AngeliA.OnGameLostFocusAttribute.html": {
    "href": "api/AngeliA.OnGameLostFocusAttribute.html",
    "title": "Class OnGameLostFocusAttribute | AngeliA",
    "summary": "Class OnGameLostFocusAttribute The function will be called when the application window lost focus. Examples [OnGameLostFocus] internal static void ExampleFunction () { }"
  },
  "api/AngeliA.OnGameQuittingAttribute.html": {
    "href": "api/AngeliA.OnGameQuittingAttribute.html",
    "title": "Class OnGameQuittingAttribute | AngeliA",
    "summary": "Class OnGameQuittingAttribute The function will be called before the application actually quit. Examples [OnGameQuitting] internal static void ExampleFunction () { } Constructors OnGameQuittingAttribute(int) The function will be called before the application actually quit. Declaration public OnGameQuittingAttribute(int order = 0) Parameters Type Name Description int order Function with smaller order will be called earlier Examples [OnGameQuitting] internal static void ExampleFunction () { }"
  },
  "api/AngeliA.OnGameRestartAttribute.html": {
    "href": "api/AngeliA.OnGameRestartAttribute.html",
    "title": "Class OnGameRestartAttribute | AngeliA",
    "summary": "Class OnGameRestartAttribute The function will be called when game restart. Examples [OnGameRestart] internal static void ExampleFunction () { } Constructors OnGameRestartAttribute(int) The function will be called when game restart. Declaration public OnGameRestartAttribute(int order = 0) Parameters Type Name Description int order Function with smaller order will be called earlier Examples [OnGameRestart] internal static void ExampleFunction () { }"
  },
  "api/AngeliA.OnGameTryingToQuitAttribute.html": {
    "href": "api/AngeliA.OnGameTryingToQuitAttribute.html",
    "title": "Class OnGameTryingToQuitAttribute | AngeliA",
    "summary": "Class OnGameTryingToQuitAttribute The function will be called when player try to quit the game. Return false will stop the application from quiting. Examples [OnGameTryingToQuit] internal static bool ExampleFunction () { return true; } Constructors OnGameTryingToQuitAttribute(int) The function will be called when player try to quit the game. Return false will stop the application from quiting. Declaration public OnGameTryingToQuitAttribute(int order = 0) Parameters Type Name Description int order Function with smaller order will be called earlier Examples [OnGameTryingToQuit] internal static bool ExampleFunction () { return true; }"
  },
  "api/AngeliA.OnGameUpdateAttribute.html": {
    "href": "api/AngeliA.OnGameUpdateAttribute.html",
    "title": "Class OnGameUpdateAttribute | AngeliA",
    "summary": "Class OnGameUpdateAttribute The function will be called every time game update (60 times per second) Examples [OnGameUpdate] internal static void ExampleFunction () { } Constructors OnGameUpdateAttribute(int) The function will be called every time game update (60 times per second) Declaration public OnGameUpdateAttribute(int order = 0) Parameters Type Name Description int order Function with smaller order will be called earlier Examples [OnGameUpdate] internal static void ExampleFunction () { }"
  },
  "api/AngeliA.OnGameUpdateLaterAttribute.html": {
    "href": "api/AngeliA.OnGameUpdateLaterAttribute.html",
    "title": "Class OnGameUpdateLaterAttribute | AngeliA",
    "summary": "Class OnGameUpdateLaterAttribute The function will be called every time game update (60 times per second), but after all [OnGameUpdate] functions already called. Examples [OnGameUpdateLater] internal static void ExampleFunction () { } Constructors OnGameUpdateLaterAttribute(int) The function will be called every time game update (60 times per second), but after all [OnGameUpdate] functions already called. Declaration public OnGameUpdateLaterAttribute(int order = 0) Parameters Type Name Description int order Function with smaller order will be called earlier Examples [OnGameUpdateLater] internal static void ExampleFunction () { }"
  },
  "api/AngeliA.OnGameUpdatePauselessAttribute.html": {
    "href": "api/AngeliA.OnGameUpdatePauselessAttribute.html",
    "title": "Class OnGameUpdatePauselessAttribute | AngeliA",
    "summary": "Class OnGameUpdatePauselessAttribute The function will be called every time game update (60 times per second), even when the game is paused. Examples [OnGameUpdatePauseless] internal static void ExampleFunction () { } Constructors OnGameUpdatePauselessAttribute(int) The function will be called every time game update (60 times per second), even when the game is paused. Declaration public OnGameUpdatePauselessAttribute(int order = 0) Parameters Type Name Description int order Function with smaller order will be called earlier Examples [OnGameUpdatePauseless] internal static void ExampleFunction () { }"
  },
  "api/AngeliA.OnItemCollected_Entity_Int2Pos_IntItemID_IntItemCountAttribute.html": {
    "href": "api/AngeliA.OnItemCollected_Entity_Int2Pos_IntItemID_IntItemCountAttribute.html",
    "title": "Class OnItemCollected_Entity_Int2Pos_IntItemID_IntItemCountAttribute | AngeliA",
    "summary": "Class OnItemCollected_Entity_Int2Pos_IntItemID_IntItemCountAttribute The function will be called when a character collect an item Examples [OnItemCollected_Entity_Int2Pos_IntItemID_IntItemCount] internal static void ExampleFunction (Entity holder, Int2 pos, int itemID, int itemCount) { }"
  },
  "api/AngeliA.OnItemDamage_Character_IntItemBefore_IntItemAfterAttribute.html": {
    "href": "api/AngeliA.OnItemDamage_Character_IntItemBefore_IntItemAfterAttribute.html",
    "title": "Class OnItemDamage_Character_IntItemBefore_IntItemAfterAttribute | AngeliA",
    "summary": "Class OnItemDamage_Character_IntItemBefore_IntItemAfterAttribute The function will be called when an item is damaged into another item Examples [OnItemDamage_Character_IntItemBefore_IntItemAfter] internal static void ExampleFunction (Character holder, int itemIdBefore, int itemIdAfter) { }"
  },
  "api/AngeliA.OnItemError_Entity_Int2Pos_IntIconID.html": {
    "href": "api/AngeliA.OnItemError_Entity_Int2Pos_IntIconID.html",
    "title": "Class OnItemError_Entity_Int2Pos_IntIconID | AngeliA",
    "summary": "Class OnItemError_Entity_Int2Pos_IntIconID The function will be called when something wrong about an item (like when guns out of ammo) Examples [OnItemError_Entity_Int2Pos_IntIconID] internal static void ExampleFunction (Entity holder, Int2 pos, int iconID) { }"
  },
  "api/AngeliA.OnItemLost_Character_IntItemIDAttribute.html": {
    "href": "api/AngeliA.OnItemLost_Character_IntItemIDAttribute.html",
    "title": "Class OnItemLost_Character_IntItemIDAttribute | AngeliA",
    "summary": "Class OnItemLost_Character_IntItemIDAttribute The function will be called when a character lost an item Examples [OnItemLost_Character_IntItemID] internal static void ExampleFunction (Character holder, int itemID) { }"
  },
  "api/AngeliA.OnItemUnlocked_IntItemIDAttribute.html": {
    "href": "api/AngeliA.OnItemUnlocked_IntItemIDAttribute.html",
    "title": "Class OnItemUnlocked_IntItemIDAttribute | AngeliA",
    "summary": "Class OnItemUnlocked_IntItemIDAttribute The function will be called when an item is unlocked by player Examples [OnItemUnlocked_IntItemID] internal static void ExampleFunction (int itemID) { }"
  },
  "api/AngeliA.OnLanguageChangedAttribute.html": {
    "href": "api/AngeliA.OnLanguageChangedAttribute.html",
    "title": "Class OnLanguageChangedAttribute | AngeliA",
    "summary": "Class OnLanguageChangedAttribute The function will be called when user change game display language. Language.CurrentLanguage is already set to new value when this function is called. Examples [OnLanguageChanged] internal static void ExampleFunction () { }"
  },
  "api/AngeliA.OnMainSheetReloadAttribute.html": {
    "href": "api/AngeliA.OnMainSheetReloadAttribute.html",
    "title": "Class OnMainSheetReloadAttribute | AngeliA",
    "summary": "Class OnMainSheetReloadAttribute The function will be called when artwork sheet for rendering loaded from file Examples [OnMainSheetReload] internal static void ExampleFunction () { }"
  },
  "api/AngeliA.OnMapEditorModeChange_ModeAttribute.Mode.html": {
    "href": "api/AngeliA.OnMapEditorModeChange_ModeAttribute.Mode.html",
    "title": "Enum OnMapEditorModeChange_ModeAttribute.Mode | AngeliA",
    "summary": "Enum OnMapEditorModeChange_ModeAttribute.Mode Fields Name Description EnterEditMode Play mode to edit mode. After map editor internal logic is done EnterPlayMode Edit mode to play mode. After map editor internal logic is done ExitEditMode Edit mode to play mode. Before map editor internal logic is done ExitPlayMode Play mode to edit mode. Before map editor internal logic is done"
  },
  "api/AngeliA.OnMapEditorModeChange_ModeAttribute.html": {
    "href": "api/AngeliA.OnMapEditorModeChange_ModeAttribute.html",
    "title": "Class OnMapEditorModeChange_ModeAttribute | AngeliA",
    "summary": "Class OnMapEditorModeChange_ModeAttribute The function will be called when user change map editor editing mode Examples [OnMapEditorModeChange_Mode] internal static void ExampleFunction (OnMapEditorModeChange_ModeAttribute.Mode mode) { }"
  },
  "api/AngeliA.OnObjectBreak_IntSpriteID_IRectAttribute.html": {
    "href": "api/AngeliA.OnObjectBreak_IntSpriteID_IRectAttribute.html",
    "title": "Class OnObjectBreak_IntSpriteID_IRectAttribute | AngeliA",
    "summary": "Class OnObjectBreak_IntSpriteID_IRectAttribute The function will be called when an object break Examples [OnObjectBreak_IntSpriteID_IRect] internal static void ExampleFunction (int spriteID, IRect rectPosition) { }"
  },
  "api/AngeliA.OnObjectFreeFall_IntSpriteID_Int2Pos_IntRot_BoolFlip_Int2Velocity_IntRotSpeed_IntGravityAttribute.html": {
    "href": "api/AngeliA.OnObjectFreeFall_IntSpriteID_Int2Pos_IntRot_BoolFlip_Int2Velocity_IntRotSpeed_IntGravityAttribute.html",
    "title": "Class OnObjectFreeFall_IntSpriteID_Int2Pos_IntRot_BoolFlip_Int2Velocity_IntRotSpeed_IntGravityAttribute | AngeliA",
    "summary": "Class OnObjectFreeFall_IntSpriteID_Int2Pos_IntRot_BoolFlip_Int2Velocity_IntRotSpeed_IntGravityAttribute The function will be called when an object start to free fall Examples [OnObjectFreeFall_IntSpriteID_Int2Pos_IntRot_BoolFlip_Int2Velocity_IntRotSpeed_IntGravity] internal static void ExampleFunction (int spriteID, Int2 pos, int startRotation, bool flip, Int2 velocity, int rotationSpeed, int gravity) { }"
  },
  "api/AngeliA.OnRemoteSettingChanged_IntID_IntDataAttribute.html": {
    "href": "api/AngeliA.OnRemoteSettingChanged_IntID_IntDataAttribute.html",
    "title": "Class OnRemoteSettingChanged_IntID_IntDataAttribute | AngeliA",
    "summary": "Class OnRemoteSettingChanged_IntID_IntDataAttribute The function will be called when engine send remote message to rigged game Examples [OnRemoteSettingChanged_IntID_IntData] internal static void ExampleFunction (int id, int data) { } Constructors OnRemoteSettingChanged_IntID_IntDataAttribute(int) The function will be called when engine send remote message to rigged game Declaration public OnRemoteSettingChanged_IntID_IntDataAttribute(int order = 0) Examples [OnRemoteSettingChanged_IntID_IntData] internal static void ExampleFunction (int id, int data) { }"
  },
  "api/AngeliA.OnSavingSlotChangedAttribute.html": {
    "href": "api/AngeliA.OnSavingSlotChangedAttribute.html",
    "title": "Class OnSavingSlotChangedAttribute | AngeliA",
    "summary": "Class OnSavingSlotChangedAttribute The function will be called after user change the saving slot. Universe.BuiltIn.CurrentSavingSlot is the new value when this function is called. Examples [OnSavingSlotChanged] internal static void ExampleFunction () { } Constructors OnSavingSlotChangedAttribute(int) The function will be called after user change the saving slot. Universe.BuiltIn.CurrentSavingSlot is the new value when this function is called. Declaration public OnSavingSlotChangedAttribute(int order = 0) Parameters Type Name Description int order Function with smaller order will be called earlier Examples [OnSavingSlotChanged] internal static void ExampleFunction () { }"
  },
  "api/AngeliA.OnTransferArrivedAttribute_IntEntityID_Int3UnitPos_ObjectDataAttribute.html": {
    "href": "api/AngeliA.OnTransferArrivedAttribute_IntEntityID_Int3UnitPos_ObjectDataAttribute.html",
    "title": "Class OnTransferArrivedAttribute_IntEntityID_Int3UnitPos_ObjectDataAttribute | AngeliA",
    "summary": "Class OnTransferArrivedAttribute_IntEntityID_Int3UnitPos_ObjectDataAttribute The function will be called when message from TransferSystem.StartTransfer() arrived Examples [OnTransferArrivedAttribute_IntEntityID_Int3UnitPos_ObjectData] internal static void ExampleFunction (int receiverID, Int3 unitPosition, object userData) { }"
  },
  "api/AngeliA.OnTransferPassAttribute_Int3UnitPos_ObjectDataAttribute.html": {
    "href": "api/AngeliA.OnTransferPassAttribute_Int3UnitPos_ObjectDataAttribute.html",
    "title": "Class OnTransferPassAttribute_Int3UnitPos_ObjectDataAttribute | AngeliA",
    "summary": "Class OnTransferPassAttribute_Int3UnitPos_ObjectDataAttribute The function will be called when message from TransferSystem.StartTransfer() pass through Examples [OnTransferPassAttribute_Int3UnitPos_ObjectData] internal static void ExampleFunction (Int3 unitPos, object userData) { }"
  },
  "api/AngeliA.OnViewZChangedAttribute.html": {
    "href": "api/AngeliA.OnViewZChangedAttribute.html",
    "title": "Class OnViewZChangedAttribute | AngeliA",
    "summary": "Class OnViewZChangedAttribute The function will be called when player change the map layer Examples [OnViewZChanged] internal static void ExampleFunction () { }"
  },
  "api/AngeliA.OnWindowSizeChangedAttribute.html": {
    "href": "api/AngeliA.OnWindowSizeChangedAttribute.html",
    "title": "Class OnWindowSizeChangedAttribute | AngeliA",
    "summary": "Class OnWindowSizeChangedAttribute The function will be called when user change the size of the application window Examples [OnWindowSizeChanged] internal static void ExampleFunction () { }"
  },
  "api/AngeliA.OnWorldCreatedBySquad_WorldAttribute.html": {
    "href": "api/AngeliA.OnWorldCreatedBySquad_WorldAttribute.html",
    "title": "Class OnWorldCreatedBySquad_WorldAttribute | AngeliA",
    "summary": "Class OnWorldCreatedBySquad_WorldAttribute The function will be called when a world instance is created by world squad Examples [OnWorldCreatedBySquad_World] internal static void ExampleFunction () { } Constructors OnWorldCreatedBySquad_WorldAttribute(int) The function will be called when a world instance is created by world squad Declaration public OnWorldCreatedBySquad_WorldAttribute(int order = 0) Examples [OnWorldCreatedBySquad_World] internal static void ExampleFunction () { }"
  },
  "api/AngeliA.OnWorldLoadedBySquad_WorldAttribute.html": {
    "href": "api/AngeliA.OnWorldLoadedBySquad_WorldAttribute.html",
    "title": "Class OnWorldLoadedBySquad_WorldAttribute | AngeliA",
    "summary": "Class OnWorldLoadedBySquad_WorldAttribute The function will be called when a world instance is loaded by world squad Examples [OnWorldLoadedBySquad_World] internal static void ExampleFunction () { } Constructors OnWorldLoadedBySquad_WorldAttribute(int) The function will be called when a world instance is loaded by world squad Declaration public OnWorldLoadedBySquad_WorldAttribute(int order = 0) Examples [OnWorldLoadedBySquad_World] internal static void ExampleFunction () { }"
  },
  "api/AngeliA.OnWorldSavedByMapEditor_WorldAttribute.html": {
    "href": "api/AngeliA.OnWorldSavedByMapEditor_WorldAttribute.html",
    "title": "Class OnWorldSavedByMapEditor_WorldAttribute | AngeliA",
    "summary": "Class OnWorldSavedByMapEditor_WorldAttribute The function will be called when a world instance is saved to file by the world squad Examples [OnWorldSavedByMapEditor_World] internal static void ExampleFunction () { }"
  },
  "api/AngeliA.OperationMode.html": {
    "href": "api/AngeliA.OperationMode.html",
    "title": "Enum OperationMode | AngeliA",
    "summary": "Enum OperationMode What type of cells are included for the operation Fields Name Description"
  },
  "api/AngeliA.OrderedAttribute.html": {
    "href": "api/AngeliA.OrderedAttribute.html",
    "title": "Class OrderedAttribute | AngeliA",
    "summary": "Class OrderedAttribute Attribute apply to method and call all of them in given order Constructors OrderedAttribute(int) Attribute apply to method and call all of them in given order Declaration protected OrderedAttribute(int order) Methods InvokeAsAutoOrderingTask<A>() Call all static methods in order with given type of attribute Declaration public static void InvokeAsAutoOrderingTask<A>() where A : Attribute"
  },
  "api/AngeliA.OrientedSprite.html": {
    "href": "api/AngeliA.OrientedSprite.html",
    "title": "Struct OrientedSprite | AngeliA",
    "summary": "Struct OrientedSprite A set of AngeSprite ID that auto handles orientation logic Constructors OrientedSprite() Declaration public OrientedSprite() OrientedSprite(string, string) Create a new OSprite from current render sheet Declaration public OrientedSprite(string hostName, string attachmentName) Parameters Type Name Description string hostName Which character own this OSprite string attachmentName Which part of the character own this OSprite OrientedSprite(string, string, string) Create a new OSprite from current render sheet Declaration public OrientedSprite(string hostName, string attachmentName, string attachmentNameAlt) Parameters Type Name Description string hostName Which character own this OSprite string attachmentName Which part of the character own this OSprite string attachmentNameAlt Failback attachment name if \"attachmentName\" not found OrientedSprite(string, string, string, string) Create a new OSprite from current render sheet Declaration public OrientedSprite(string hostName, string attachmentName, string attachmentNameAltA, string attachmentNameAltB) Parameters Type Name Description string hostName Which character own this OSprite string attachmentName Which part of the character own this OSprite string attachmentNameAltA Failback attachment name if \"attachmentName\" not found string attachmentNameAltB Failback attachment name if \"attachmentNameA\" not found OrientedSprite(string, params string[]) Create a new OSprite from current render sheet Declaration public OrientedSprite(string hostName, params string[] attachmentNames) Parameters Type Name Description string hostName Which character own this OSprite string[] attachmentNames Which part of the character own this OSprite. Will be load by the order of the array until one name is valid. Fields AttachmentName Name of the source unit (eg. \"Tail\" \"UpperArm\" \"Mouth\") Declaration public string AttachmentName SpriteID_BL Sprite ID for facing Back-Left Declaration public int SpriteID_BL SpriteID_BR Sprite ID for facing Back-Right Declaration public int SpriteID_BR SpriteID_FL Sprite ID for facing Front-Left Declaration public int SpriteID_FL SpriteID_FR Sprite ID for facing Front-Right Declaration public int SpriteID_FR Properties IsValid True if any sprite ID is not zero Declaration public readonly bool IsValid { get; } Methods GetID(bool, bool) Get the sprite ID for rendering Declaration public readonly int GetID(bool front, bool right) Parameters Type Name Description bool front True if the sprite is for facing front bool right True if the sprite is for facing right LoadFromSheet(string, string) Load this OSprite from current render sheet Declaration public bool LoadFromSheet(string hostName, string attachmentName) Parameters Type Name Description string hostName Which character own this OSprite string attachmentName Which part of the character own this OSprite Returns Type Description bool True if successfuly loaded TryGetSprite(bool, bool, int, out AngeSprite) Get the sprite for rendering Declaration public readonly bool TryGetSprite(bool front, bool right, int animationFrame, out AngeSprite sprite) Parameters Type Name Description bool front True if the sprite is for facing front bool right True if the sprite is for facing right int animationFrame Local frame for animation AngeSprite sprite Result sprite Returns Type Description bool True if the sprite is founded TryGetSpriteForGizmos(out AngeSprite) Get the sprite for rendering as gizmos Declaration public readonly bool TryGetSpriteForGizmos(out AngeSprite sprite) Parameters Type Name Description AngeSprite sprite Result sprite Returns Type Description bool True if the sprite is founded TryGetSpriteGroup(bool, bool, out SpriteGroup) Get the sprite group for rendering Declaration public readonly bool TryGetSpriteGroup(bool front, bool right, out SpriteGroup group) Parameters Type Name Description bool front True if the sprite is for facing front bool right True if the sprite is for facing right SpriteGroup group Result group Returns Type Description bool True if the group is founded TryGetSpriteWithoutAnimation(bool, bool, out AngeSprite) Get the sprite ID for rendering without auto loading animated sprites Declaration public readonly bool TryGetSpriteWithoutAnimation(bool front, bool right, out AngeSprite sprite) Parameters Type Name Description bool front True if the sprite is for facing front bool right True if the sprite is for facing right AngeSprite sprite Result sprite Returns Type Description bool True if the sprite is founded"
  },
  "api/AngeliA.Particle.html": {
    "href": "api/AngeliA.Particle.html",
    "title": "Class Particle | AngeliA",
    "summary": "Class Particle Entity that represent a animated decoration Implements IMapItem Properties AutoArtworkID Artwork sprite ID if this particle is using the built-in logic for rendering Declaration public virtual int AutoArtworkID { get; } Duration How long of this particle exists in stage in frames Declaration public abstract int Duration { get; } LocalFrame Animation frame start from 0 Declaration public int LocalFrame { get; } Loop True if this particle animation loops Declaration public abstract bool Loop { get; } RenderingLayer Which layer should this particle rendering into Declaration public virtual int RenderingLayer { get; } RenderingZ Z value the sort rendering cells Declaration public virtual int RenderingZ { get; } Rotation Angle of this particle Declaration public int Rotation { get; set; } Scale Size scale this particle should apply (0 means 0%, 1000 means 100%) Declaration public int Scale { get; set; } Tint Color tint for this particle Declaration public Color32 Tint { get; set; } UserData Custom data this particle holds Declaration public object UserData { get; set; } Methods BeforeUpdate() [2/4] This function is called every frame when entity is in stage. Prioritize using this function to update physics logic. Declaration public override sealed void BeforeUpdate() Overrides Entity.BeforeUpdate() LateUpdate() [4/4] This function is called every frame when entity is in stage. Prioritize using this function to render the entity. Declaration public override void LateUpdate() Overrides Entity.LateUpdate() OnActivated() This function is called when entity enter the stage Declaration public override void OnActivated() Overrides Entity.OnActivated()"
  },
  "api/AngeliA.Physics.html": {
    "href": "api/AngeliA.Physics.html",
    "title": "Class Physics | AngeliA",
    "summary": "Class Physics Core system that handles physics of AngeliA games. Logic of the system is frame-isolated which means data from prev frame will never effect current frame. Properties IsReady True if the system is ready to use. Declaration public static bool IsReady { get; } Methods FillBlock(int, int, IRect, bool, Tag) Add a physics cell for a map block for current frame. Call this function inside Entity.FirstUpdate Declaration public static void FillBlock(int layer, int blockID, IRect globalRect, bool isTrigger = false, Tag tag = Tag.None) Parameters Type Name Description int layer Which layer to add this cell into. (Use PhysicsLayer.XXX to get this value) int blockID ID of the source block IRect globalRect Rect position in global space bool isTrigger True if the cell should mark as trigger Tag tag What extra info this cell have FillEntity(int, Entity, bool, Tag) Add a physics cell for an entity for current frame. Call this function inside Entity.FirstUpdate Declaration public static void FillEntity(int layer, Entity entity, bool isTrigger = false, Tag tag = Tag.None) Parameters Type Name Description int layer Which layer to add this cell into. (Use PhysicsLayer.XXX to get this value) Entity entity Source entity for this cell bool isTrigger True if the cell should mark as trigger Tag tag What extra info this cell have ForcePush(Rigidbody, Direction4, int) Make a recursive push Declaration public static void ForcePush(Rigidbody host, Direction4 direction, int distance) Parameters Type Name Description Rigidbody host Entity that pushs other int distance (in global space) GetEntity(int, IRect, int, Entity, OperationMode, Tag) Get entity instance from stage that overlap given rect Declaration public static Entity GetEntity(int typeID, IRect globalRect, int mask, Entity ignore = null, OperationMode mode = OperationMode.ColliderOnly, Tag tag = Tag.None) Parameters Type Name Description int typeID Type of the target entity IRect globalRect Rect position in global space int mask What physics layers is included (use PhysicsMask.XXX to get this value) Entity ignore Entity that should be excluded OperationMode mode What type of cells are included for the operation Tag tag Only cells with all tags should be included GetEntity<T>(IRect, int, Entity, OperationMode, Tag) Get entity instance from stage that overlap given rect Declaration public static T GetEntity<T>(IRect globalRect, int mask, Entity ignore = null, OperationMode mode = OperationMode.ColliderOnly, Tag tag = Tag.None) Parameters Type Name Description IRect globalRect Rect position in global space int mask What physics layers is included (use PhysicsMask.XXX to get this value) Entity ignore Entity that should be excluded OperationMode mode What type of cells are included for the operation Tag tag Only cells with all tags should be included Type Parameters Name Description T Type of the target entity HasEntity<T>(IRect, int, Entity, OperationMode, Tag) True if any entity instance from stage that overlap given rect Declaration public static bool HasEntity<T>(IRect globalRect, int mask, Entity ignore = null, OperationMode mode = OperationMode.ColliderOnly, Tag tag = Tag.None) where T : Entity Parameters Type Name Description IRect globalRect Rect position in global space int mask What physics layers is included (use PhysicsMask.XXX to get this value) Entity ignore Entity that should be excluded OperationMode mode What type of cells are included for the operation Tag tag Only cells with all tags should be included Type Parameters Name Description T Type of the target entity IgnoreOverlap(int, IRect, OperationMode) Remove all cells that overlap target range Declaration public static void IgnoreOverlap(int mask, IRect globalRect, OperationMode mode = OperationMode.ColliderAndTrigger) Parameters Type Name Description int mask What physics layers is included (use PhysicsMask.XXX to get this value) IRect globalRect Rect position in global space OperationMode mode What type of cells are included for the operation Move(int, Int2, int, int, Int2, Entity) Perform move Declaration public static Int2 Move(int mask, Int2 from, int speedX, int speedY, Int2 size, Entity entity) Parameters Type Name Description int mask What physics layers is included (use PhysicsMask.XXX to get this value) Int2 from Starting position in global space int speedX (in global space) int speedY (in global space) Int2 size (in global space) Entity entity Target that is performing this movement Returns Type Description Int2 New position in global space after the movement MoveIgnoreOneway(int, Int2, int, int, Int2, Entity) Perform move without oneway involved Declaration public static Int2 MoveIgnoreOneway(int mask, Int2 from, int speedX, int speedY, Int2 size, Entity entity) Parameters Type Name Description int mask What physics layers is included (use PhysicsMask.XXX to get this value) Int2 from Starting position in global space int speedX (in global space) int speedY (in global space) Int2 size (in global space) Entity entity Target that is performing this movement Returns Type Description Int2 New position in global space after the movement MoveImmediately(int, Int2, Direction4, int, Int2, Entity, bool) Perform move without safe checks. (eg. Collide with objects in middle when moving too fast) This version saves CPU usage. Declaration public static Int2 MoveImmediately(int mask, Int2 from, Direction4 direction, int speed, Int2 size, Entity entity, bool ignoreOneway = false) Parameters Type Name Description int mask What physics layers is included (use PhysicsMask.XXX to get this value) Int2 from Starting position in global space Direction4 direction Which direction to move int speed (in global space) Int2 size (in global space) Entity entity Target that is performing this movement bool ignoreOneway True if oneway gates are excluded Returns Type Description Int2 New position in global space after the movement Overlap(int, IRect, Entity, OperationMode, Tag) True if any cell overlap the given rect Declaration public static bool Overlap(int mask, IRect globalRect, Entity ignore = null, OperationMode mode = OperationMode.ColliderOnly, Tag tag = Tag.None) Parameters Type Name Description int mask What physics layers is included (use PhysicsMask.XXX to get this value) IRect globalRect Rect position in global space Entity ignore Entity that should be excluded OperationMode mode What type of cells are included for the operation Tag tag Only cells with all tags should be included Overlap(int, IRect, out PhysicsCell, Entity, OperationMode, Tag) True if any cell overlap the given rect Declaration public static bool Overlap(int mask, IRect globalRect, out PhysicsCell info, Entity ignore = null, OperationMode mode = OperationMode.ColliderOnly, Tag tag = Tag.None) Parameters Type Name Description int mask What physics layers is included (use PhysicsMask.XXX to get this value) IRect globalRect Rect position in global space PhysicsCell info Cell of the overlaping object Entity ignore Entity that should be excluded OperationMode mode What type of cells are included for the operation Tag tag Only cells with all tags should be included OverlapAll(PhysicsCell[], int, IRect, Entity, OperationMode, Tag) Find all cells that overlap with given rect and fill into given array Declaration public static int OverlapAll(PhysicsCell[] hits, int mask, IRect globalRect, Entity ignore = null, OperationMode mode = OperationMode.ColliderOnly, Tag tag = Tag.None) Parameters Type Name Description PhysicsCell[] hits The array that will hold the result int mask What physics layers is included (use PhysicsMask.XXX to get this value) IRect globalRect Rect position in global space Entity ignore Entity that should be excluded OperationMode mode What type of cells are included for the operation Tag tag Only cells with all tags should be included Returns Type Description int How many cells are founded OverlapAll(int, IRect, out int, Entity, OperationMode, Tag) Find all cells that overlap with given rect and fill into an array (The array is cached internaly. Max size 1024) Declaration public static PhysicsCell[] OverlapAll(int mask, IRect globalRect, out int count, Entity ignore = null, OperationMode mode = OperationMode.ColliderOnly, Tag tag = Tag.None) Parameters Type Name Description int mask What physics layers is included (use PhysicsMask.XXX to get this value) IRect globalRect Rect position in global space int count How many cells are founded Entity ignore Entity that should be excluded OperationMode mode What type of cells are included for the operation Tag tag Only cells with all tags should be included Returns Type Description PhysicsCell[] Cell array with the results RoomCheck(int, IRect, Entity, Direction4, OperationMode, Tag) True if there is free room founded at given direction (only Involving solid colliders) Declaration public static bool RoomCheck(int mask, IRect rect, Entity entity, Direction4 direction, OperationMode mode = OperationMode.ColliderOnly, Tag tag = Tag.None) Parameters Type Name Description int mask What physics layers is included (use PhysicsMask.XXX to get this value) IRect rect Start location in global space Entity entity Entity that should be exclude OperationMode mode What type of cells are included for the operation Tag tag Only cells with all tags should be included RoomCheck(int, IRect, Entity, Direction4, out PhysicsCell, OperationMode, Tag) True if there is free room founded at given direction (only Involving solid colliders) Declaration public static bool RoomCheck(int mask, IRect rect, Entity entity, Direction4 direction, out PhysicsCell hit, OperationMode mode = OperationMode.ColliderOnly, Tag tag = Tag.None) Parameters Type Name Description int mask What physics layers is included (use PhysicsMask.XXX to get this value) IRect rect Start location in global space Entity entity Entity that should be exclude PhysicsCell hit Cell of the object that blocks the free room OperationMode mode What type of cells are included for the operation Tag tag Only cells with all tags should be included RoomCheckOneway(int, IRect, Entity, Direction4, out PhysicsCell, bool, bool) True if there is free room founded at given direction (only Involving oneway gate) Declaration public static bool RoomCheckOneway(int mask, IRect rect, Entity entity, Direction4 direction, out PhysicsCell hit, bool overlapCheck = false, bool blockOnly = false) Parameters Type Name Description int mask What physics layers is included (use PhysicsMask.XXX to get this value) IRect rect Start location in global space Entity entity Entity that should be exclude PhysicsCell hit Cell of the object that blocks the free room bool overlapCheck True if oneway gates that not blocking the way (only overlap with rect) count as blocked bool blockOnly True if ignore oneway gates from entities RoomCheckOneway(int, IRect, Entity, Direction4, bool, bool) True if there is free room founded at given direction (only Involving oneway gate) Declaration public static bool RoomCheckOneway(int mask, IRect rect, Entity entity, Direction4 direction, bool overlapCheck = false, bool blockOnly = false) Parameters Type Name Description int mask What physics layers is included (use PhysicsMask.XXX to get this value) IRect rect Start location in global space Entity entity Entity that should be exclude bool overlapCheck True if oneway gates that not blocking the way (only overlap with rect) count as blocked bool blockOnly True if ignore oneway gates from entities"
  },
  "api/AngeliA.PhysicsCell.html": {
    "href": "api/AngeliA.PhysicsCell.html",
    "title": "Struct PhysicsCell | AngeliA",
    "summary": "Struct PhysicsCell Basic unit of a physics data structure Fields EMPTY Declaration public static readonly PhysicsCell EMPTY Entity Target entity (null if from block) Declaration public Entity Entity IsTrigger True if this cell is marked as trigger Declaration public bool IsTrigger Rect Rect position in global space Declaration public IRect Rect SourceID ID for identify which object filled this cell Declaration public int SourceID Tag Declaration public Tag Tag"
  },
  "api/AngeliA.PhysicsLayer.html": {
    "href": "api/AngeliA.PhysicsLayer.html",
    "title": "Class PhysicsLayer | AngeliA",
    "summary": "Class PhysicsLayer A single physics layer Fields CHARACTER Declaration public const int CHARACTER = 3 COUNT Declaration public const int COUNT = 5 DAMAGE Declaration public const int DAMAGE = 4 ENVIRONMENT Declaration public const int ENVIRONMENT = 1 ITEM Declaration public const int ITEM = 2 LEVEL Declaration public const int LEVEL = 0"
  },
  "api/AngeliA.PhysicsMask.html": {
    "href": "api/AngeliA.PhysicsMask.html",
    "title": "Class PhysicsMask | AngeliA",
    "summary": "Class PhysicsMask A group of physics layera Fields ALL Declaration public const int ALL = 31 CHARACTER Declaration public const int CHARACTER = 8 DAMAGE Colliders inside damage layer will deal damage when overlape with IDamageReceiver Declaration public const int DAMAGE = 16 DYNAMIC ENVIRONMENT | ITEM | CHARACTER Declaration public const int DYNAMIC = 14 ENTITY ENVIRONMENT | CHARACTER Declaration public const int ENTITY = 10 ENVIRONMENT Declaration public const int ENVIRONMENT = 2 ITEM Declaration public const int ITEM = 4 LEVEL Declaration public const int LEVEL = 1 MAP LEVEL | ENVIRONMENT Declaration public const int MAP = 3 NONE Declaration public const int NONE = 0 SOLID LEVEL | ENVIRONMENT | CHARACTER Declaration public const int SOLID = 11"
  },
  "api/AngeliA.Pipe-1.html": {
    "href": "api/AngeliA.Pipe-1.html",
    "title": "Class Pipe<T> | AngeliA",
    "summary": "Class Pipe<T> A linked list that can add/remove from head/tail. No heap pressure. Constructors Pipe(int) A linked list that can add/remove from head/tail. No heap pressure. Declaration public Pipe(int capacity = 1024) Properties Capacity Total length of the data Declaration public int Capacity { get; init; } Data Raw data of this pipe Declaration public T[] Data { get; init; } IsFull True if the pipe reached max capacity Declaration public bool IsFull { get; } this[int] Get filled data at index Declaration public T this[int index] { get; set; } Parameters Type Name Description int index Local index from \"Start\" Length Length of the filled data Declaration public int Length { get; } Start Head index of the filled data Declaration public int Start { get; } Methods LinkToHead(T) Add data before head Declaration public bool LinkToHead(T data) Returns Type Description bool True if the data is added LinkToTail(T) Add data after tail Declaration public bool LinkToTail(T data) Returns Type Description bool True if the data is added Reorganize() Move data at head to the first of the internal array Declaration public void Reorganize() Reset() Declaration public void Reset() Sort(IComparer<T>) Declaration public void Sort(IComparer<T> comparer) TryPeekHead(out T) Get data at head without remove the data from pipe Declaration public bool TryPeekHead(out T data) Returns Type Description bool True if length of pipe is not 0 TryPeekTail(out T) Get data at tail without remove the data from pipe Declaration public bool TryPeekTail(out T data) Returns Type Description bool True if length of pipe is not 0 TryPopHead(out T) Get and remove data at head Declaration public bool TryPopHead(out T data) Returns Type Description bool True if pipe is not empty TryPopTail(out T) Get and remove data at tail Declaration public bool TryPopTail(out T data) Returns Type Description bool True if pipe is not empty"
  },
  "api/AngeliA.PixelPerfect.html": {
    "href": "api/AngeliA.PixelPerfect.html",
    "title": "Class PixelPerfect | AngeliA",
    "summary": "Class PixelPerfect Class that makes rendering cells pixel perfect Fields Enable True if require pixel perfect for current frame Declaration public static readonly FrameBasedBool Enable PixelScale Global unit / pixel. Default 16. Declaration public static readonly FrameBasedInt PixelScale Properties IncludeUiLayer True if require pixel perfect for UI rendering layer Declaration public static bool IncludeUiLayer { get; set; }"
  },
  "api/AngeliA.Platformer.ActionFurniture.html": {
    "href": "api/AngeliA.Platformer.ActionFurniture.html",
    "title": "Class ActionFurniture | AngeliA",
    "summary": "Class ActionFurniture Furniture that allows the user to perform given logic as IActionTarget Implements IMapItem IBlockEntity IActionTarget Methods AllowInvoke() True if the user can perform the logic currently Declaration public virtual bool AllowInvoke() Invoke() Perform the internal logic Declaration public abstract bool Invoke() LateUpdate() [4/4] This function is called every frame when entity is in stage. Prioritize using this function to render the entity. Declaration public override void LateUpdate() Overrides Furniture.LateUpdate()"
  },
  "api/AngeliA.Platformer.Armor-2.html": {
    "href": "api/AngeliA.Platformer.Armor-2.html",
    "title": "Class Armor<P, N> | AngeliA",
    "summary": "Class Armor<P, N> Equipment as body protection Implements IMapItem IProgressiveItem Type Parameters Name Description P Type of the item this armor will become after take damage for once N Type of the item this armor will become after being repair for once Constructors Armor() Declaration public Armor() Properties HideEar True if the armor hide ear gadget Declaration protected virtual bool HideEar { get; } HideFace True if the armor hide face gadget Declaration protected virtual bool HideFace { get; } HideHair True if the armor hide hair gadget Declaration protected virtual bool HideHair { get; } HideHorn True if the armor hide horn gadget Declaration protected virtual bool HideHorn { get; } HideTail True if the armor hide tail gadget Declaration protected virtual bool HideTail { get; } HideWing True if the armor hide wing gadget Declaration protected virtual bool HideWing { get; } RepairMaterials Items required for repair this armor. System will find any available item from start to end inside this array, and only consume one item to repair for once. Declaration protected virtual Type[] RepairMaterials { get; } Scale Size scale for rendering only Declaration protected virtual int Scale { get; } Methods DrawArmor(PoseCharacterRenderer) Render the armor onto given character Declaration protected abstract void DrawArmor(PoseCharacterRenderer renderer) OnPoseAnimationUpdate_FromEquipment(PoseCharacterRenderer) This function is called every frame when a pose-style character equipping this item Declaration public override void OnPoseAnimationUpdate_FromEquipment(PoseCharacterRenderer rendering) Overrides Item.OnPoseAnimationUpdate_FromEquipment(PoseCharacterRenderer) OnTakeDamage_FromEquipment(Character, ref Damage) This function is called when the holder took damage with this item equipping Declaration public override void OnTakeDamage_FromEquipment(Character character, ref Damage damage) Overrides Item.OnTakeDamage_FromEquipment(Character, ref Damage) RepairArmor(Character, int) Repair the armor for once Declaration public virtual bool RepairArmor(Character character, int materialID) Parameters Type Name Description Character character Character that holding this armor int materialID Item that will get consume Returns Type Description bool True if the armor get repair for once TryRepairEquipment(Character) Perform a repair for this item as an equipment Declaration public override bool TryRepairEquipment(Character character) Overrides Item.TryRepairEquipment(Character)"
  },
  "api/AngeliA.Platformer.ArrowBullet-1.html": {
    "href": "api/AngeliA.Platformer.ArrowBullet-1.html",
    "title": "Class ArrowBullet<I> | AngeliA",
    "summary": "Class ArrowBullet<I> Bullet entity that spawns an item when destroy Implements IMapItem Type Parameters Name Description I Type of the item as arrow Constructors ArrowBullet() Declaration public ArrowBullet()"
  },
  "api/AngeliA.Platformer.ArrowBullet.html": {
    "href": "api/AngeliA.Platformer.ArrowBullet.html",
    "title": "Class ArrowBullet | AngeliA",
    "summary": "Class ArrowBullet Bullet entity that spawns an item when destroy Implements IMapItem Constructors ArrowBullet() Declaration public ArrowBullet() Properties ArrowArtworkID Artwork sprite ID to render this bullet Declaration public int ArrowArtworkID { get; init; } ArrowItemID Target item to spawn when destroy Declaration public int ArrowItemID { get; init; } ArtworkID Artwork sprite ID to render this bullet Declaration public override int ArtworkID { get; } Overrides MovableBullet.ArtworkID SpawnItemWhenBulletDestroy True if the arrow item should be spawn when bullet destroy Declaration protected virtual bool SpawnItemWhenBulletDestroy { get; } Methods BeforeDespawn(IDamageReceiver) This function is called before the bullet get despawn by performing damage logic Declaration protected override void BeforeDespawn(IDamageReceiver receiver) Parameters Type Name Description IDamageReceiver receiver The target it hits Overrides MovableBullet.BeforeDespawn(IDamageReceiver) OnActivated() This function is called when entity enter the stage Declaration public override void OnActivated() Overrides MovableBullet.OnActivated()"
  },
  "api/AngeliA.Platformer.AuraItem-1.html": {
    "href": "api/AngeliA.Platformer.AuraItem-1.html",
    "title": "Class AuraItem<B> | AngeliA",
    "summary": "Class AuraItem<B> Item that broadcast given buff to nearby object when being put into inventory Implements IMapItem Type Parameters Name Description B Type of the buff Properties Radius Broadcast radius in global space Declaration protected virtual int Radius { get; } Methods OnItemUpdate_FromInventory(Character, int, int) This function is called every frame when this item is in an holder's inventory Declaration public override void OnItemUpdate_FromInventory(Character holder, int inventoryID, int itemIndex) Parameters Type Name Description Character holder The holder of the inventory int inventoryID ID of the inventory Overrides BuffItem.OnItemUpdate_FromInventory(Character, int, int)"
  },
  "api/AngeliA.Platformer.BarrelMovement.html": {
    "href": "api/AngeliA.Platformer.BarrelMovement.html",
    "title": "Class BarrelMovement | AngeliA",
    "summary": "Class BarrelMovement Movement for rolling on a barrel Constructors BarrelMovement(Rigidbody) Declaration public BarrelMovement(Rigidbody rig) Methods GetMovementState() Get current movement type base on current cached data Declaration protected override CharacterMovementState GetMovementState() Overrides CharacterMovement.GetMovementState() InitializeMeta() Initialize config for the movement Declaration protected override void InitializeMeta() Overrides VehicleMovement.InitializeMeta()"
  },
  "api/AngeliA.Platformer.BarrelVehicle.html": {
    "href": "api/AngeliA.Platformer.BarrelVehicle.html",
    "title": "Class BarrelVehicle | AngeliA",
    "summary": "Class BarrelVehicle A barrel that roll to opposite direction when character walk on it Implements IMapItem ICarrier IWithCharacterMovement IDamageReceiver Properties AirDragX Amount of horizontal speed lost every frame Declaration public override int AirDragX { get; } Overrides Vehicle.AirDragX AllowBeingPush True if this entity can be push by other Declaration public override bool AllowBeingPush { get; } Overrides Rigidbody.AllowBeingPush BarrelSize Diameter of the barrel in global space Declaration public virtual int BarrelSize { get; } DriverLeaveLocalPosition Position from the vehcile to driver when they leave Declaration public override Int2? DriverLeaveLocalPosition { get; } Overrides Vehicle.DriverLeaveLocalPosition DriverLocalPosition Position from the vehcile to driver Declaration public override Int2? DriverLocalPosition { get; } Overrides Vehicle.DriverLocalPosition RollSpeed Declaration public virtual int RollSpeed { get; } Methods CheckForStartDrive(out Character) Update function for checking if a driver should start to drive Declaration protected override bool CheckForStartDrive(out Character driver) Returns Type Description bool True if any driver start to drive Overrides Vehicle.CheckForStartDrive(out Character) CheckForStopDrive() Update function for checking if the current driver should stop driving Declaration protected override bool CheckForStopDrive() Returns Type Description bool True if stop driving Overrides Vehicle.CheckForStopDrive() LateUpdate() [4/4] This function is called every frame when entity is in stage. Prioritize using this function to render the entity. Declaration public override void LateUpdate() Overrides Entity.LateUpdate() OnActivated() This function is called when entity enter the stage Declaration public override void OnActivated() Overrides Vehicle.OnActivated() Push(int) This function is called when the entity is being pushed Declaration public override void Push(int speedX) Overrides Rigidbody.Push(int) Update() [3/4] This function is called every frame when entity is in stage. Prioritize using this function to update physics logic. Declaration public override void Update() Overrides Vehicle.Update()"
  },
  "api/AngeliA.Platformer.BeamBullet.html": {
    "href": "api/AngeliA.Platformer.BeamBullet.html",
    "title": "Class BeamBullet | AngeliA",
    "summary": "Class BeamBullet A type of bullet that shoot into straight line Implements IMapItem Properties BeamSize Thickness of the beam in global space Declaration protected virtual int BeamSize { get; } BeamSpriteID Artwork sprite ID for the beam body Declaration protected abstract int BeamSpriteID { get; } BeamTint Declaration protected virtual Color32 BeamTint { get; } BurstRotateSpeed Declaration protected virtual int BurstRotateSpeed { get; } BurstSize Size of the end burst effect in global space Declaration protected virtual int BurstSize { get; } BurstSpriteID Artwork sprite ID for the beam burst effect in the end-side Declaration protected abstract int BurstSpriteID { get; } BurstTint Declaration protected virtual Color32 BurstTint { get; } Duration How long can this bullet exists on stage in frame Declaration public override sealed int Duration { get; } Overrides MovableBullet.Duration HandBurstRotateSpeed Declaration protected virtual int HandBurstRotateSpeed { get; } HandBurstSize Size of the hand burst effect in global space Declaration protected virtual int HandBurstSize { get; } HandBurstSpriteID Artwork sprite ID for the beam burst effect in the hand-side Declaration protected abstract int HandBurstSpriteID { get; } HandBurstTint Declaration protected virtual Color32 HandBurstTint { get; } IllumanteAmount How bright of the illumante (0 means no illumante. 1000 means general amount) Declaration protected virtual int IllumanteAmount { get; } IllumanteUnitRadius Radius in unit space for the LightingSystem Declaration protected virtual int IllumanteUnitRadius { get; } MaxRange Bullet get despawn when fly longer than this range in global space Declaration public override int MaxRange { get; } Overrides MovableBullet.MaxRange OnlyShowBurstWhenHitReceiver True if show burst effect when hit a IDamageReceiver, not just hit the environment Declaration protected virtual bool OnlyShowBurstWhenHitReceiver { get; } RenderingLayer Declaration protected virtual int RenderingLayer { get; } SparkSize Size of the spark effect in global space Declaration protected virtual int SparkSize { get; } SparkSpriteID Artwork sprite ID for the beam spark effect Declaration protected abstract int SparkSpriteID { get; } SparkTint Declaration protected virtual Color32 SparkTint { get; } SpeedForward Movement speed to shooting direction Declaration public override sealed int SpeedForward { get; } Overrides MovableBullet.SpeedForward Methods BeforeDespawn(IDamageReceiver) This function is called before the bullet get despawn by performing damage logic Declaration protected override void BeforeDespawn(IDamageReceiver receiver) Parameters Type Name Description IDamageReceiver receiver The target it hits Overrides MovableBullet.BeforeDespawn(IDamageReceiver) LateUpdate() [4/4] This function is called every frame when entity is in stage. Prioritize using this function to render the entity. Declaration public override void LateUpdate() Overrides MovableBullet.LateUpdate() OnActivated() This function is called when entity enter the stage Declaration public override void OnActivated() Overrides MovableBullet.OnActivated()"
  },
  "api/AngeliA.Platformer.Bed.html": {
    "href": "api/AngeliA.Platformer.Bed.html",
    "title": "Class Bed | AngeliA",
    "summary": "Class Bed Furniture that player can sleep on and gain the reward from full-asleep Implements IMapItem IBlockEntity IActionTarget Properties ModuleType Which direction does this entity expand as map block. (eg. Beds goes horizontaly. Fridge goes verticaly) Declaration protected override Direction3 ModuleType { get; } Overrides Furniture.ModuleType Methods GetTargetOnBed(Character) Make given character on bed and sleep Declaration public void GetTargetOnBed(Character target) Invoke() Perform the internal logic Declaration public override bool Invoke() Overrides ActionFurniture.Invoke() OnActivated() This function is called when entity enter the stage Declaration public override void OnActivated() Overrides Furniture.OnActivated() OnInactivated() This function is called when entity leave the stage Declaration public override void OnInactivated() Overrides Entity.OnInactivated() Update() [3/4] This function is called every frame when entity is in stage. Prioritize using this function to update physics logic. Declaration public override void Update() Overrides Entity.Update()"
  },
  "api/AngeliA.Platformer.BodyArmor-2.html": {
    "href": "api/AngeliA.Platformer.BodyArmor-2.html",
    "title": "Class BodyArmor<P, N> | AngeliA",
    "summary": "Class BodyArmor<P, N> Armor on body of the character Implements IMapItem IProgressiveItem Type Parameters Name Description P Type of the item this armor will become after take damage for once N Type of the item this armor will become after being repair for once Constructors BodyArmor() Declaration public BodyArmor() Properties EquipmentType Which type is this quipment Declaration public override sealed EquipmentType EquipmentType { get; } Overrides Equipment.EquipmentType Methods DrawArmor(PoseCharacterRenderer) Render the armor onto given character Declaration protected override void DrawArmor(PoseCharacterRenderer renderer) Overrides Armor<P, N>.DrawArmor(PoseCharacterRenderer)"
  },
  "api/AngeliA.Platformer.Breakable.html": {
    "href": "api/AngeliA.Platformer.Breakable.html",
    "title": "Class Breakable | AngeliA",
    "summary": "Class Breakable Entity that can be break by taking damage Implements IMapItem ICarrier IBlockEntity IDamageReceiver Properties DestroyWhenInsideGround True if this entity despawns when it's inside ground Declaration public override bool DestroyWhenInsideGround { get; } Overrides Rigidbody.DestroyWhenInsideGround IgnoreDamageType This entity do not take damage with this tags Declaration public virtual Tag IgnoreDamageType { get; } PhysicalLayer Which physical layer should this entity fill it's collider in Declaration public override int PhysicalLayer { get; } Overrides Rigidbody.PhysicalLayer SpawnItemFromMapWhenBreak True if this entity spawn item from map element overlaps on it Declaration public virtual bool SpawnItemFromMapWhenBreak { get; } Methods LateUpdate() [4/4] This function is called every frame when entity is in stage. Prioritize using this function to render the entity. Declaration public override void LateUpdate() Overrides Entity.LateUpdate() OnBreak() This function is called when entity breaks Declaration protected virtual void OnBreak() OnInsideGroundDestroyed() This function is called when this entity is despawn by being stuck inside ground Declaration protected override void OnInsideGroundDestroyed() Overrides Rigidbody.OnInsideGroundDestroyed()"
  },
  "api/AngeliA.Platformer.BulletShooter-1.html": {
    "href": "api/AngeliA.Platformer.BulletShooter-1.html",
    "title": "Class BulletShooter<B> | AngeliA",
    "summary": "Class BulletShooter<B> Entity that shoot given bullet repeatedly Implements IMapItem IBlockEntity Type Parameters Name Description B Type of the bullet Constructors BulletShooter() Declaration public BulletShooter() Properties BulletID Type ID of the bullet entity Declaration protected override int BulletID { get; } Overrides BulletShooter.BulletID"
  },
  "api/AngeliA.Platformer.BulletShooter.html": {
    "href": "api/AngeliA.Platformer.BulletShooter.html",
    "title": "Class BulletShooter | AngeliA",
    "summary": "Class BulletShooter Entity that shoot given bullet repeatedly Implements IMapItem IBlockEntity Properties AttackTargetTeam Which teams should be attack by the bullet Declaration protected virtual int AttackTargetTeam { get; } BulletID Type ID of the bullet entity Declaration protected abstract int BulletID { get; } LastShootFrame Declaration protected int LastShootFrame { get; } ShootDirection Which direction to shoot Declaration protected abstract Direction4 ShootDirection { get; } ShootFrequency How many frame does it takes to shoot another bullet Declaration protected virtual int ShootFrequency { get; } ShootOffsetForward Bullet starting position offset in forward of shooting direction Declaration protected virtual int ShootOffsetForward { get; } ShootOffsetSide Bullet starting position offset in side of shooting direction Declaration protected virtual int ShootOffsetSide { get; } Methods BeforeUpdate() [2/4] This function is called every frame when entity is in stage. Prioritize using this function to update physics logic. Declaration public override void BeforeUpdate() Overrides Entity.BeforeUpdate() FirstUpdate() [1/4] This function is called every frame when entity is in stage. Prioritize using this function to fill collider in to physics system. Declaration public override void FirstUpdate() Overrides Entity.FirstUpdate() OnActivated() This function is called when entity enter the stage Declaration public override void OnActivated() Overrides Entity.OnActivated() OnBulletShoot(Bullet) This function is called when a bullet shoot Declaration protected virtual void OnBulletShoot(Bullet bullet) Shoot() Perform a shoot Declaration public void Shoot()"
  },
  "api/AngeliA.Platformer.Burner-1.html": {
    "href": "api/AngeliA.Platformer.Burner-1.html",
    "title": "Class Burner<F> | AngeliA",
    "summary": "Class Burner<F> Entity that spawn a file entity repeately Implements IMapItem IBlockEntity Type Parameters Name Description F Type of the fire entity Constructors Burner() Declaration public Burner() Properties AllowFireFromMapElement Read fire type from overlaping map element block Declaration protected virtual bool AllowFireFromMapElement { get; } Direction Direction of the file Declaration protected virtual Direction4 Direction { get; } FireDuration How long does a single file stay Declaration protected virtual int FireDuration { get; } FireFrequency How many frame does it take to spawn another file Declaration protected virtual int FireFrequency { get; } Methods FirstUpdate() [1/4] This function is called every frame when entity is in stage. Prioritize using this function to fill collider in to physics system. Declaration public override void FirstUpdate() Overrides Entity.FirstUpdate() LateUpdate() [4/4] This function is called every frame when entity is in stage. Prioritize using this function to render the entity. Declaration public override void LateUpdate() Overrides Entity.LateUpdate() OnActivated() This function is called when entity enter the stage Declaration public override void OnActivated() Overrides Entity.OnActivated() Update() [3/4] This function is called every frame when entity is in stage. Prioritize using this function to update physics logic. Declaration public override void Update() Overrides Entity.Update()"
  },
  "api/AngeliA.Platformer.CabinetIdol.html": {
    "href": "api/AngeliA.Platformer.CabinetIdol.html",
    "title": "Class CabinetIdol | AngeliA",
    "summary": "Class CabinetIdol Furniture that show an idol statue on it Implements IMapItem IBlockEntity IActionTarget Methods LateUpdate() [4/4] This function is called every frame when entity is in stage. Prioritize using this function to render the entity. Declaration public override void LateUpdate() Overrides Furniture.LateUpdate()"
  },
  "api/AngeliA.Platformer.CameraAutoDirection.html": {
    "href": "api/AngeliA.Platformer.CameraAutoDirection.html",
    "title": "Class CameraAutoDirection | AngeliA",
    "summary": "Class CameraAutoDirection Path indicator for the CameraAutoScroll Implements IMapItem"
  },
  "api/AngeliA.Platformer.CameraAutoScroll.html": {
    "href": "api/AngeliA.Platformer.CameraAutoScroll.html",
    "title": "Class CameraAutoScroll | AngeliA",
    "summary": "Class CameraAutoScroll Camera control entity that makes the camera follows a given path Implements IMapItem Methods LateUpdate() [4/4] This function is called every frame when entity is in stage. Prioritize using this function to render the entity. Declaration public override void LateUpdate() Overrides Entity.LateUpdate() OnActivated() This function is called when entity enter the stage Declaration public override void OnActivated() Overrides Entity.OnActivated() OnInactivated() This function is called when entity leave the stage Declaration public override void OnInactivated() Overrides Entity.OnInactivated()"
  },
  "api/AngeliA.Platformer.CameraGate.html": {
    "href": "api/AngeliA.Platformer.CameraGate.html",
    "title": "Class CameraGate | AngeliA",
    "summary": "Class CameraGate Entity that perform extra controls to the in-game camera movement Implements IMapItem Properties Direction Which direction does this gate clamp the camera position Declaration protected abstract Direction4 Direction { get; } Methods BeforeUpdate() [2/4] This function is called every frame when entity is in stage. Prioritize using this function to update physics logic. Declaration public override void BeforeUpdate() Overrides Entity.BeforeUpdate() LateUpdate() [4/4] This function is called every frame when entity is in stage. Prioritize using this function to render the entity. Declaration public override void LateUpdate() Overrides Entity.LateUpdate() Update() [3/4] This function is called every frame when entity is in stage. Prioritize using this function to update physics logic. Declaration public override void Update() Overrides Entity.Update()"
  },
  "api/AngeliA.Platformer.CameraGateDown.html": {
    "href": "api/AngeliA.Platformer.CameraGateDown.html",
    "title": "Class CameraGateDown | AngeliA",
    "summary": "Class CameraGateDown Camera gate that clamp camera to down side Implements IMapItem Properties Direction Which direction does this gate clamp the camera position Declaration protected override Direction4 Direction { get; } Overrides CameraGate.Direction"
  },
  "api/AngeliA.Platformer.CameraGateLeft.html": {
    "href": "api/AngeliA.Platformer.CameraGateLeft.html",
    "title": "Class CameraGateLeft | AngeliA",
    "summary": "Class CameraGateLeft Camera gate that clamp camera to left side Implements IMapItem Properties Direction Which direction does this gate clamp the camera position Declaration protected override Direction4 Direction { get; } Overrides CameraGate.Direction"
  },
  "api/AngeliA.Platformer.CameraGateRight.html": {
    "href": "api/AngeliA.Platformer.CameraGateRight.html",
    "title": "Class CameraGateRight | AngeliA",
    "summary": "Class CameraGateRight Camera gate that clamp camera to right side Implements IMapItem Properties Direction Which direction does this gate clamp the camera position Declaration protected override Direction4 Direction { get; } Overrides CameraGate.Direction"
  },
  "api/AngeliA.Platformer.CameraGateUp.html": {
    "href": "api/AngeliA.Platformer.CameraGateUp.html",
    "title": "Class CameraGateUp | AngeliA",
    "summary": "Class CameraGateUp Camera gate that clamp camera to up side Implements IMapItem Properties Direction Which direction does this gate clamp the camera position Declaration protected override Direction4 Direction { get; } Overrides CameraGate.Direction"
  },
  "api/AngeliA.Platformer.CarryingPipe.html": {
    "href": "api/AngeliA.Platformer.CarryingPipe.html",
    "title": "Class CarryingPipe | AngeliA",
    "summary": "Class CarryingPipe This entity carry the player when they get in Implements IMapItem IBlockEntity Properties BottomSprite Artwork sprite for rendering the bottom part Declaration protected abstract SpriteCode BottomSprite { get; } CarryingPoseAnimationID ID of the pose-style animation applys on pose character Declaration protected virtual int CarryingPoseAnimationID { get; } Direction Direction this pipe is facing Declaration protected abstract Direction4 Direction { get; } EdgeSprite Artwork sprite for rendering the edge part Declaration protected abstract SpriteCode EdgeSprite { get; } InsertSprite Artwork sprite for rendering the extra expanded part Declaration protected abstract SpriteCode InsertSprite { get; } MidSprite Artwork sprite for rendering the middle part Declaration protected abstract SpriteCode MidSprite { get; } Methods FirstUpdate() [1/4] This function is called every frame when entity is in stage. Prioritize using this function to fill collider in to physics system. Declaration public override void FirstUpdate() Overrides Entity.FirstUpdate() IsEdge(bool) True if the pipe is on the edge as entrance Declaration public bool IsEdge(bool requireOpenSpace) LateUpdate() [4/4] This function is called every frame when entity is in stage. Prioritize using this function to render the entity. Declaration public override void LateUpdate() Overrides Entity.LateUpdate() OnActivated() This function is called when entity enter the stage Declaration public override void OnActivated() Overrides Entity.OnActivated() OnPlayerEnter(Character) This function is called when player enter the pipe Declaration protected virtual void OnPlayerEnter(Character player) OnPlayerExit(Character) This function is called when player exit the pipe Declaration protected virtual void OnPlayerExit(Character player) Update() [3/4] This function is called every frame when entity is in stage. Prioritize using this function to update physics logic. Declaration public override void Update() Overrides Entity.Update()"
  },
  "api/AngeliA.Platformer.ChainCrusher.html": {
    "href": "api/AngeliA.Platformer.ChainCrusher.html",
    "title": "Class ChainCrusher | AngeliA",
    "summary": "Class ChainCrusher Entity holds a rotating chained ball to attack player Implements IMapItem IBlockEntity ICircuitOperator IDamageReceiver Properties AttackTargetTeam Which teams should be attack by the bullet Declaration public virtual int AttackTargetTeam { get; } BallReleaseFrame Declaration protected int BallReleaseFrame { get; } ChainLength Length of the chain in global space Declaration public virtual int ChainLength { get; } Clockwise True if the chained ball rotate in clockwise Declaration public virtual bool Clockwise { get; } CurrentSpikeBallPos Declaration protected Int2 CurrentSpikeBallPos { get; } CurrentSpikeBallRotation Declaration protected float CurrentSpikeBallRotation { get; } DamageAmount Amount of damage it deals at once Declaration public virtual int DamageAmount { get; } DamageType Declaration public virtual Tag DamageType { get; } ReleaseBallOnCircuitTrigger True if the ball release when this entity being triggered by circuit Declaration public virtual bool ReleaseBallOnCircuitTrigger { get; } ReleaseBallOnDamaged True if the ball release when this entity take damage Declaration public virtual bool ReleaseBallOnDamaged { get; } RotateFrequency How many frames does the rotation takes for a loop Declaration public virtual int RotateFrequency { get; } SpikeBallSize Size of the ball in global space Declaration public virtual int SpikeBallSize { get; } Methods BeforeUpdate() [2/4] This function is called every frame when entity is in stage. Prioritize using this function to update physics logic. Declaration public override void BeforeUpdate() Overrides Entity.BeforeUpdate() CalculateCurrentSpikeBallTransform() Calculate current ball position in global space and rotation Declaration protected virtual (Int2 pos, float rot) CalculateCurrentSpikeBallTransform() FirstUpdate() [1/4] This function is called every frame when entity is in stage. Prioritize using this function to fill collider in to physics system. Declaration public override void FirstUpdate() Overrides Entity.FirstUpdate() OnActivated() This function is called when entity enter the stage Declaration public override void OnActivated() Overrides Entity.OnActivated() OnReleaseBall() This function is called when the ball is released Declaration protected virtual void OnReleaseBall()"
  },
  "api/AngeliA.Platformer.Chair.html": {
    "href": "api/AngeliA.Platformer.Chair.html",
    "title": "Class Chair | AngeliA",
    "summary": "Class Chair Furniture that makes the player sit on Implements IMapItem IBlockEntity IActionTarget Properties ModuleType Which direction does this entity expand as map block. (eg. Beds goes horizontaly. Fridge goes verticaly) Declaration protected override sealed Direction3 ModuleType { get; } Overrides Furniture.ModuleType SitPoseAnimationID Pose animation apply to the target character when sitting Declaration protected virtual int SitPoseAnimationID { get; } Methods AllowInvoke() True if the user can perform the logic currently Declaration public override bool AllowInvoke() Overrides ActionFurniture.AllowInvoke() BeforeUpdate() [2/4] This function is called every frame when entity is in stage. Prioritize using this function to update physics logic. Declaration public override void BeforeUpdate() Overrides Furniture.BeforeUpdate() Invoke() Perform the internal logic Declaration public override bool Invoke() Overrides ActionFurniture.Invoke() LateUpdate() [4/4] This function is called every frame when entity is in stage. Prioritize using this function to render the entity. Declaration public override void LateUpdate() Overrides ActionFurniture.LateUpdate() MakeTargetSit(Entity) Make the given entity sit on this chair Declaration public void MakeTargetSit(Entity target) OnActivated() This function is called when entity enter the stage Declaration public override void OnActivated() Overrides Furniture.OnActivated()"
  },
  "api/AngeliA.Platformer.CheckAltar-1.html": {
    "href": "api/AngeliA.Platformer.CheckAltar-1.html",
    "title": "Class CheckAltar<CP> | AngeliA",
    "summary": "Class CheckAltar<CP> Entity that function as a check point. Can also use to unlock a type of check point. Implements IMapItem ICircuitOperator IBlockEntity Constructors CheckAltar() Declaration public CheckAltar()"
  },
  "api/AngeliA.Platformer.CheckAltar.html": {
    "href": "api/AngeliA.Platformer.CheckAltar.html",
    "title": "Class CheckAltar | AngeliA",
    "summary": "Class CheckAltar Entity that function as a check point. Can also use to unlock a type of check point. Implements IMapItem ICircuitOperator IBlockEntity Fields LinkedCheckPointID Declaration protected int LinkedCheckPointID Properties CurrentAltarID Current activating altar type ID Declaration public static int CurrentAltarID { get; } CurrentAltarUnitPos Current activating altar position in unit space Declaration public static Int3 CurrentAltarUnitPos { get; } LinkPoolReady True if the internal cp link pool is ready to use Declaration public static bool LinkPoolReady { get; } Methods FirstUpdate() [1/4] This function is called every frame when entity is in stage. Prioritize using this function to fill collider in to physics system. Declaration public override void FirstUpdate() Overrides Entity.FirstUpdate() LateUpdate() [4/4] This function is called every frame when entity is in stage. Prioritize using this function to render the entity. Declaration public override void LateUpdate() Overrides Entity.LateUpdate() OnActivated() This function is called when entity enter the stage Declaration public override void OnActivated() Overrides Entity.OnActivated() Touch() Use this function to control logic that handles player touch Declaration public virtual void Touch() TryGetLinkedID(int, out int) Declaration public static bool TryGetLinkedID(int id, out int linkedID) Update() [3/4] This function is called every frame when entity is in stage. Prioritize using this function to update physics logic. Declaration public override void Update() Overrides Entity.Update()"
  },
  "api/AngeliA.Platformer.CheckPoint.html": {
    "href": "api/AngeliA.Platformer.CheckPoint.html",
    "title": "Class CheckPoint | AngeliA",
    "summary": "Class CheckPoint Entity that save player position when player touchs. When game restart, player spawns to the saved position. Implements IMapItem IBlockEntity ICircuitOperator Constructors CheckPoint() Declaration public CheckPoint() Fields LastTriggerFrame Declaration protected int LastTriggerFrame Properties LastTriggeredCheckPointID Type ID for last check point get triggered Declaration public static int LastTriggeredCheckPointID { get; } LastTriggeredCheckPointUnitPosition Position in unit space for last check point get triggered Declaration public static Int3? LastTriggeredCheckPointUnitPosition { get; } RequireAltarUnlock True if only work when linked altar is unlocked Declaration protected virtual bool RequireAltarUnlock { get; } Methods FirstUpdate() [1/4] This function is called every frame when entity is in stage. Prioritize using this function to fill collider in to physics system. Declaration public override void FirstUpdate() Overrides Entity.FirstUpdate() LateUpdate() [4/4] This function is called every frame when entity is in stage. Prioritize using this function to render the entity. Declaration public override void LateUpdate() Overrides Entity.LateUpdate() OnActivated() This function is called when entity enter the stage Declaration public override void OnActivated() Overrides Entity.OnActivated() Touch() Use this function to control logic when player touch Declaration public virtual void Touch() Update() [3/4] This function is called every frame when entity is in stage. Prioritize using this function to update physics logic. Declaration public override void Update() Overrides Entity.Update()"
  },
  "api/AngeliA.Platformer.CheckPointPortal.html": {
    "href": "api/AngeliA.Platformer.CheckPointPortal.html",
    "title": "Class CheckPointPortal | AngeliA",
    "summary": "Class CheckPointPortal Portal that telepart player to target check point Implements IMapItem Fields TYPE_ID Declaration public static readonly int TYPE_ID Properties TargetGlobalPosition Position in global space to teleport the target Declaration protected override Int3 TargetGlobalPosition { get; } Overrides Portal.TargetGlobalPosition Methods Invoke(Character) Perform teleport for given target Declaration public override bool Invoke(Character character) Returns Type Description bool True if successfuly performed Overrides Portal.Invoke(Character) LateUpdate() [4/4] This function is called every frame when entity is in stage. Prioritize using this function to render the entity. Declaration public override void LateUpdate() Overrides CircleFlamePortal.LateUpdate() OnActivated() This function is called when entity enter the stage Declaration public override void OnActivated() Overrides CircleFlamePortal.OnActivated() SetCheckPoint(int, Int3) Set the target check point Declaration public void SetCheckPoint(int checkPointID, Int3 unitPosition) Int3 unitPosition Position in unit space to teleport to Update() [3/4] This function is called every frame when entity is in stage. Prioritize using this function to update physics logic. Declaration public override void Update() Overrides Portal.Update()"
  },
  "api/AngeliA.Platformer.CircleFlamePortal.html": {
    "href": "api/AngeliA.Platformer.CircleFlamePortal.html",
    "title": "Class CircleFlamePortal | AngeliA",
    "summary": "Class CircleFlamePortal Portal that looks like magic thing circling around Implements IMapItem Properties CircleCode Artwork sprite ID for rendering the circle part Declaration protected virtual int CircleCode { get; } CircleSize Size of the circle in global space Declaration protected virtual int CircleSize { get; } FlameCode Artwork sprite ID for rendering the flame part Declaration protected virtual int FlameCode { get; } LightCode Artwork sprite ID for rendering the light part Declaration protected virtual int LightCode { get; } Methods LateUpdate() [4/4] This function is called every frame when entity is in stage. Prioritize using this function to render the entity. Declaration public override void LateUpdate() Overrides Entity.LateUpdate() OnActivated() This function is called when entity enter the stage Declaration public override void OnActivated() Overrides Portal.OnActivated()"
  },
  "api/AngeliA.Platformer.Clock.html": {
    "href": "api/AngeliA.Platformer.Clock.html",
    "title": "Class Clock | AngeliA",
    "summary": "Class Clock Furniture that display the current in-game time Implements IMapItem IBlockEntity Properties ModuleType Which direction does this entity expand as map block. (eg. Beds goes horizontaly. Fridge goes verticaly) Declaration protected override Direction3 ModuleType { get; } Overrides Furniture.ModuleType Methods FirstUpdate() [1/4] This function is called every frame when entity is in stage. Prioritize using this function to fill collider in to physics system. Declaration public override void FirstUpdate() Overrides Furniture.FirstUpdate() LateUpdate() [4/4] This function is called every frame when entity is in stage. Prioritize using this function to render the entity. Declaration public override void LateUpdate() Overrides Furniture.LateUpdate()"
  },
  "api/AngeliA.Platformer.Collectable.html": {
    "href": "api/AngeliA.Platformer.Collectable.html",
    "title": "Class Collectable | AngeliA",
    "summary": "Class Collectable Entity that get collect when player touchs Implements IMapItem IBlockEntity Properties ItemCount How many item does it give at once Declaration protected virtual int ItemCount { get; } ItemID Item it give to player when get collected Declaration protected virtual int ItemID { get; } Methods AllowCollect(Character) True if given character can collect this collectable Declaration protected virtual bool AllowCollect(Character collector) FirstUpdate() [1/4] This function is called every frame when entity is in stage. Prioritize using this function to fill collider in to physics system. Declaration public override void FirstUpdate() Overrides Entity.FirstUpdate() LateUpdate() [4/4] This function is called every frame when entity is in stage. Prioritize using this function to render the entity. Declaration public override void LateUpdate() Overrides Entity.LateUpdate() OnActivated() This function is called when entity enter the stage Declaration public override void OnActivated() Overrides Entity.OnActivated() OnCollect(Character) Make this collectable be collect by given character Declaration public virtual bool OnCollect(Character collector) Returns Type Description bool True if sucessfuly collected Update() [3/4] This function is called every frame when entity is in stage. Prioritize using this function to update physics logic. Declaration public override void Update() Overrides Entity.Update()"
  },
  "api/AngeliA.Platformer.Conveyor.html": {
    "href": "api/AngeliA.Platformer.Conveyor.html",
    "title": "Class Conveyor | AngeliA",
    "summary": "Class Conveyor Entity that move the objects on top horizontaly Implements IMapItem IBlockEntity Properties ArtCodeLeft Artwork sprite ID for left facing block Declaration protected abstract int ArtCodeLeft { get; } ArtCodeMid Artwork sprite ID for middle block Declaration protected abstract int ArtCodeMid { get; } ArtCodeRight Artwork sprite ID for right facing block Declaration protected abstract int ArtCodeRight { get; } ArtCodeSingle Artwork sprite ID for isolated block Declaration protected abstract int ArtCodeSingle { get; } MoveSpeed Speed apply on object on top Declaration protected abstract int MoveSpeed { get; } Pose Declaration protected FittingPose Pose { get; } Methods BeforeUpdate() [2/4] This function is called every frame when entity is in stage. Prioritize using this function to update physics logic. Declaration public override void BeforeUpdate() Overrides Entity.BeforeUpdate() FirstUpdate() [1/4] This function is called every frame when entity is in stage. Prioritize using this function to fill collider in to physics system. Declaration public override void FirstUpdate() Overrides Entity.FirstUpdate() LateUpdate() [4/4] This function is called every frame when entity is in stage. Prioritize using this function to render the entity. Declaration public override void LateUpdate() Overrides Entity.LateUpdate() OnActivated() This function is called when entity enter the stage Declaration public override void OnActivated() Overrides Entity.OnActivated() ReloadPose() Reload fitting pose from map or stage Declaration protected void ReloadPose()"
  },
  "api/AngeliA.Platformer.CraftingTable.html": {
    "href": "api/AngeliA.Platformer.CraftingTable.html",
    "title": "Class CraftingTable | AngeliA",
    "summary": "Class CraftingTable Furniture that allow the player to combine items into another item Implements IMapItem IBlockEntity IActionTarget Properties UseInventoryThumbnail True if display a thumbnail for this entity in the inventory UI Declaration protected virtual bool UseInventoryThumbnail { get; } Methods DrawInventoryThumbnail(IRect, bool) Render the thumbnail for this entity in the inventory UI Declaration protected void DrawInventoryThumbnail(IRect itemRect, bool singleRow = false) Invoke() Open the inventory UI Declaration public override bool Invoke() Returns Type Description bool True if the UI successfuly opens Overrides InventoryFurniture.Invoke() LateUpdate() [4/4] This function is called every frame when entity is in stage. Prioritize using this function to render the entity. Declaration public override void LateUpdate() Overrides InventoryFurniture.LateUpdate()"
  },
  "api/AngeliA.Platformer.CraftingUI.html": {
    "href": "api/AngeliA.Platformer.CraftingUI.html",
    "title": "Class CraftingUI | AngeliA",
    "summary": "Class CraftingUI UI for the crafting table Implements IWindowEntityUI Properties FrameCode Artwork sprite ID for the item field frame Declaration public SpriteCode FrameCode { get; set; } ItemFieldSize Unified size of a single item field Declaration public override int ItemFieldSize { get; } Overrides PlayerMenuPartnerUI.ItemFieldSize Methods DrawPanel(IRect) This function is called every frame for displaying this panel Declaration public override void DrawPanel(IRect panelRect) Parameters Type Name Description IRect panelRect Rect position for the range of this panel in global space Overrides InventoryPartnerUI.DrawPanel(IRect) EnablePanel() This function is called when the panel start to display Declaration public override void EnablePanel() Overrides PlayerMenuPartnerUI.EnablePanel() SetColumnAndRow(int, int) Set inventory column and row count Declaration public void SetColumnAndRow(int newColumn, int newRow)"
  },
  "api/AngeliA.Platformer.DollItem.html": {
    "href": "api/AngeliA.Platformer.DollItem.html",
    "title": "Class DollItem | AngeliA",
    "summary": "Class DollItem Item that draw a doll sprite onto character's hip when carry inside inventory Implements IMapItem Properties DollSize Size of the doll sprite in global space Declaration public abstract int DollSize { get; } MaxStackCount Count limitation for multiple items inside one inventory slot Declaration public override int MaxStackCount { get; } Overrides Item.MaxStackCount Methods OnPoseAnimationUpdate_FromInventory(PoseCharacterRenderer, int, int) This function is called every frame when pose-style character update after rendering is ready Declaration public override void OnPoseAnimationUpdate_FromInventory(PoseCharacterRenderer rendering, int inventoryID, int itemIndex) Parameters Type Name Description PoseCharacterRenderer rendering The inventory holder int inventoryID ID of the inventory Overrides Item.OnPoseAnimationUpdate_FromInventory(PoseCharacterRenderer, int, int)"
  },
  "api/AngeliA.Platformer.DonutBlock.BreakMode.html": {
    "href": "api/AngeliA.Platformer.DonutBlock.BreakMode.html",
    "title": "Enum DonutBlock.BreakMode | AngeliA",
    "summary": "Enum DonutBlock.BreakMode How this entity broke Fields Name Description BreakOnFall Break when start to fall BreakOnTouchGround Break on drop onto ground DoNotBreak Do not auto break"
  },
  "api/AngeliA.Platformer.DonutBlock.html": {
    "href": "api/AngeliA.Platformer.DonutBlock.html",
    "title": "Class DonutBlock | AngeliA",
    "summary": "Class DonutBlock Entity that drops when being step on for a well Implements IMapItem IBlockEntity Properties BreakCondition How this entity break Declaration protected virtual DonutBlock.BreakMode BreakCondition { get; } FallingVelocity Speed downward when falling Declaration protected virtual int FallingVelocity { get; } HoldDuration How long does it takes to make it fall by standing on it Declaration protected virtual int HoldDuration { get; } HoldStartFrame When does this entity begin to be step on Declaration protected int HoldStartFrame { get; } IsFalling True if this entity is falling Declaration protected bool IsFalling { get; } IsHolding True if this entity is being step on Declaration protected bool IsHolding { get; } Methods Break() Make this donut block break Declaration protected virtual void Break() FirstUpdate() [1/4] This function is called every frame when entity is in stage. Prioritize using this function to fill collider in to physics system. Declaration public override void FirstUpdate() Overrides Entity.FirstUpdate() LateUpdate() [4/4] This function is called every frame when entity is in stage. Prioritize using this function to render the entity. Declaration public override void LateUpdate() Overrides Entity.LateUpdate() OnActivated() This function is called when entity enter the stage Declaration public override void OnActivated() Overrides Entity.OnActivated() Update() [3/4] This function is called every frame when entity is in stage. Prioritize using this function to update physics logic. Declaration public override void Update() Overrides Entity.Update()"
  },
  "api/AngeliA.Platformer.Door.html": {
    "href": "api/AngeliA.Platformer.Door.html",
    "title": "Class Door | AngeliA",
    "summary": "Class Door Entity that teleport player into next-front/behind layer of the map Implements IMapItem IBlockEntity Properties IsFrontDoor True if the door teleport player to next front layer Declaration public abstract bool IsFrontDoor { get; } KeyItemID ID of required key item. 0 means no key required. Declaration public virtual int KeyItemID { get; } UnlockedDoorID Entity type id for the unlocked version of this door Declaration public virtual int UnlockedDoorID { get; } Methods AllowInvoke(Entity) True if the door allow the target to use Declaration public virtual bool AllowInvoke(Entity target) BeforeUpdate() [2/4] This function is called every frame when entity is in stage. Prioritize using this function to update physics logic. Declaration public override void BeforeUpdate() Overrides Entity.BeforeUpdate() FirstUpdate() [1/4] This function is called every frame when entity is in stage. Prioritize using this function to fill collider in to physics system. Declaration public override void FirstUpdate() Overrides Entity.FirstUpdate() Invoke(Character) Use this door Declaration public virtual bool Invoke(Character character) Returns Type Description bool True if successfuly used LateUpdate() [4/4] This function is called every frame when entity is in stage. Prioritize using this function to render the entity. Declaration public override void LateUpdate() Overrides Entity.LateUpdate() OnActivated() This function is called when entity enter the stage Declaration public override void OnActivated() Overrides Entity.OnActivated()"
  },
  "api/AngeliA.Platformer.EmptyMovableBullet.html": {
    "href": "api/AngeliA.Platformer.EmptyMovableBullet.html",
    "title": "Class EmptyMovableBullet | AngeliA",
    "summary": "Class EmptyMovableBullet Implements IMapItem"
  },
  "api/AngeliA.Platformer.Enemy.html": {
    "href": "api/AngeliA.Platformer.Enemy.html",
    "title": "Class Enemy | AngeliA",
    "summary": "Class Enemy Characters that attack the player Implements IMapItem IDamageReceiver ICarrier IWithCharacterMovement IWithCharacterAttackness IWithCharacterHealth IWithCharacterBuff IWithCharacterRenderer Properties AttackTargetTeam Target team for dealing damage to other Declaration public override int AttackTargetTeam { get; } Overrides Character.AttackTargetTeam DamageOnTouch True if this enemy deal damage to player when touching the player Declaration protected virtual bool DamageOnTouch { get; } Team Target team for taking damage from other Declaration public override int Team { get; } Overrides Character.Team Methods BeforeUpdate() [2/4] This function is called every frame when entity is in stage. Prioritize using this function to update physics logic. Declaration public override void BeforeUpdate() Overrides Character.BeforeUpdate() FirstUpdate() [1/4] This function is called every frame when entity is in stage. Prioritize using this function to fill collider in to physics system. Declaration public override void FirstUpdate() Overrides Character.FirstUpdate() OnActivated() This function is called when entity enter the stage Declaration public override void OnActivated() Overrides Character.OnActivated() OnDamaged(Damage) This function is called when character take damage Declaration public override void OnDamaged(Damage damage) Overrides Character.OnDamaged(Damage)"
  },
  "api/AngeliA.Platformer.Explosion.html": {
    "href": "api/AngeliA.Platformer.Explosion.html",
    "title": "Class Explosion | AngeliA",
    "summary": "Class Explosion General representation of an explosion Implements IMapItem Properties BreakObjectArtwork Artwork sprite ID for object break callback Declaration public int BreakObjectArtwork { get; set; } CollisionMask Cells in which physics layers will be effect by the explosion Declaration protected virtual int CollisionMask { get; } Damage How many damage does this explosion deal to the targets Declaration protected virtual int Damage { get; } DestroyBlocks True if this explosion break map blocks Declaration protected virtual bool DestroyBlocks { get; } Duration How many frames does this explosion exists in stage Declaration protected virtual int Duration { get; } ExplodedFrame Declaration protected int ExplodedFrame { get; } FireColor Color tint of the fire sprite Declaration protected virtual Color32 FireColor { get; } Radius Size of the explosion in global space Declaration public int Radius { get; set; } RingColor Color tint of the ring sprite Declaration protected virtual Color32 RingColor { get; } Sender Which entity create this explosion Declaration public Entity Sender { get; set; } WaveColor Color tint of the wave sprite Declaration protected virtual Color32 WaveColor { get; } Methods BeforeUpdate() [2/4] This function is called every frame when entity is in stage. Prioritize using this function to update physics logic. Declaration public override void BeforeUpdate() Overrides Entity.BeforeUpdate() OnActivated() This function is called when entity enter the stage Declaration public override void OnActivated() Overrides Entity.OnActivated() OnExplode(IRect) This function is called the this explosion explode Declaration protected abstract void OnExplode(IRect range) Parameters Type Name Description IRect range (in global space) Update() [3/4] This function is called every frame when entity is in stage. Prioritize using this function to update physics logic. Declaration public override void Update() Overrides Entity.Update()"
  },
  "api/AngeliA.Platformer.ExplosiveMovableBullet.html": {
    "href": "api/AngeliA.Platformer.ExplosiveMovableBullet.html",
    "title": "Class ExplosiveMovableBullet | AngeliA",
    "summary": "Class ExplosiveMovableBullet Movable bullet that spawn an explosion entity when despawn Implements IMapItem Properties Duration How long can this bullet exists on stage in frame Declaration public override int Duration { get; } Overrides MovableBullet.Duration ExplosionDuration Duration of the explosion in frame Declaration protected virtual int ExplosionDuration { get; } ExplosionID Type ID of the explosion Declaration protected abstract int ExplosionID { get; } ExplosionRadius Radius in global space for the explosion. Declaration protected virtual int ExplosionRadius { get; } Methods BeforeDespawn(IDamageReceiver) This function is called before the bullet get despawn by performing damage logic Declaration protected override void BeforeDespawn(IDamageReceiver receiver) Parameters Type Name Description IDamageReceiver receiver The target it hits Overrides MovableBullet.BeforeDespawn(IDamageReceiver) OnActivated() This function is called when entity enter the stage Declaration public override void OnActivated() Overrides MovableBullet.OnActivated()"
  },
  "api/AngeliA.Platformer.Fire.html": {
    "href": "api/AngeliA.Platformer.Fire.html",
    "title": "Class Fire | AngeliA",
    "summary": "Class Fire Entity that burns on target ICombustible Implements IMapItem IFire Properties DamageCooldown How long does it takes to damage a IDamageReceiver again Declaration protected virtual int DamageCooldown { get; } DefaultDirection Direction of the fire is facing when it get spawned Declaration protected virtual Direction4 DefaultDirection { get; } Direction Direction of the fire is currently facing Declaration public Direction4 Direction { get; set; } IlluminateAmount Amount of lighting it gives Declaration protected virtual int IlluminateAmount { get; } IlluminateUnitRadius Lighting illuminate distance in unit space Declaration protected virtual int IlluminateUnitRadius { get; } PowerAmount How fast the fire burn down the target ICombustible Declaration protected virtual int PowerAmount { get; } SpreadDuration Frames this fire takes to spread itself Declaration protected virtual int SpreadDuration { get; } SpreadRange ICombustible in this range will be on fire when this fire spread Declaration protected virtual int SpreadRange { get; } UseAdditiveShader True if the fire use additive shader to render Declaration protected virtual bool UseAdditiveShader { get; } WeakenDuration Duration in frames that this fire appears to be weaken Declaration protected virtual int WeakenDuration { get; } Methods BeforeUpdate() [2/4] This function is called every frame when entity is in stage. Prioritize using this function to update physics logic. Declaration public override void BeforeUpdate() Overrides Entity.BeforeUpdate() FirstUpdate() [1/4] This function is called every frame when entity is in stage. Prioritize using this function to fill collider in to physics system. Declaration public override void FirstUpdate() Overrides Entity.FirstUpdate() LateUpdate() [4/4] This function is called every frame when entity is in stage. Prioritize using this function to render the entity. Declaration public override void LateUpdate() Overrides Entity.LateUpdate() OnActivated() This function is called when entity enter the stage Declaration public override void OnActivated() Overrides Entity.OnActivated() OnInactivated() This function is called when entity leave the stage Declaration public override void OnInactivated() Overrides Entity.OnInactivated() Putout(bool) Make the fire stop burning Declaration public void Putout(bool manually) Parameters Type Name Description bool manually True if the fire is stopped by something else instead by it own Setup(ICombustible) Make this fire burn on a ICombustible Declaration public void Setup(ICombustible com) Setup(int, Direction4, int, int, bool) Make this fire start to burn on no target Declaration public void Setup(int burnDuration, Direction4 direction, int width = 256, int height = 256, bool damageImmediately = false) Parameters Type Name Description int burnDuration How long does it burn Direction4 direction Direction it facing int width Size in global space int height Size in global space bool damageImmediately Deal damage immediately after spawn Spread() Make the fire spread Declaration public void Spread() Update() [3/4] This function is called every frame when entity is in stage. Prioritize using this function to update physics logic. Declaration public override void Update() Overrides Entity.Update()"
  },
  "api/AngeliA.Platformer.FireSprinkler.html": {
    "href": "api/AngeliA.Platformer.FireSprinkler.html",
    "title": "Class FireSprinkler | AngeliA",
    "summary": "Class FireSprinkler Furniture that detect and put out fire automatically Implements IMapItem IBlockEntity ICircuitOperator Properties AlarmLightSpriteCode Artwork sprite ID for the alarm light Declaration protected virtual int AlarmLightSpriteCode { get; } CheckFrequency How many frames does it takes to check for fire again Declaration protected virtual int CheckFrequency { get; } DetectionRadius How far does the fire checking goes in global space Declaration protected virtual int DetectionRadius { get; } RespondDelay How many frames does it wait from fire detected to start putting it out Declaration protected virtual int RespondDelay { get; } SprinklingDuration How long does a single water splash takes in frame Declaration protected virtual int SprinklingDuration { get; } SprinklingRange How far does the water splash goes in global space Declaration protected virtual int SprinklingRange { get; } SprinklingWaterSpriteCount How many water sprites does it renders at same time Declaration protected virtual int SprinklingWaterSpriteCount { get; } SprinklingWaterSpriteGroupCode Artwork sprite group ID for a single water drop Declaration protected virtual int SprinklingWaterSpriteGroupCode { get; } Methods LateUpdate() [4/4] This function is called every frame when entity is in stage. Prioritize using this function to render the entity. Declaration public override void LateUpdate() Overrides Furniture.LateUpdate() OnActivated() This function is called when entity enter the stage Declaration public override void OnActivated() Overrides Furniture.OnActivated() Update() [3/4] This function is called every frame when entity is in stage. Prioritize using this function to update physics logic. Declaration public override void Update() Overrides Entity.Update()"
  },
  "api/AngeliA.Platformer.FloatingCombatText.html": {
    "href": "api/AngeliA.Platformer.FloatingCombatText.html",
    "title": "Class FloatingCombatText | AngeliA",
    "summary": "Class FloatingCombatText Displays text information with flowing up movement. Implements IMapItem Fields BackgroundColor Declaration public Color32 BackgroundColor Duration Total existing time in frame Declaration public int Duration FloatAirDrag Declaration public int FloatAirDrag FloatSpeed How far does it flow up in one frame Declaration public int FloatSpeed FontID Which font does it use Declaration public int FontID GlobalHeight Declaration public int GlobalHeight Style Declaration public GUIStyle Style TYPE_ID Declaration public static readonly int TYPE_ID TextColor Declaration public Color32 TextColor Methods BeforeUpdate() [2/4] This function is called every frame when entity is in stage. Prioritize using this function to update physics logic. Declaration public override void BeforeUpdate() Overrides Entity.BeforeUpdate() LateUpdate() [4/4] This function is called every frame when entity is in stage. Prioritize using this function to render the entity. Declaration public override void LateUpdate() Overrides Entity.LateUpdate() OnActivated() This function is called when entity enter the stage Declaration public override void OnActivated() Overrides Entity.OnActivated() Spawn(int, int, char[], int, Color32?, Color32?, GUIStyle) Spawn a FCT with given infomation Declaration public static FloatingCombatText Spawn(int x, int y, char[] chars, int fontID = 0, Color32? color = null, Color32? backgroundColor = null, GUIStyle style = null) Parameters Type Name Description int x Start position in global space int y Start position in global space char[] chars Text string content int fontID Which font does it use Color32? color Text color Returns Type Description FloatingCombatText Instance of the spawned FCT entity. Null if failed. Spawn(int, int, string, int, Color32?, Color32?, GUIStyle) Spawn a FCT with given infomation Declaration public static FloatingCombatText Spawn(int x, int y, string text, int fontID = 0, Color32? color = null, Color32? backgroundColor = null, GUIStyle style = null) Parameters Type Name Description int x Start position in global space int y Start position in global space string text Text string content int fontID Which font does it use Color32? color Text color Returns Type Description FloatingCombatText Instance of the spawned FCT entity. Null if failed."
  },
  "api/AngeliA.Platformer.FrozenZone.html": {
    "href": "api/AngeliA.Platformer.FrozenZone.html",
    "title": "Class FrozenZone | AngeliA",
    "summary": "Class FrozenZone Entity that freeze nearby buff carriers Implements IMapItem Properties Duration Time in frame that target keep being freeze Declaration public int Duration { get; set; } Fullscreen True if all buff carriers on screen will be freeze while this entity is on stage Declaration public bool Fullscreen { get; set; } Methods BeforeUpdate() [2/4] This function is called every frame when entity is in stage. Prioritize using this function to update physics logic. Declaration public override void BeforeUpdate() Overrides Entity.BeforeUpdate() FirstUpdate() [1/4] This function is called every frame when entity is in stage. Prioritize using this function to fill collider in to physics system. Declaration public override void FirstUpdate() Overrides Entity.FirstUpdate() LateUpdate() [4/4] This function is called every frame when entity is in stage. Prioritize using this function to render the entity. Declaration public override void LateUpdate() Overrides Entity.LateUpdate() OnActivated() This function is called when entity enter the stage Declaration public override void OnActivated() Overrides Entity.OnActivated() OnTouchingZone(Rigidbody) This function is called when a target is touching this zone Declaration protected virtual void OnTouchingZone(Rigidbody rig) SpreadFrozenZone(int, IRect, int) Spawn a frozen zone Declaration public static void SpreadFrozenZone(int zoneID, IRect range, int duration = 300) Parameters Type Name Description int zoneID Type of the zone IRect range Size of the zone int duration Time in frame that target keep being freeze"
  },
  "api/AngeliA.Platformer.Furniture.html": {
    "href": "api/AngeliA.Platformer.Furniture.html",
    "title": "Class Furniture | AngeliA",
    "summary": "Class Furniture Entity that function as a furniture Implements IMapItem IBlockEntity Fields ColliderBorder Border in global space from artwork sprite Declaration protected Int4 ColliderBorder Properties FurnitureLeftOrDown Instance of the nearby furniture with same type Declaration public Furniture FurnitureLeftOrDown { get; } FurnitureRightOrUp Instance of the nearby furniture with same type Declaration public Furniture FurnitureRightOrUp { get; } ModuleType Which direction does this entity expand as map block. (eg. Beds goes horizontaly. Fridge goes verticaly) Declaration protected virtual Direction3 ModuleType { get; } Pose Which direction this furniture find it's nearby connection Declaration protected FittingPose Pose { get; } Methods BeforeUpdate() [2/4] This function is called every frame when entity is in stage. Prioritize using this function to update physics logic. Declaration public override void BeforeUpdate() Overrides Entity.BeforeUpdate() FirstUpdate() [1/4] This function is called every frame when entity is in stage. Prioritize using this function to fill collider in to physics system. Declaration public override void FirstUpdate() Overrides Entity.FirstUpdate() GetIsHighlighted() True if this furniture is highlighted as IActionTarget Declaration protected bool GetIsHighlighted() GetSpriteFromPose() Get the artwork sprite from current rendering sheet Declaration protected AngeSprite GetSpriteFromPose() LateUpdate() [4/4] This function is called every frame when entity is in stage. Prioritize using this function to render the entity. Declaration public override void LateUpdate() Overrides Entity.LateUpdate() OnActivated() This function is called when entity enter the stage Declaration public override void OnActivated() Overrides Entity.OnActivated()"
  },
  "api/AngeliA.Platformer.GlitchScope.html": {
    "href": "api/AngeliA.Platformer.GlitchScope.html",
    "title": "Struct GlitchScope | AngeliA",
    "summary": "Struct GlitchScope Implements IDisposable Constructors GlitchScope(int, int, int) Declaration public GlitchScope(int speedAmount = 1000, int shiftAmount = 1000, int scaleAmount = 1000) Methods Dispose() Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources. Declaration public void Dispose()"
  },
  "api/AngeliA.Platformer.Gloves-2.html": {
    "href": "api/AngeliA.Platformer.Gloves-2.html",
    "title": "Class Gloves<P, N> | AngeliA",
    "summary": "Class Gloves<P, N> Armor on character's both hands Implements IMapItem IProgressiveItem Type Parameters Name Description P Type of the item this armor will become after take damage for once N Type of the item this armor will become after being repair for once Constructors Gloves() Declaration public Gloves() Properties EquipmentType Which type is this quipment Declaration public override sealed EquipmentType EquipmentType { get; } Overrides Equipment.EquipmentType Methods DrawArmor(PoseCharacterRenderer) Render the armor onto given character Declaration protected override void DrawArmor(PoseCharacterRenderer renderer) Overrides Armor<P, N>.DrawArmor(PoseCharacterRenderer)"
  },
  "api/AngeliA.Platformer.GrandfatherClock.html": {
    "href": "api/AngeliA.Platformer.GrandfatherClock.html",
    "title": "Class GrandfatherClock | AngeliA",
    "summary": "Class GrandfatherClock Furniture that works as a combustible and verticaly expanding GrandfatherClock Implements IMapItem IBlockEntity ICombustible Properties ModuleType Which direction does this entity expand as map block. (eg. Beds goes horizontaly. Fridge goes verticaly) Declaration protected override sealed Direction3 ModuleType { get; } Overrides Furniture.ModuleType Methods LateUpdate() [4/4] This function is called every frame when entity is in stage. Prioritize using this function to render the entity. Declaration public override void LateUpdate() Overrides Furniture.LateUpdate()"
  },
  "api/AngeliA.Platformer.HealBullet.html": {
    "href": "api/AngeliA.Platformer.HealBullet.html",
    "title": "Class HealBullet | AngeliA",
    "summary": "Class HealBullet Bullet that heal a target Character. Use \"Damage\" to adjust how much does it heals. Implements IMapItem Properties Lerp How smooth the bullet move to the target Declaration protected virtual int Lerp { get; } Methods BeforeUpdate() [2/4] This function is called every frame when entity is in stage. Prioritize using this function to update physics logic. Declaration public override void BeforeUpdate() Overrides Bullet.BeforeUpdate() LateUpdate() [4/4] This function is called every frame when entity is in stage. Prioritize using this function to render the entity. Declaration public override void LateUpdate() Overrides Entity.LateUpdate() OnActivated() This function is called when entity enter the stage Declaration public override void OnActivated() Overrides Bullet.OnActivated()"
  },
  "api/AngeliA.Platformer.HealWeapon-1.html": {
    "href": "api/AngeliA.Platformer.HealWeapon-1.html",
    "title": "Class HealWeapon<B> | AngeliA",
    "summary": "Class HealWeapon<B> Weapon that shoot bullet to heal friendly forces Implements IMapItem Type Parameters Name Description B Type of bullet to spawn Properties AllowManuallyAttack True if this weapon allows manually attack from character Declaration protected virtual bool AllowManuallyAttack { get; } AutoAttackFrequency Frames it takes to auto attack again. Set to 0 for no auto attack Declaration protected virtual int AutoAttackFrequency { get; } Methods BeforeItemUpdate_FromEquipment(Character) This function is called every frame when the holder is equipping this item Declaration public override void BeforeItemUpdate_FromEquipment(Character holder) Overrides Item.BeforeItemUpdate_FromEquipment(Character) SpawnBullet(Character) Spawn the bullet entity Declaration public override Bullet SpawnBullet(Character sender) Parameters Type Name Description Character sender Character that use the weapon Returns Type Description Bullet Instance of the spawned bullet entity. Return null when invalid Overrides Weapon.SpawnBullet(Character)"
  },
  "api/AngeliA.Platformer.Helmet-2.html": {
    "href": "api/AngeliA.Platformer.Helmet-2.html",
    "title": "Class Helmet<P, N> | AngeliA",
    "summary": "Class Helmet<P, N> Armor on character's head Implements IMapItem IProgressiveItem Type Parameters Name Description P Type of the item this armor will become after take damage for once N Type of the item this armor will become after being repair for once Constructors Helmet() Declaration public Helmet() Properties EquipmentType Which type is this quipment Declaration public override sealed EquipmentType EquipmentType { get; } Overrides Equipment.EquipmentType WearingMode How an helmet wear on head Declaration protected abstract HelmetWearingMode WearingMode { get; } Methods DrawArmor(PoseCharacterRenderer) Render the armor onto given character Declaration protected override void DrawArmor(PoseCharacterRenderer renderer) Overrides Armor<P, N>.DrawArmor(PoseCharacterRenderer)"
  },
  "api/AngeliA.Platformer.HelmetWearingMode.html": {
    "href": "api/AngeliA.Platformer.HelmetWearingMode.html",
    "title": "Enum HelmetWearingMode | AngeliA",
    "summary": "Enum HelmetWearingMode How an helmet wear on head Fields Name Description Attach Put onto the head Cover Wrapped around the head"
  },
  "api/AngeliA.Platformer.IAutoTrackWalker.html": {
    "href": "api/AngeliA.Platformer.IAutoTrackWalker.html",
    "title": "Interface IAutoTrackWalker | AngeliA",
    "summary": "Interface IAutoTrackWalker Interace that provide logic for auto walking on tracks Properties LastWalkingFrame Last frame for this object when it's walking on track Declaration int LastWalkingFrame { get; set; } OnTrack True if this object is currently on track Declaration bool OnTrack { get; } TrackWalkSpeedRate Value scale for speed from track. (0 means 0%, 1000 means 100%) Declaration int TrackWalkSpeedRate { get; } WalkStartFrame Last frame for this object when it start to walk on track Declaration int WalkStartFrame { get; set; } Methods IsTypeAutoTrackWalker(int) True if given type ID refers to a valid track walker Declaration public static bool IsTypeAutoTrackWalker(int id)"
  },
  "api/AngeliA.Platformer.IPingPongWalker.html": {
    "href": "api/AngeliA.Platformer.IPingPongWalker.html",
    "title": "Interface IPingPongWalker | AngeliA",
    "summary": "Interface IPingPongWalker Interface that makes object auto walks and turn around when collide on a solid block. (like Goomba in Mario games) Properties LastTurnFrame Declaration int LastTurnFrame { get; set; } OnlyWalkWhenGrounded True if object don't walk when not touching ground Declaration bool OnlyWalkWhenGrounded { get; } TurningCheckMask Which physics layers is included for solid block checking Declaration int TurningCheckMask { get; } TurningCooldown Frames it takes to turn around again Declaration int TurningCooldown { get; } WalkOffEdge True if the target fall off edge Declaration bool WalkOffEdge { get; } WalkSpeed Declaration int WalkSpeed { get; } WalkingRight True if the object should walk to right Declaration bool WalkingRight { get; set; } Methods OnActivated(IPingPongWalker) Call this method when entity activated Declaration public static void OnActivated(IPingPongWalker walker) PingPongWalk(IPingPongWalker) Call this method every frame Declaration public static void PingPongWalk(IPingPongWalker walker)"
  },
  "api/AngeliA.Platformer.IRider.html": {
    "href": "api/AngeliA.Platformer.IRider.html",
    "title": "Interface IRider | AngeliA",
    "summary": "Interface IRider Interface to mark an entity as can be ride by characters Properties ReadyToRide True if the entity can be ride currently Declaration bool ReadyToRide { get; }"
  },
  "api/AngeliA.Platformer.IUnitable.UniteMode.html": {
    "href": "api/AngeliA.Platformer.IUnitable.UniteMode.html",
    "title": "Enum IUnitable.UniteMode | AngeliA",
    "summary": "Enum IUnitable.UniteMode Which direction will be connected Fields Name Description EightDirection Left right up down and diagonal FourDirection Left right up and down Horizontal Left and right Vertical Up and down"
  },
  "api/AngeliA.Platformer.IUnitable.html": {
    "href": "api/AngeliA.Platformer.IUnitable.html",
    "title": "Interface IUnitable | AngeliA",
    "summary": "Interface IUnitable Map blocks that connect to each other and forms a group Properties LocalUniteStamp Declaration int LocalUniteStamp { get; set; } UniteTempParam Custom object that comes from ForAllUnitedEntity call. Only use this inside the \"System.Action{E} results\" function. Declaration public static object UniteTempParam { get; } Methods ForAllUnitedEntity(int, int, IRect, OperationMode, UniteMode, Action<IUnitable>, object) Iterate through all connected IUnitable as a group Declaration public static void ForAllUnitedEntity(int physicsMask, int entityID, IRect rect, OperationMode mode, IUnitable.UniteMode uniteMode, Action<IUnitable> results, object param = null) Parameters Type Name Description int physicsMask Which physics layer is include for entity searching int entityID Target entity type ID IRect rect Rect position in global space IUnitable.UniteMode uniteMode Which direction count as connected Action<IUnitable> results Invoke this action for all founded result object param Custom data for the \"result\" action. Use IUnitable.UniteTempParam inside result action to get this data."
  },
  "api/AngeliA.Platformer.InventoryFurniture-1.html": {
    "href": "api/AngeliA.Platformer.InventoryFurniture-1.html",
    "title": "Class InventoryFurniture<UI> | AngeliA",
    "summary": "Class InventoryFurniture<UI> A type of furniture that player can put items inside Implements IMapItem IBlockEntity IActionTarget Type Parameters Name Description UI Which type of UI does this furniture shows Constructors InventoryFurniture() Declaration public InventoryFurniture()"
  },
  "api/AngeliA.Platformer.InventoryFurniture.html": {
    "href": "api/AngeliA.Platformer.InventoryFurniture.html",
    "title": "Class InventoryFurniture | AngeliA",
    "summary": "Class InventoryFurniture A type of furniture that player can put items inside Implements IMapItem IBlockEntity IActionTarget Constructors InventoryFurniture() Declaration public InventoryFurniture() Properties InventoryColumn Column count of the inventory UI Declaration protected abstract int InventoryColumn { get; } InventoryID ID for inventory system Declaration protected int InventoryID { get; } InventoryRow Row count of the inventory UI Declaration protected abstract int InventoryRow { get; } PartnerID Type ID of the UI entity Declaration protected int PartnerID { get; init; } UnlockItemInside True if items inside become unlocked for the player Declaration protected virtual bool UnlockItemInside { get; } Methods AllowInvoke() True if the player can open the inventory UI Declaration public override bool AllowInvoke() Overrides ActionFurniture.AllowInvoke() Invoke() Open the inventory UI Declaration public override bool Invoke() Returns Type Description bool True if the UI successfuly opens Overrides OpenableFurniture.Invoke() IsInventoryFurniture(int, out int) True if the given type ID refers to a valid inventory furniture Declaration public static bool IsInventoryFurniture(int typeID, out int capacity) int capacity Inventory size limit LateUpdate() [4/4] This function is called every frame when entity is in stage. Prioritize using this function to render the entity. Declaration public override void LateUpdate() Overrides OpenableFurniture.LateUpdate() OnActivated() This function is called when entity enter the stage Declaration public override void OnActivated() Overrides OpenableFurniture.OnActivated() SetOpen(bool) Set opening state of this furniture Declaration protected override void SetOpen(bool open) Overrides OpenableFurniture.SetOpen(bool) TryGetInventoryUI(int, out InventoryPartnerUI) Get the instance of the inventory UI from given furniture ID Declaration protected bool TryGetInventoryUI(int typeID, out InventoryPartnerUI result) Parameters Type Name Description int typeID Type ID of the furniture Returns Type Description bool True if the result is founded"
  },
  "api/AngeliA.Platformer.ItemBasedSummon.html": {
    "href": "api/AngeliA.Platformer.ItemBasedSummon.html",
    "title": "Class ItemBasedSummon | AngeliA",
    "summary": "Class ItemBasedSummon Summon character that summons when other characters put the origin item in their inventory Implements IMapItem ICarrier IWithCharacterMovement IWithCharacterAttackness IWithCharacterHealth IWithCharacterBuff IWithCharacterRenderer IDamageReceiver IActionTarget Properties OriginItemID ID of the item that make this character summons Declaration public int OriginItemID { get; set; } Methods OnActivated() This function is called when entity enter the stage Declaration public override void OnActivated() Overrides Summon.OnActivated() Update() [3/4] This function is called every frame when entity is in stage. Prioritize using this function to update physics logic. Declaration public override void Update() Overrides Summon.Update()"
  },
  "api/AngeliA.Platformer.Launcher.html": {
    "href": "api/AngeliA.Platformer.Launcher.html",
    "title": "Class Launcher | AngeliA",
    "summary": "Class Launcher Entity that spawn a given target entity repeately Implements IMapItem IBlockEntity Properties AllowingAutoLaunch True if the launcher perform launch every \"LaunchFrequency\" frames Declaration public virtual bool AllowingAutoLaunch { get; } CurrentLaunchedCount Declaration protected int CurrentLaunchedCount { get; } FailbackEntityID Launching entity with this type ID when the \"TargetEntityID\" is invalid Declaration public virtual int FailbackEntityID { get; } ItemCountPerLaunch How many entity does it launch at once Declaration public virtual int ItemCountPerLaunch { get; } KeepLaunchedEntityInMap True if the launched entities can reposition and save into the map Declaration public virtual bool KeepLaunchedEntityInMap { get; } LastLaunchedFrame Declaration protected int LastLaunchedFrame { get; set; } LaunchFrequency How many frames does it takes to launch another entity Declaration public virtual int LaunchFrequency { get; } LaunchOffset Starting position offset in global space for the launched entity Declaration public virtual Int2 LaunchOffset { get; } LaunchOverlappingElement True if launcher search entity target ID from overlapping map element Declaration public virtual bool LaunchOverlappingElement { get; } LaunchTowardsPlayer True if the launcher always launch towards player horizontal location Declaration public virtual bool LaunchTowardsPlayer { get; } LaunchVelocity Starting velocity for the launched entity Declaration public virtual Int2 LaunchVelocity { get; } LaunchWhenEntranceBlocked True if launcher can launch when the starting position is blocked by other entity Declaration public virtual bool LaunchWhenEntranceBlocked { get; } MaxLaunchCount How many entities can it launch every time after the launcher spawned on stage Declaration public virtual int MaxLaunchCount { get; } TargetEntityID Launching entity type ID Declaration public virtual int TargetEntityID { get; } UseMomentum True if the entity is move by monentum instead of velocity Declaration public virtual bool UseMomentum { get; } Methods FirstUpdate() [1/4] This function is called every frame when entity is in stage. Prioritize using this function to fill collider in to physics system. Declaration public override void FirstUpdate() Overrides Entity.FirstUpdate() LateUpdate() [4/4] This function is called every frame when entity is in stage. Prioritize using this function to render the entity. Declaration public override void LateUpdate() Overrides Entity.LateUpdate() LaunchEntity() Perform launch for once Declaration public Entity LaunchEntity() LaunchToRightSide() True if the launcher should launch to right currently Declaration public bool LaunchToRightSide() OnActivated() This function is called when entity enter the stage Declaration public override void OnActivated() Overrides Entity.OnActivated() OnEntityLaunched(Entity, int, int) This function is called when an entity is launched Declaration protected virtual void OnEntityLaunched(Entity entity, int x, int y) OnEntityRefresh() This function is called when there are map changes happens nearby and the entity needs to refresh itself Declaration public void OnEntityRefresh() Update() [3/4] This function is called every frame when entity is in stage. Prioritize using this function to update physics logic. Declaration public override void Update() Overrides Entity.Update() ValidForLaunch() True if the launcher is currently able to launch Declaration public bool ValidForLaunch()"
  },
  "api/AngeliA.Platformer.Leaf.html": {
    "href": "api/AngeliA.Platformer.Leaf.html",
    "title": "Class Leaf | AngeliA",
    "summary": "Class Leaf Represent a breakable leaf on stage Implements IMapItem IBlockEntity ICombustible IDamageReceiver Properties LeafArtworkCode Artwork sprite ID for rendering Declaration protected int LeafArtworkCode { get; } LeafCount Artwork sprite count Declaration protected virtual int LeafCount { get; } LeafExpand How far does artwork sprite expands Declaration protected virtual int LeafExpand { get; } Methods FirstUpdate() [1/4] This function is called every frame when entity is in stage. Prioritize using this function to fill collider in to physics system. Declaration public override void FirstUpdate() Overrides Entity.FirstUpdate() GetLeafShiftY(int, int, int) Declaration protected int GetLeafShiftY(int frameOffset = 0, int duration = 60, int amount = 12) LateUpdate() [4/4] This function is called every frame when entity is in stage. Prioritize using this function to render the entity. Declaration public override void LateUpdate() Overrides Entity.LateUpdate() OnActivated() This function is called when entity enter the stage Declaration public override void OnActivated() Overrides Entity.OnActivated() OnLeafBreak() This function is called when leaf break by something Declaration protected virtual void OnLeafBreak() Update() [3/4] This function is called every frame when entity is in stage. Prioritize using this function to update physics logic. Declaration public override void Update() Overrides Entity.Update()"
  },
  "api/AngeliA.Platformer.Light.html": {
    "href": "api/AngeliA.Platformer.Light.html",
    "title": "Class Light | AngeliA",
    "summary": "Class Light Furniture that give illuminate from 6:00 to 18:00 during in-game time Implements IMapItem IBlockEntity Properties IlluminateRange Range of the illuminate in global space Declaration protected virtual int IlluminateRange { get; } LightRange Size of the light sprite in global space Declaration protected virtual int LightRange { get; } LightSprite Artwork sprite for the light Declaration protected virtual SpriteCode LightSprite { get; } Methods FirstUpdate() [1/4] This function is called every frame when entity is in stage. Prioritize using this function to fill collider in to physics system. Declaration public override void FirstUpdate() Overrides Furniture.FirstUpdate() LateUpdate() [4/4] This function is called every frame when entity is in stage. Prioritize using this function to render the entity. Declaration public override void LateUpdate() Overrides Furniture.LateUpdate() OnActivated() This function is called when entity enter the stage Declaration public override void OnActivated() Overrides Furniture.OnActivated() Update() [3/4] This function is called every frame when entity is in stage. Prioritize using this function to update physics logic. Declaration public override void Update() Overrides Entity.Update()"
  },
  "api/AngeliA.Platformer.Liquid.html": {
    "href": "api/AngeliA.Platformer.Liquid.html",
    "title": "Class Liquid | AngeliA",
    "summary": "Class Liquid Entity that behave like liquid in AngeliA style Implements IMapItem Properties ArtworkID Artwork sprite ID for rendering Declaration protected virtual int ArtworkID { get; } ProduceID Entity type ID for the new liquid it spawn when flow Declaration protected virtual int ProduceID { get; } ReproduceFrequency Frames it takes for checking reproduce again Declaration protected virtual int ReproduceFrequency { get; } ReproduceVolume When \"Volume\" greater than this, the liquid will repdoduce itself for flow behavior Declaration protected virtual int ReproduceVolume { get; } VanishSpeed Volume lost per frame when liquid vanishing Declaration protected virtual int VanishSpeed { get; } Volume Current volume of the liquid. 0 means no liquid, 1000 means full volume. Declaration public int Volume { get; } Methods BeforeUpdate() [2/4] This function is called every frame when entity is in stage. Prioritize using this function to update physics logic. Declaration public override void BeforeUpdate() Overrides Entity.BeforeUpdate() FirstUpdate() [1/4] This function is called every frame when entity is in stage. Prioritize using this function to fill collider in to physics system. Declaration public override void FirstUpdate() Overrides Entity.FirstUpdate() LateUpdate() [4/4] This function is called every frame when entity is in stage. Prioritize using this function to render the entity. Declaration public override void LateUpdate() Overrides Entity.LateUpdate() OnActivated() This function is called when entity enter the stage Declaration public override void OnActivated() Overrides Entity.OnActivated() RequireVanishCheck() Declaration protected virtual bool RequireVanishCheck()"
  },
  "api/AngeliA.Platformer.MapChest.html": {
    "href": "api/AngeliA.Platformer.MapChest.html",
    "title": "Class MapChest | AngeliA",
    "summary": "Class MapChest Furniture that allow the player to spawn a chain of items from map element below Implements IMapItem IActionTarget IBlockEntity Fields OpenedChest Declaration protected static readonly HashSet<Int3> OpenedChest Properties ItemPlaceHolder Replace items in map with this id after spawn them Declaration protected virtual int ItemPlaceHolder { get; } Methods IsChestOpened(MapChest) True if the given chest is already opened Declaration protected static bool IsChestOpened(MapChest chest) LateUpdate() [4/4] This function is called every frame when entity is in stage. Prioritize using this function to render the entity. Declaration public override void LateUpdate() Overrides Furniture.LateUpdate()"
  },
  "api/AngeliA.Platformer.MeleeBullet.html": {
    "href": "api/AngeliA.Platformer.MeleeBullet.html",
    "title": "Class MeleeBullet | AngeliA",
    "summary": "Class MeleeBullet An invisible bullet created by melee weapon Implements IMapItem Fields TYPE_ID Declaration public static readonly int TYPE_ID Properties Duration How long can this bullet exists on stage in frame Declaration public override int Duration { get; } Overrides Bullet.Duration EnvironmentHitCount How many environment collider can this bullet hit without getting despawn Declaration protected override sealed int EnvironmentHitCount { get; } Overrides Bullet.EnvironmentHitCount ReceiverHitCount How many target collider can this bullet hit without getting despawn Declaration protected override int ReceiverHitCount { get; } Overrides Bullet.ReceiverHitCount SmokeParticleID Declaration public virtual int SmokeParticleID { get; } Methods FollowSender() Update the position of bullet so it attach to the weapon Declaration public void FollowSender() Update() [3/4] This function is called every frame when entity is in stage. Prioritize using this function to update physics logic. Declaration public override void Update() Overrides Bullet.Update()"
  },
  "api/AngeliA.Platformer.MeleeWeapon.html": {
    "href": "api/AngeliA.Platformer.MeleeWeapon.html",
    "title": "Class MeleeWeapon | AngeliA",
    "summary": "Class MeleeWeapon Weapon that spawn invisible bullet that follows the character Implements IMapItem Properties Damage Damage amount it deals Declaration public virtual int Damage { get; } RangeXLeft Bullet width in global space when attack facing left Declaration public abstract int RangeXLeft { get; } RangeXRight Bullet width in global space when attack facing right Declaration public abstract int RangeXRight { get; } RangeY Bullet height in global space Declaration public abstract int RangeY { get; } Methods SpawnBullet(Character) Spawn the bullet entity Declaration public override Bullet SpawnBullet(Character sender) Parameters Type Name Description Character sender Character that use the weapon Returns Type Description Bullet Instance of the spawned bullet entity. Return null when invalid Overrides Weapon.SpawnBullet(Character)"
  },
  "api/AngeliA.Platformer.MiniGame.SpawnBadgeHandler.html": {
    "href": "api/AngeliA.Platformer.MiniGame.SpawnBadgeHandler.html",
    "title": "Delegate MiniGame.SpawnBadgeHandler | AngeliA",
    "summary": "Delegate MiniGame.SpawnBadgeHandler"
  },
  "api/AngeliA.Platformer.MiniGame.html": {
    "href": "api/AngeliA.Platformer.MiniGame.html",
    "title": "Class MiniGame | AngeliA",
    "summary": "Class MiniGame A game that user can play with an extra in-game window Implements IMapItem IActionTarget IBlockEntity Constructors MiniGame() Declaration public MiniGame() Properties BadgeCount Total badge count the user can get Declaration protected abstract int BadgeCount { get; } BadgeHints Text hint for how to get badges Declaration protected virtual LanguageCode[] BadgeHints { get; } DisplayName Name of the game in English Declaration protected abstract string DisplayName { get; } IsPlaying True if the game is currently playing by the player Declaration protected bool IsPlaying { get; } RequireMouseCursor True if the game require mouse cursor display Declaration protected abstract bool RequireMouseCursor { get; } RequireQuitConfirm True if show confirm window when user trying to quit Declaration protected virtual bool RequireQuitConfirm { get; } ShowRestartOption True if show restart button on pause menu Declaration protected virtual bool ShowRestartOption { get; } WindowRect UI window position in global space Declaration protected IRect WindowRect { get; } WindowSize Size of UI window in global space Declaration protected virtual Int2 WindowSize { get; } Methods CloseMiniGame() Quit the game and close the window UI Declaration protected virtual void CloseMiniGame() DrawBadges(IRect) Draw the badge list panel on screen Declaration protected void DrawBadges(IRect panelRect) Parameters Type Name Description IRect panelRect Rect position in global space DrawBadges(IRect, Color32) Draw the badge list panel on screen Declaration protected void DrawBadges(IRect panelRect, Color32 backgroundColor) Parameters Type Name Description IRect panelRect Rect position in global space FirstUpdate() [1/4] This function is called every frame when entity is in stage. Prioritize using this function to fill collider in to physics system. Declaration public override void FirstUpdate() Overrides Entity.FirstUpdate() GameUpdate() Declaration protected abstract void GameUpdate() GiveBadge(int, bool) Give target badge to player Declaration protected void GiveBadge(int index, bool isGold) LateUpdate() [4/4] This function is called every frame when entity is in stage. Prioritize using this function to render the entity. Declaration public override sealed void LateUpdate() Overrides Entity.LateUpdate() OnInactivated() This function is called when entity leave the stage Declaration public override void OnInactivated() Overrides Entity.OnInactivated() RestartGame() Start the game again Declaration protected virtual void RestartGame() StartMiniGame() Open the window UI and start game Declaration protected abstract void StartMiniGame() Unify(int) Convert unified size into global size Declaration protected static int Unify(int value)"
  },
  "api/AngeliA.Platformer.MiniGameTask.html": {
    "href": "api/AngeliA.Platformer.MiniGameTask.html",
    "title": "Class MiniGameTask | AngeliA",
    "summary": "Class MiniGameTask Task to make gameplay occupied during minigame playing Fields MiniGame Declaration public MiniGame MiniGame Methods FrameUpdate() This function is used to handle the internal logic. Declaration public override TaskResult FrameUpdate() Returns Type Description TaskResult \"Continue\" if the task should keep on after this frame. \"End\" if the task should end. Overrides Task.FrameUpdate()"
  },
  "api/AngeliA.Platformer.MissileBullet.html": {
    "href": "api/AngeliA.Platformer.MissileBullet.html",
    "title": "Class MissileBullet | AngeliA",
    "summary": "Class MissileBullet A bullet that find and follow a target to attack them Implements IMapItem IDamageReceiver Properties CurrentRotation Current flying rotation Declaration public int CurrentRotation { get; set; } CurrentVelocity Declaration public Int2 CurrentVelocity { get; set; } DestroyOnHitTarget Declaration protected virtual bool DestroyOnHitTarget { get; } DestroyWhenTakeDamage True if this bullet get destroy when something else deal damage to it Declaration protected virtual bool DestroyWhenTakeDamage { get; } Duration How long can this bullet exists on stage in frame Declaration public override int Duration { get; } Overrides Bullet.Duration EnvironmentHitCount How many environment collider can this bullet hit without getting despawn Declaration protected override int EnvironmentHitCount { get; } Overrides Bullet.EnvironmentHitCount ExplosionParticleID Declaration protected virtual int ExplosionParticleID { get; } MissileAcceleration Speed acceleration Declaration protected virtual int MissileAcceleration { get; } MissileFlyingSpeed Forward speed in global space Declaration protected virtual int MissileFlyingSpeed { get; } MissileStartSpeed Initial speed in global space Declaration protected virtual int MissileStartSpeed { get; } MissileTarget Current following target entity Declaration public Entity MissileTarget { get; set; } OnlyHitTarget True if this bullet do not hit environment Declaration protected virtual bool OnlyHitTarget { get; } ReceiverHitCount How many target collider can this bullet hit without getting despawn Declaration protected override int ReceiverHitCount { get; } Overrides Bullet.ReceiverHitCount SmokeParticleFrequency How many frames does it takes to spawn a smoke particle Declaration protected virtual int SmokeParticleFrequency { get; } SmokeParticleID Declaration protected virtual int SmokeParticleID { get; } TargetHitFrame Declaration protected int TargetHitFrame { get; } Methods BeforeUpdate() [2/4] This function is called every frame when entity is in stage. Prioritize using this function to update physics logic. Declaration public override void BeforeUpdate() Overrides Bullet.BeforeUpdate() FindTargetUpdate() Use this function to control how it find target Declaration protected virtual void FindTargetUpdate() FirstUpdate() [1/4] This function is called every frame when entity is in stage. Prioritize using this function to fill collider in to physics system. Declaration public override void FirstUpdate() Overrides Entity.FirstUpdate() LateUpdate() [4/4] This function is called every frame when entity is in stage. Prioritize using this function to render the entity. Declaration public override void LateUpdate() Overrides Entity.LateUpdate() OnActivated() This function is called when entity enter the stage Declaration public override void OnActivated() Overrides Bullet.OnActivated() OnMissileHit(IDamageReceiver) Declaration protected virtual void OnMissileHit(IDamageReceiver receiver) PerformHitEnvironment(out bool) This function is called when the bullet hit environment colliders Declaration protected override void PerformHitEnvironment(out bool requireSelfDestroy) Parameters Type Name Description bool requireSelfDestroy True if this bullet should be despawn Overrides Bullet.PerformHitEnvironment(out bool) PerformHitReceiver(IDamageReceiver, out bool) This function is called when the bullet hit IDamageReceiver Declaration protected override void PerformHitReceiver(IDamageReceiver receiver, out bool requireSelfDestroy) Parameters Type Name Description IDamageReceiver receiver The target it hits bool requireSelfDestroy True if this bullet should be despawn Overrides Bullet.PerformHitReceiver(IDamageReceiver, out bool) SpawnMissileExplosionParticle() Declaration protected virtual Particle SpawnMissileExplosionParticle() SpawnMissileSmokeParticle() Declaration protected virtual Particle SpawnMissileSmokeParticle() UpdateMissileMovement() Use this function to control how it flys Declaration protected virtual void UpdateMissileMovement()"
  },
  "api/AngeliA.Platformer.MissileWeapon-1.html": {
    "href": "api/AngeliA.Platformer.MissileWeapon-1.html",
    "title": "Class MissileWeapon<B> | AngeliA",
    "summary": "Class MissileWeapon<B> Weapon that shoot a missile to attack Implements IMapItem Type Parameters Name Description B Type of the missile bullet Properties AvailableInAir True if character can use this tool when not touching ground Declaration public override bool AvailableInAir { get; } Overrides HandTool.AvailableInAir AvailableInWater True if character can use this tool when inside water Declaration public override bool AvailableInWater { get; } Overrides HandTool.AvailableInWater AvailableWhenClimbing True if character can use this tool when climbing Declaration public override bool AvailableWhenClimbing { get; } Overrides HandTool.AvailableWhenClimbing AvailableWhenDashing True if character can use this tool when dashing Declaration public override bool AvailableWhenDashing { get; } Overrides HandTool.AvailableWhenDashing AvailableWhenFlying True if character can use this tool when flying Declaration public override bool AvailableWhenFlying { get; } Overrides HandTool.AvailableWhenFlying AvailableWhenGrabbing True if character can use this tool when grabbing Declaration public override bool AvailableWhenGrabbing { get; } Overrides HandTool.AvailableWhenGrabbing AvailableWhenPounding True if character can use this tool when ground pounding Declaration public override bool AvailableWhenPounding { get; } Overrides HandTool.AvailableWhenPounding AvailableWhenRolling True if character can use this tool when rolling Declaration public override bool AvailableWhenRolling { get; } Overrides HandTool.AvailableWhenRolling AvailableWhenRunning True if character can use this tool when running Declaration public override bool AvailableWhenRunning { get; } Overrides HandTool.AvailableWhenRunning AvailableWhenRushing True if character can use this tool when rushing Declaration public override bool AvailableWhenRushing { get; } Overrides HandTool.AvailableWhenRushing AvailableWhenSliding True if character can use this tool when sliding on wall Declaration public override bool AvailableWhenSliding { get; } Overrides HandTool.AvailableWhenSliding AvailableWhenSquatting True if character can use this tool when squatting Declaration public override bool AvailableWhenSquatting { get; } Overrides HandTool.AvailableWhenSquatting AvailableWhenWalking True if character can use this tool when walking Declaration public override bool AvailableWhenWalking { get; } Overrides HandTool.AvailableWhenWalking Cooldown How long have to wait to use again after the tool being used for once Declaration public override int Cooldown { get; } Overrides HandTool.Cooldown DefaultMovementSpeedRateOnUse How fast can the character move when using this tool. (0 means do not move. 1000 means move as normal speed. null means do not effect movement speed.) Declaration public override int? DefaultMovementSpeedRateOnUse { get; } Overrides HandTool.DefaultMovementSpeedRateOnUse Duration How long does the tool perform it's function for once Declaration public override int Duration { get; } Overrides HandTool.Duration RunningMovementSpeedRateOnUse How fast can the character move when using this tool when running. (0 means do not move. 1000 means move as normal speed. null means do not effect movement speed.) Declaration public override int? RunningMovementSpeedRateOnUse { get; } Overrides HandTool.RunningMovementSpeedRateOnUse ValidDirection Which direction can this weapon attack Declaration protected override WeaponValidDirection ValidDirection { get; } Overrides Weapon.ValidDirection WalkingMovementSpeedRateOnUse How fast can the character move when using this tool when walking. (0 means do not move. 1000 means move as normal speed. null means do not effect movement speed.) Declaration public override int? WalkingMovementSpeedRateOnUse { get; } Overrides HandTool.WalkingMovementSpeedRateOnUse Methods BeforeItemUpdate_FromEquipment(Character) This function is called every frame when the holder is equipping this item Declaration public override void BeforeItemUpdate_FromEquipment(Character holder) Overrides Item.BeforeItemUpdate_FromEquipment(Character) SpawnBullet(Character) Spawn the bullet entity Declaration public override Bullet SpawnBullet(Character sender) Parameters Type Name Description Character sender Character that use the weapon Returns Type Description Bullet Instance of the spawned bullet entity. Return null when invalid Overrides Weapon.SpawnBullet(Character)"
  },
  "api/AngeliA.Platformer.MomentumBooster.html": {
    "href": "api/AngeliA.Platformer.MomentumBooster.html",
    "title": "Class MomentumBooster | AngeliA",
    "summary": "Class MomentumBooster Entity that force character on top run in given direction or their current facing direction Implements IMapItem IBlockEntity Properties BoostDirection Target moving direction. Set to None to make target run to their facing direction Declaration protected abstract Direction3 BoostDirection { get; } BoostSpeed Target moving speed Declaration protected abstract int BoostSpeed { get; } LastBoostFrame Declaration protected int LastBoostFrame { get; } MomentumDecay Decay value for target momentum Declaration protected virtual int MomentumDecay { get; } Methods BeforeUpdate() [2/4] This function is called every frame when entity is in stage. Prioritize using this function to update physics logic. Declaration public override void BeforeUpdate() Overrides Entity.BeforeUpdate() FirstUpdate() [1/4] This function is called every frame when entity is in stage. Prioritize using this function to fill collider in to physics system. Declaration public override void FirstUpdate() Overrides Entity.FirstUpdate() OnActivated() This function is called when entity enter the stage Declaration public override void OnActivated() Overrides Entity.OnActivated() OnBoosting(Rigidbody) This function is called when target is getting boost Declaration protected virtual void OnBoosting(Rigidbody rig)"
  },
  "api/AngeliA.Platformer.MovableBullet.html": {
    "href": "api/AngeliA.Platformer.MovableBullet.html",
    "title": "Class MovableBullet | AngeliA",
    "summary": "Class MovableBullet A bullet that moves after being spawned Implements IMapItem Properties AriDrag Declaration public virtual Int2 AriDrag { get; } ArtworkID Artwork sprite ID to render this bullet Declaration public virtual int ArtworkID { get; } CurrentRotation Declaration public int CurrentRotation { get; set; } Duration How long can this bullet exists on stage in frame Declaration public override int Duration { get; } Overrides Bullet.Duration EndRotation Bullet will become this rotation after hit target Declaration public virtual int EndRotation { get; } EndRotationRandomRange Random angle applys to the end rotation Declaration public virtual int EndRotationRandomRange { get; } EnvironmentHitCount How many environment collider can this bullet hit without getting despawn Declaration protected override int EnvironmentHitCount { get; } Overrides Bullet.EnvironmentHitCount FacingRight True if bullet facing right currently Declaration public virtual bool FacingRight { get; } Gravity Declaration public virtual int Gravity { get; } HitReceiver True if the bullet already hit a receiver Declaration public bool HitReceiver { get; } InWater Declaration public bool InWater { get; } MaxRange Bullet get despawn when fly longer than this range in global space Declaration public virtual int MaxRange { get; } ReceiverHitCount How many target collider can this bullet hit without getting despawn Declaration protected override int ReceiverHitCount { get; } Overrides Bullet.ReceiverHitCount ResidueID This entity spawns after bullet despawn Declaration public virtual int ResidueID { get; } RotateSpeed Declaration public virtual int RotateSpeed { get; } Scale Size scale for artwork only. 0 means 0%, 1000 means 100% Declaration public virtual int Scale { get; } SpeedForward Movement speed to shooting direction Declaration public virtual int SpeedForward { get; } SpeedSide Movement speed to 90° of shooting direction Declaration public virtual int SpeedSide { get; } StartRotation Declaration public virtual int StartRotation { get; } Velocity Declaration public Int2 Velocity { get; set; } WaterSpeedRate Speed multiply rate when bullet inside water. 0 means 0%, 1000 means 100% Declaration public virtual int WaterSpeedRate { get; } Methods BeforeDespawn(IDamageReceiver) This function is called before the bullet get despawn by performing damage logic Declaration protected override void BeforeDespawn(IDamageReceiver receiver) Parameters Type Name Description IDamageReceiver receiver The target it hits Overrides Bullet.BeforeDespawn(IDamageReceiver) BeforeUpdate() [2/4] This function is called every frame when entity is in stage. Prioritize using this function to update physics logic. Declaration public override void BeforeUpdate() Overrides Bullet.BeforeUpdate() GetLastUpdatedTramsform() Declaration protected (int startX, int startY, int endX, int endY, int length, int rotation1000, bool beamHitReceiver) GetLastUpdatedTramsform() LateUpdate() [4/4] This function is called every frame when entity is in stage. Prioritize using this function to render the entity. Declaration public override void LateUpdate() Overrides Entity.LateUpdate() OnActivated() This function is called when entity enter the stage Declaration public override void OnActivated() Overrides Bullet.OnActivated() StartMove(Direction8, int, int) Declaration public virtual void StartMove(Direction8 dir, int speedForward, int speedSide)"
  },
  "api/AngeliA.Platformer.Navigation.IExpandRangeValidator.html": {
    "href": "api/AngeliA.Platformer.Navigation.IExpandRangeValidator.html",
    "title": "Interface Navigation.IExpandRangeValidator | AngeliA",
    "summary": "Interface Navigation.IExpandRangeValidator Methods Verify(int, int) Declaration bool Verify(int cellX, int cellY)"
  },
  "api/AngeliA.Platformer.Navigation.Operation.html": {
    "href": "api/AngeliA.Platformer.Navigation.Operation.html",
    "title": "Struct Navigation.Operation | AngeliA",
    "summary": "Struct Navigation.Operation Data for a single step of navigation operation Fields Motion Type of the motion Declaration public NavigationOperateMotion Motion TargetGlobalX Declaration public int TargetGlobalX TargetGlobalY Declaration public int TargetGlobalY"
  },
  "api/AngeliA.Platformer.Navigation.html": {
    "href": "api/AngeliA.Platformer.Navigation.html",
    "title": "Class Navigation | AngeliA",
    "summary": "Class Navigation Core system for navigate a platformer entity to move naturally Properties IsReady True if the navigation system is ready to use Declaration public static bool IsReady { get; } Methods ExpandTo(int, int, int, int, int, out int, out int, bool) Search for a valid place to stay with Declaration public static bool ExpandTo(int fromX, int fromY, int toX, int toY, int maxIteration, out int resultX, out int resultY, bool endInAir = false) Parameters Type Name Description int fromX Search from this position in global space int fromY Search from this position in global space int toX Search to this position in global space int toY Search to this position in global space int maxIteration Limitation for searching iteration (Set to 16 if you have no idea how many it should be) int resultX Result position to stay with in global space int resultY Result position to stay with in global space bool endInAir True if the target is able to stay in air Returns Type Description bool True if the searching performs successfuly IsGround(int, int, out int) True if the given location is ground tile for navigation Declaration public static bool IsGround(int globalX, int globalY, out int groundY) Parameters Type Name Description int globalX Target position in global space int globalY Target position in global space int groundY Position Y for top edge of the founded ground in global space NavigateTo(Operation[], out int, int, int, int, int, int) Perform a navigation analysis to find the natural way to walk to target position Declaration public static void NavigateTo(Navigation.Operation[] Operations, out int operationCount, int fromX, int fromY, int toX, int toY, int jumpIteration = 16) Parameters Type Name Description Operation[] Operations Array to store the result data int operationCount How many operations generated int fromX Navigate from this position in global space int fromY Navigate from this position in global space int toX Navigate to this position in global space int toY Navigate to this position in global space int jumpIteration Iteration limit for jumpping logic"
  },
  "api/AngeliA.Platformer.NavigationOperateMotion.html": {
    "href": "api/AngeliA.Platformer.NavigationOperateMotion.html",
    "title": "Enum NavigationOperateMotion | AngeliA",
    "summary": "Enum NavigationOperateMotion Type of navigation motion for a single step Fields Name Description"
  },
  "api/AngeliA.Platformer.OnCheckPointTouched_CheckPoint_CharacterAttribute.html": {
    "href": "api/AngeliA.Platformer.OnCheckPointTouched_CheckPoint_CharacterAttribute.html",
    "title": "Class OnCheckPointTouched_CheckPoint_CharacterAttribute | AngeliA",
    "summary": "Class OnCheckPointTouched_CheckPoint_CharacterAttribute The function will be called when a check point entity touched by player Examples [OnCheckPointTouched_CheckPoint_Character] internal static void ExampleFunction (CheckPoint cp, Character player) { } Constructors OnCheckPointTouched_CheckPoint_CharacterAttribute(int) The function will be called when a check point entity touched by player Declaration public OnCheckPointTouched_CheckPoint_CharacterAttribute(int order = 0) Parameters Type Name Description int order Function with smaller order will be called earlier Examples [OnCheckPointTouched_CheckPoint_Character] internal static void ExampleFunction (CheckPoint cp, Character player) { }"
  },
  "api/AngeliA.Platformer.OnFirePutOut_IntTypeID_IRectAttribute.html": {
    "href": "api/AngeliA.Platformer.OnFirePutOut_IntTypeID_IRectAttribute.html",
    "title": "Class OnFirePutOut_IntTypeID_IRectAttribute | AngeliA",
    "summary": "Class OnFirePutOut_IntTypeID_IRectAttribute The function will be called when a fire entity is put out Examples [OnFirePutOut_IntTypeID_IRect] internal static void ExampleFunction (int typeID, IRect rect) { } Constructors OnFirePutOut_IntTypeID_IRectAttribute(int) The function will be called when a fire entity is put out Declaration public OnFirePutOut_IntTypeID_IRectAttribute(int order = 0) Parameters Type Name Description int order Function with smaller order will be called earlier Examples [OnFirePutOut_IntTypeID_IRect] internal static void ExampleFunction (int typeID, IRect rect) { }"
  },
  "api/AngeliA.Platformer.OnMiniGameGiveBadge_IntQuality.html": {
    "href": "api/AngeliA.Platformer.OnMiniGameGiveBadge_IntQuality.html",
    "title": "Class OnMiniGameGiveBadge_IntQuality | AngeliA",
    "summary": "Class OnMiniGameGiveBadge_IntQuality The function will be called when mini game give reward to player Examples [OnMiniGameGiveBadge_IntQuality] internal static void ExampleFunction (int quality) { } Constructors OnMiniGameGiveBadge_IntQuality(int) The function will be called when mini game give reward to player Declaration public OnMiniGameGiveBadge_IntQuality(int order = 0) Parameters Type Name Description int order Function with smaller order will be called earlier Examples [OnMiniGameGiveBadge_IntQuality] internal static void ExampleFunction (int quality) { }"
  },
  "api/AngeliA.Platformer.Oneway.html": {
    "href": "api/AngeliA.Platformer.Oneway.html",
    "title": "Class Oneway | AngeliA",
    "summary": "Class Oneway Entity that do not allow rigidbody pass through on given direction Implements IMapItem IBlockEntity Properties GateDirection Target moving opposite with this direction get blocked Declaration public abstract Direction4 GateDirection { get; } LastReboundFrame Declaration protected int LastReboundFrame { get; } Methods ContactReboundUpdate(int) Declaration protected virtual bool ContactReboundUpdate(int frame) FirstUpdate() [1/4] This function is called every frame when entity is in stage. Prioritize using this function to fill collider in to physics system. Declaration public override void FirstUpdate() Overrides Entity.FirstUpdate() LateUpdate() [4/4] This function is called every frame when entity is in stage. Prioritize using this function to render the entity. Declaration public override void LateUpdate() Overrides Entity.LateUpdate() OnActivated() This function is called when entity enter the stage Declaration public override void OnActivated() Overrides Entity.OnActivated() Update() [3/4] This function is called every frame when entity is in stage. Prioritize using this function to update physics logic. Declaration public override void Update() Overrides Entity.Update()"
  },
  "api/AngeliA.Platformer.OpenableFurniture.html": {
    "href": "api/AngeliA.Platformer.OpenableFurniture.html",
    "title": "Class OpenableFurniture | AngeliA",
    "summary": "Class OpenableFurniture Furniture that opens when player triggers Implements IMapItem IBlockEntity IActionTarget Properties Open True if the furniture is currently opening Declaration public bool Open { get; } Methods Invoke() Open the furniture Declaration public override bool Invoke() Returns Type Description bool True if it successfuly opened Overrides ActionFurniture.Invoke() LateUpdate() [4/4] This function is called every frame when entity is in stage. Prioritize using this function to render the entity. Declaration public override void LateUpdate() Overrides ActionFurniture.LateUpdate() OnActivated() This function is called when entity enter the stage Declaration public override void OnActivated() Overrides Furniture.OnActivated() SetOpen(bool) Set opening state of this furniture Declaration protected virtual void SetOpen(bool open)"
  },
  "api/AngeliA.Platformer.OpenableUiFurniture.html": {
    "href": "api/AngeliA.Platformer.OpenableUiFurniture.html",
    "title": "Class OpenableUiFurniture | AngeliA",
    "summary": "Class OpenableUiFurniture Implements IMapItem IBlockEntity IActionTarget Properties WindowSize Declaration protected virtual Int2 WindowSize { get; } Methods LateUpdate() [4/4] This function is called every frame when entity is in stage. Prioritize using this function to render the entity. Declaration public override void LateUpdate() Overrides OpenableFurniture.LateUpdate() OnUiClose() Declaration protected virtual void OnUiClose() OnUiOpen() Declaration protected virtual void OnUiOpen() SetOpen(bool) Declaration protected override void SetOpen(bool open) Overrides OpenableFurniture.SetOpen(bool) Unify(int) Declaration protected static int Unify(int value) UpdateUI(IRect) Declaration protected abstract void UpdateUI(IRect windowRect)"
  },
  "api/AngeliA.Platformer.OpeningTask.html": {
    "href": "api/AngeliA.Platformer.OpeningTask.html",
    "title": "Class OpeningTask | AngeliA",
    "summary": "Class OpeningTask Task that handles the logic for game restart Fields TYPE_ID Declaration public static readonly int TYPE_ID Properties FadeOut True if the task make fade out effect Declaration public bool FadeOut { get; set; } TargetViewX Camera view position X that the task trying to move to Declaration public int TargetViewX { get; set; } TargetViewY Camera view position Y that the task trying to move to Declaration public int TargetViewY { get; set; } TargetViewZ Z position of the stage Declaration public int TargetViewZ { get; set; } Methods FrameUpdate() This function is used to handle the internal logic. Declaration public override TaskResult FrameUpdate() Returns Type Description TaskResult \"Continue\" if the task should keep on after this frame. \"End\" if the task should end. Overrides Task.FrameUpdate() OnStart() This function is called when this task start Declaration public override void OnStart() Overrides Task.OnStart()"
  },
  "api/AngeliA.Platformer.PickTool.html": {
    "href": "api/AngeliA.Platformer.PickTool.html",
    "title": "Class PickTool | AngeliA",
    "summary": "Class PickTool Implements IMapItem Properties AllowPickBackgroundBlock Declaration public virtual bool AllowPickBackgroundBlock { get; } AllowPickBlockEntity Declaration public virtual bool AllowPickBlockEntity { get; } AllowPickLevelBlock Declaration public virtual bool AllowPickLevelBlock { get; } AvailableWhenSliding True if character can use this tool when sliding on wall Declaration public override bool AvailableWhenSliding { get; } Overrides HandTool.AvailableWhenSliding AvailableWhenSquatting True if character can use this tool when squatting Declaration public override bool AvailableWhenSquatting { get; } Overrides HandTool.AvailableWhenSquatting AvailableWhenWalking True if character can use this tool when walking Declaration public override bool AvailableWhenWalking { get; } Overrides HandTool.AvailableWhenWalking DefaultMovementSpeedRateOnUse How fast can the character move when using this tool. (0 means do not move. 1000 means move as normal speed. null means do not effect movement speed.) Declaration public override int? DefaultMovementSpeedRateOnUse { get; } Overrides HandTool.DefaultMovementSpeedRateOnUse DropItemAfterPicked Declaration public virtual bool DropItemAfterPicked { get; } Duration How long does the tool perform it's function for once Declaration public override int Duration { get; } Overrides HandTool.Duration MaxStackCount Count limitation for multiple items inside one inventory slot Declaration public override int MaxStackCount { get; } Overrides Equipment.MaxStackCount MouseUnitRange Declaration public virtual int MouseUnitRange { get; } PerformDelayRate How many frame based on \"duration\" does the internal tool logic invoke after character start to use the tool. (0 means immediately invoke. 1000 means invoke after \"duration\" frames) Declaration public override int PerformDelayRate { get; } Overrides HandTool.PerformDelayRate RunningMovementSpeedRateOnUse How fast can the character move when using this tool when running. (0 means do not move. 1000 means move as normal speed. null means do not effect movement speed.) Declaration public override int? RunningMovementSpeedRateOnUse { get; } Overrides HandTool.RunningMovementSpeedRateOnUse UseMouseToPick Declaration public virtual bool UseMouseToPick { get; } UseStackAsUsage True if this tool treat it's inventory stack count as durability bar Declaration public override bool UseStackAsUsage { get; } Overrides HandTool.UseStackAsUsage WalkingMovementSpeedRateOnUse How fast can the character move when using this tool when walking. (0 means do not move. 1000 means move as normal speed. null means do not effect movement speed.) Declaration public override int? WalkingMovementSpeedRateOnUse { get; } Overrides HandTool.WalkingMovementSpeedRateOnUse Methods DrawPickTargetHighlight(int, int, bool) Declaration protected virtual void DrawPickTargetHighlight(int unitX, int unitY, bool hasTarget) OnPoseAnimationUpdate_FromEquipment(PoseCharacterRenderer) This function is called every frame when a pose-style character equipping this item Declaration public override void OnPoseAnimationUpdate_FromEquipment(PoseCharacterRenderer rendering) Overrides Item.OnPoseAnimationUpdate_FromEquipment(PoseCharacterRenderer) OnToolPerform(Character) This function is called when this tool is used for once by the given character Declaration public override void OnToolPerform(Character sender) Overrides HandTool.OnToolPerform(Character)"
  },
  "api/AngeliA.Platformer.Plant.html": {
    "href": "api/AngeliA.Platformer.Plant.html",
    "title": "Class Plant | AngeliA",
    "summary": "Class Plant Represent a breakable plant on stage Implements IMapItem IBlockEntity ICombustible IDamageReceiver Methods FirstUpdate() [1/4] This function is called every frame when entity is in stage. Prioritize using this function to fill collider in to physics system. Declaration public override void FirstUpdate() Overrides Entity.FirstUpdate() LateUpdate() [4/4] This function is called every frame when entity is in stage. Prioritize using this function to render the entity. Declaration public override void LateUpdate() Overrides Entity.LateUpdate() OnPlantBreak() This function is called when the plant is break by something Declaration protected virtual void OnPlantBreak()"
  },
  "api/AngeliA.Platformer.Platform.html": {
    "href": "api/AngeliA.Platformer.Platform.html",
    "title": "Class Platform | AngeliA",
    "summary": "Class Platform A moving entity that carry things on top Implements IMapItem IBlockEntity Properties OneWay True if the entity fill upward oneway gate into physics system Declaration public abstract bool OneWay { get; } Pose Declaration protected FittingPose Pose { get; } TouchedByCharacter True if the platform has been touched by a character after spawned Declaration protected bool TouchedByCharacter { get; } TouchedByPlayer True if the platform has been touched by selecting player after spawned Declaration protected bool TouchedByPlayer { get; } TouchedByRigidbody True if the platform has been touched by a rigidbody after spawned Declaration protected bool TouchedByRigidbody { get; } Methods BeforeUpdate() [2/4] This function is called every frame when entity is in stage. Prioritize using this function to update physics logic. Declaration public override void BeforeUpdate() Overrides Entity.BeforeUpdate() FirstUpdate() [1/4] This function is called every frame when entity is in stage. Prioritize using this function to fill collider in to physics system. Declaration public override void FirstUpdate() Overrides Entity.FirstUpdate() LateUpdate() [4/4] This function is called every frame when entity is in stage. Prioritize using this function to render the entity. Declaration public override void LateUpdate() Overrides Entity.LateUpdate() Move() This function handles the movement logic of this platform Declaration protected abstract void Move() OnActivated() This function is called when entity enter the stage Declaration public override void OnActivated() Overrides Entity.OnActivated() OnCharacterTouched(Character) This function is called when a character touchs this platform Declaration protected virtual void OnCharacterTouched(Character character) OnPlayerTouched(Character) This function is called when the selecting player touchs this platform Declaration protected virtual void OnPlayerTouched(Character player) OnRigidbodyTouched(Rigidbody) This function is called when a rigidbody touchs this platform Declaration protected virtual void OnRigidbodyTouched(Rigidbody rig) RenderPlatformBlock(int) Draw the platform block on screen Declaration protected virtual void RenderPlatformBlock(int artworkID) SetTouch(bool, bool, bool) Mark the platform as touched. (do not trigger the callback functions) Declaration public void SetTouch(bool rigidbody = true, bool character = true, bool player = true) Update() [3/4] This function is called every frame when entity is in stage. Prioritize using this function to update physics logic. Declaration public override void Update() Overrides Entity.Update()"
  },
  "api/AngeliA.Platformer.PlatformerUtil.html": {
    "href": "api/AngeliA.Platformer.PlatformerUtil.html",
    "title": "Class PlatformerUtil | AngeliA",
    "summary": "Class PlatformerUtil Utility class for platformer package Methods NavigationFreeWandering(Int2, Entity, out bool, int, int, int) Find final position to move to for wandering around. Declaration public static Int2 NavigationFreeWandering(Int2 aimPosition, Entity target, out bool grounded, int frequency, int maxDistance, int randomShift = 0) Parameters Type Name Description Int2 aimPosition Target position anchor Entity target Entity that moves around bool grounded True if the final position is on ground int frequency Checking frequency in frame int maxDistance Limitation for being away from the aimPosition int randomShift Position shift on X in global space Returns Type Description Int2 Final position in global space"
  },
  "api/AngeliA.Platformer.Portal.html": {
    "href": "api/AngeliA.Platformer.Portal.html",
    "title": "Class Portal | AngeliA",
    "summary": "Class Portal Entity that teleport player to any given position when player touchs Implements IMapItem Properties DontSpawnAfterUsed True if the portal get remove from map after teleport Declaration protected virtual bool DontSpawnAfterUsed { get; } TargetGlobalPosition Position in global space to teleport the target Declaration protected abstract Int3 TargetGlobalPosition { get; } Methods FirstUpdate() [1/4] This function is called every frame when entity is in stage. Prioritize using this function to fill collider in to physics system. Declaration public override void FirstUpdate() Overrides Entity.FirstUpdate() Invoke(Character) Perform teleport for given target Declaration public virtual bool Invoke(Character character) Returns Type Description bool True if successfuly performed OnActivated() This function is called when entity enter the stage Declaration public override void OnActivated() Overrides Entity.OnActivated() Update() [3/4] This function is called every frame when entity is in stage. Prioritize using this function to update physics logic. Declaration public override void Update() Overrides Entity.Update()"
  },
  "api/AngeliA.Platformer.PoseAnimation_PhotoPose.html": {
    "href": "api/AngeliA.Platformer.PoseAnimation_PhotoPose.html",
    "title": "Class PoseAnimation_PhotoPose | AngeliA",
    "summary": "Class PoseAnimation_PhotoPose Fields TYPE_ID Declaration public static readonly int TYPE_ID Methods Animate(PoseCharacterRenderer) Perform the animation logic to the given character Declaration public override void Animate(PoseCharacterRenderer renderer) Overrides PoseAnimation.Animate(PoseCharacterRenderer)"
  },
  "api/AngeliA.Platformer.PoseAnimation_Ride.html": {
    "href": "api/AngeliA.Platformer.PoseAnimation_Ride.html",
    "title": "Class PoseAnimation_Ride | AngeliA",
    "summary": "Class PoseAnimation_Ride Fields TYPE_ID Declaration public static readonly int TYPE_ID Methods Animate(PoseCharacterRenderer) Perform the animation logic to the given character Declaration public override void Animate(PoseCharacterRenderer renderer) Overrides PoseAnimation.Animate(PoseCharacterRenderer)"
  },
  "api/AngeliA.Platformer.PoseAnimation_Sit.html": {
    "href": "api/AngeliA.Platformer.PoseAnimation_Sit.html",
    "title": "Class PoseAnimation_Sit | AngeliA",
    "summary": "Class PoseAnimation_Sit Fields TYPE_ID Declaration public static readonly int TYPE_ID Methods Animate(PoseCharacterRenderer) Perform the animation logic to the given character Declaration public override void Animate(PoseCharacterRenderer renderer) Overrides PoseAnimation.Animate(PoseCharacterRenderer) Sit() Declaration public static void Sit()"
  },
  "api/AngeliA.Platformer.PoseAnimation_SlidingSit.html": {
    "href": "api/AngeliA.Platformer.PoseAnimation_SlidingSit.html",
    "title": "Class PoseAnimation_SlidingSit | AngeliA",
    "summary": "Class PoseAnimation_SlidingSit Fields TYPE_ID Declaration public static readonly int TYPE_ID Methods Animate(PoseCharacterRenderer) Perform the animation logic to the given character Declaration public override void Animate(PoseCharacterRenderer renderer) Overrides PoseAnimation.Animate(PoseCharacterRenderer) BaseAnimate(PoseCharacterRenderer) Declaration public void BaseAnimate(PoseCharacterRenderer renderer) SlidingSit(bool) Declaration public static void SlidingSit(bool highPos)"
  },
  "api/AngeliA.Platformer.PoseAnimation_SlidingSitHigh.html": {
    "href": "api/AngeliA.Platformer.PoseAnimation_SlidingSitHigh.html",
    "title": "Class PoseAnimation_SlidingSitHigh | AngeliA",
    "summary": "Class PoseAnimation_SlidingSitHigh Fields TYPE_ID Declaration public static readonly int TYPE_ID Methods Animate(PoseCharacterRenderer) Perform the animation logic to the given character Declaration public override void Animate(PoseCharacterRenderer renderer) Overrides PoseAnimation_SlidingSit.Animate(PoseCharacterRenderer)"
  },
  "api/AngeliA.Platformer.PoseAttack_Bow.html": {
    "href": "api/AngeliA.Platformer.PoseAttack_Bow.html",
    "title": "Class PoseAttack_Bow | AngeliA",
    "summary": "Class PoseAttack_Bow Fields TYPE_ID Declaration public static readonly int TYPE_ID Methods Animate(PoseCharacterRenderer) Perform the animation logic to the given character Declaration public override void Animate(PoseCharacterRenderer renderer) Overrides PoseAnimation.Animate(PoseCharacterRenderer) Bow() Declaration public static void Bow()"
  },
  "api/AngeliA.Platformer.PoseAttack_Float.html": {
    "href": "api/AngeliA.Platformer.PoseAttack_Float.html",
    "title": "Class PoseAttack_Float | AngeliA",
    "summary": "Class PoseAttack_Float Fields TYPE_ID Declaration public static readonly int TYPE_ID Methods Animate(PoseCharacterRenderer) Perform the animation logic to the given character Declaration public override void Animate(PoseCharacterRenderer renderer) Overrides PoseAnimation.Animate(PoseCharacterRenderer) Wave() Declaration public static void Wave()"
  },
  "api/AngeliA.Platformer.PoseAttack_Hand.html": {
    "href": "api/AngeliA.Platformer.PoseAttack_Hand.html",
    "title": "Class PoseAttack_Hand | AngeliA",
    "summary": "Class PoseAttack_Hand Fields TYPE_ID Declaration public static readonly int TYPE_ID Methods Animate(PoseCharacterRenderer) Perform the animation logic to the given character Declaration public override void Animate(PoseCharacterRenderer renderer) Overrides PoseAnimation.Animate(PoseCharacterRenderer)"
  },
  "api/AngeliA.Platformer.PoseAttack_MagicPole.html": {
    "href": "api/AngeliA.Platformer.PoseAttack_MagicPole.html",
    "title": "Class PoseAttack_MagicPole | AngeliA",
    "summary": "Class PoseAttack_MagicPole Fields TYPE_ID Declaration public static readonly int TYPE_ID Methods Animate(PoseCharacterRenderer) Perform the animation logic to the given character Declaration public override void Animate(PoseCharacterRenderer renderer) Overrides PoseAnimation.Animate(PoseCharacterRenderer) Wave() Declaration public static void Wave()"
  },
  "api/AngeliA.Platformer.PoseAttack_MagicSingleHanded.html": {
    "href": "api/AngeliA.Platformer.PoseAttack_MagicSingleHanded.html",
    "title": "Class PoseAttack_MagicSingleHanded | AngeliA",
    "summary": "Class PoseAttack_MagicSingleHanded Fields TYPE_ID Declaration public static readonly int TYPE_ID Methods Animate(PoseCharacterRenderer) Perform the animation logic to the given character Declaration public override void Animate(PoseCharacterRenderer renderer) Overrides PoseAnimation.Animate(PoseCharacterRenderer) Wave() Declaration public static void Wave()"
  },
  "api/AngeliA.Platformer.PoseAttack_Polearm.html": {
    "href": "api/AngeliA.Platformer.PoseAttack_Polearm.html",
    "title": "Class PoseAttack_Polearm | AngeliA",
    "summary": "Class PoseAttack_Polearm Fields TYPE_ID Declaration public static readonly int TYPE_ID Methods Animate(PoseCharacterRenderer) Perform the animation logic to the given character Declaration public override void Animate(PoseCharacterRenderer renderer) Overrides PoseAnimation.Animate(PoseCharacterRenderer) Poke() Declaration public static void Poke() SlashIn() Declaration public static void SlashIn() SlashOut() Declaration public static void SlashOut() SmashDown() Declaration public static void SmashDown() SmashUp() Declaration public static void SmashUp()"
  },
  "api/AngeliA.Platformer.PoseAttack_Scratch.html": {
    "href": "api/AngeliA.Platformer.PoseAttack_Scratch.html",
    "title": "Class PoseAttack_Scratch | AngeliA",
    "summary": "Class PoseAttack_Scratch Fields TYPE_ID Declaration public static readonly int TYPE_ID Methods Animate(PoseCharacterRenderer) Perform the animation logic to the given character Declaration public override void Animate(PoseCharacterRenderer renderer) Overrides PoseAnimation.Animate(PoseCharacterRenderer) ScratchIn() Declaration public static void ScratchIn() ScratchOut() Declaration public static void ScratchOut() ScratchUp() Declaration public static void ScratchUp()"
  },
  "api/AngeliA.Platformer.PoseAttack_Shooting.html": {
    "href": "api/AngeliA.Platformer.PoseAttack_Shooting.html",
    "title": "Class PoseAttack_Shooting | AngeliA",
    "summary": "Class PoseAttack_Shooting Fields TYPE_ID Declaration public static readonly int TYPE_ID Methods Animate(PoseCharacterRenderer) Perform the animation logic to the given character Declaration public override void Animate(PoseCharacterRenderer renderer) Overrides PoseAnimation.Animate(PoseCharacterRenderer) Shooting() Declaration public static void Shooting()"
  },
  "api/AngeliA.Platformer.PoseAttack_WaveDoubleHanded.html": {
    "href": "api/AngeliA.Platformer.PoseAttack_WaveDoubleHanded.html",
    "title": "Class PoseAttack_WaveDoubleHanded | AngeliA",
    "summary": "Class PoseAttack_WaveDoubleHanded Fields TYPE_ID Declaration public static readonly int TYPE_ID Properties StyleIndex Declaration public virtual int StyleIndex { get; } Methods Animate(PoseCharacterRenderer) Perform the animation logic to the given character Declaration public override void Animate(PoseCharacterRenderer renderer) Overrides PoseAnimation.Animate(PoseCharacterRenderer) SlashIn() Declaration public static void SlashIn() SlashOut() Declaration public static void SlashOut() SmashDown() Declaration public static void SmashDown() SmashUp() Declaration public static void SmashUp()"
  },
  "api/AngeliA.Platformer.PoseAttack_WaveDoubleHanded_SmashOnly.html": {
    "href": "api/AngeliA.Platformer.PoseAttack_WaveDoubleHanded_SmashOnly.html",
    "title": "Class PoseAttack_WaveDoubleHanded_SmashOnly | AngeliA",
    "summary": "Class PoseAttack_WaveDoubleHanded_SmashOnly Fields TYPE_ID Declaration public static readonly int TYPE_ID Properties StyleIndex Declaration public override int StyleIndex { get; } Overrides PoseAttack_WaveDoubleHanded.StyleIndex"
  },
  "api/AngeliA.Platformer.PoseAttack_WaveEachHand.html": {
    "href": "api/AngeliA.Platformer.PoseAttack_WaveEachHand.html",
    "title": "Class PoseAttack_WaveEachHand | AngeliA",
    "summary": "Class PoseAttack_WaveEachHand Fields TYPE_ID Declaration public static readonly int TYPE_ID Properties StyleIndex Declaration public virtual int StyleIndex { get; } Methods Animate(PoseCharacterRenderer) Perform the animation logic to the given character Declaration public override void Animate(PoseCharacterRenderer renderer) Overrides PoseAnimation.Animate(PoseCharacterRenderer) SlashIn() Declaration public static void SlashIn() SlashOut() Declaration public static void SlashOut() SmashDown() Declaration public static void SmashDown() SmashUp() Declaration public static void SmashUp()"
  },
  "api/AngeliA.Platformer.PoseAttack_WaveEachHand_SmashOnly.html": {
    "href": "api/AngeliA.Platformer.PoseAttack_WaveEachHand_SmashOnly.html",
    "title": "Class PoseAttack_WaveEachHand_SmashOnly | AngeliA",
    "summary": "Class PoseAttack_WaveEachHand_SmashOnly Fields TYPE_ID Declaration public static readonly int TYPE_ID Properties StyleIndex Declaration public override int StyleIndex { get; } Overrides PoseAttack_WaveEachHand.StyleIndex"
  },
  "api/AngeliA.Platformer.PoseAttack_WavePolearm.html": {
    "href": "api/AngeliA.Platformer.PoseAttack_WavePolearm.html",
    "title": "Class PoseAttack_WavePolearm | AngeliA",
    "summary": "Class PoseAttack_WavePolearm Fields TYPE_ID Declaration public static readonly int TYPE_ID Properties StyleIndex Declaration public virtual int StyleIndex { get; } Methods Animate(PoseCharacterRenderer) Perform the animation logic to the given character Declaration public override void Animate(PoseCharacterRenderer renderer) Overrides PoseAnimation.Animate(PoseCharacterRenderer) SlashIn() Declaration public static void SlashIn() SlashOut() Declaration public static void SlashOut() SmashDown() Declaration public static void SmashDown() SmashUp() Declaration public static void SmashUp()"
  },
  "api/AngeliA.Platformer.PoseAttack_WavePolearm_SmashOnly.html": {
    "href": "api/AngeliA.Platformer.PoseAttack_WavePolearm_SmashOnly.html",
    "title": "Class PoseAttack_WavePolearm_SmashOnly | AngeliA",
    "summary": "Class PoseAttack_WavePolearm_SmashOnly Fields TYPE_ID Declaration public static readonly int TYPE_ID Properties StyleIndex Declaration public override int StyleIndex { get; } Overrides PoseAttack_WavePolearm.StyleIndex"
  },
  "api/AngeliA.Platformer.PoseAttack_WaveSingleHanded.html": {
    "href": "api/AngeliA.Platformer.PoseAttack_WaveSingleHanded.html",
    "title": "Class PoseAttack_WaveSingleHanded | AngeliA",
    "summary": "Class PoseAttack_WaveSingleHanded Fields TYPE_ID Declaration public static readonly int TYPE_ID Methods Animate(PoseCharacterRenderer) Perform the animation logic to the given character Declaration public override void Animate(PoseCharacterRenderer renderer) Overrides PoseAnimation.Animate(PoseCharacterRenderer) SlashIn() Declaration public static void SlashIn() SlashOut() Declaration public static void SlashOut() SmashDown() Declaration public static void SmashDown() SmashUp() Declaration public static void SmashUp()"
  },
  "api/AngeliA.Platformer.PoseAttack_WaveSingleHanded_SmashOnly.html": {
    "href": "api/AngeliA.Platformer.PoseAttack_WaveSingleHanded_SmashOnly.html",
    "title": "Class PoseAttack_WaveSingleHanded_SmashOnly | AngeliA",
    "summary": "Class PoseAttack_WaveSingleHanded_SmashOnly Fields TYPE_ID Declaration public static readonly int TYPE_ID Methods Animate(PoseCharacterRenderer) Perform the animation logic to the given character Declaration public override void Animate(PoseCharacterRenderer renderer) Overrides PoseAttack_WaveSingleHanded.Animate(PoseCharacterRenderer) Smash() Declaration public static void Smash()"
  },
  "api/AngeliA.Platformer.PoseHandheld_Bow.html": {
    "href": "api/AngeliA.Platformer.PoseHandheld_Bow.html",
    "title": "Class PoseHandheld_Bow | AngeliA",
    "summary": "Class PoseHandheld_Bow Fields TYPE_ID Declaration public static readonly int TYPE_ID Methods Animate(PoseCharacterRenderer) Perform the animation logic to the given character Declaration public override void Animate(PoseCharacterRenderer renderer) Overrides PoseAnimation.Animate(PoseCharacterRenderer) DrawTool(HandTool, PoseCharacterRenderer) Rendering the given handtool Declaration public override void DrawTool(HandTool tool, PoseCharacterRenderer renderer) Overrides HandheldPoseAnimation.DrawTool(HandTool, PoseCharacterRenderer)"
  },
  "api/AngeliA.Platformer.PoseHandheld_DoubleHanded.html": {
    "href": "api/AngeliA.Platformer.PoseHandheld_DoubleHanded.html",
    "title": "Class PoseHandheld_DoubleHanded | AngeliA",
    "summary": "Class PoseHandheld_DoubleHanded Fields TYPE_ID Declaration public static readonly int TYPE_ID Methods Animate(PoseCharacterRenderer) Perform the animation logic to the given character Declaration public override void Animate(PoseCharacterRenderer renderer) Overrides PoseAnimation.Animate(PoseCharacterRenderer) DrawTool(HandTool, PoseCharacterRenderer) Rendering the given handtool Declaration public override void DrawTool(HandTool tool, PoseCharacterRenderer renderer) Overrides HandheldPoseAnimation.DrawTool(HandTool, PoseCharacterRenderer)"
  },
  "api/AngeliA.Platformer.PoseHandheld_EachHand.html": {
    "href": "api/AngeliA.Platformer.PoseHandheld_EachHand.html",
    "title": "Class PoseHandheld_EachHand | AngeliA",
    "summary": "Class PoseHandheld_EachHand Fields TYPE_ID Declaration public static readonly int TYPE_ID Methods Animate(PoseCharacterRenderer) Perform the animation logic to the given character Declaration public override void Animate(PoseCharacterRenderer renderer) Overrides PoseAnimation.Animate(PoseCharacterRenderer) DrawTool(HandTool, PoseCharacterRenderer) Rendering the given handtool Declaration public override void DrawTool(HandTool tool, PoseCharacterRenderer renderer) Overrides HandheldPoseAnimation.DrawTool(HandTool, PoseCharacterRenderer)"
  },
  "api/AngeliA.Platformer.PoseHandheld_Float.html": {
    "href": "api/AngeliA.Platformer.PoseHandheld_Float.html",
    "title": "Class PoseHandheld_Float | AngeliA",
    "summary": "Class PoseHandheld_Float Fields TYPE_ID Declaration public static readonly int TYPE_ID Methods Animate(PoseCharacterRenderer) Perform the animation logic to the given character Declaration public override void Animate(PoseCharacterRenderer renderer) Overrides PoseAnimation.Animate(PoseCharacterRenderer) DrawTool(HandTool, PoseCharacterRenderer) Rendering the given handtool Declaration public override void DrawTool(HandTool tool, PoseCharacterRenderer renderer) Overrides HandheldPoseAnimation.DrawTool(HandTool, PoseCharacterRenderer)"
  },
  "api/AngeliA.Platformer.PoseHandheld_MagicPole.html": {
    "href": "api/AngeliA.Platformer.PoseHandheld_MagicPole.html",
    "title": "Class PoseHandheld_MagicPole | AngeliA",
    "summary": "Class PoseHandheld_MagicPole Fields TYPE_ID Declaration public static readonly int TYPE_ID Methods Animate(PoseCharacterRenderer) Perform the animation logic to the given character Declaration public override void Animate(PoseCharacterRenderer renderer) Overrides PoseAnimation.Animate(PoseCharacterRenderer) DrawTool(HandTool, PoseCharacterRenderer) Rendering the given handtool Declaration public override void DrawTool(HandTool tool, PoseCharacterRenderer renderer) Overrides HandheldPoseAnimation.DrawTool(HandTool, PoseCharacterRenderer)"
  },
  "api/AngeliA.Platformer.PoseHandheld_Polearm.html": {
    "href": "api/AngeliA.Platformer.PoseHandheld_Polearm.html",
    "title": "Class PoseHandheld_Polearm | AngeliA",
    "summary": "Class PoseHandheld_Polearm Fields TYPE_ID Declaration public static readonly int TYPE_ID Methods Animate(PoseCharacterRenderer) Perform the animation logic to the given character Declaration public override void Animate(PoseCharacterRenderer renderer) Overrides PoseAnimation.Animate(PoseCharacterRenderer) DrawTool(HandTool, PoseCharacterRenderer) Rendering the given handtool Declaration public override void DrawTool(HandTool tool, PoseCharacterRenderer renderer) Overrides HandheldPoseAnimation.DrawTool(HandTool, PoseCharacterRenderer)"
  },
  "api/AngeliA.Platformer.PoseHandheld_Shooting.html": {
    "href": "api/AngeliA.Platformer.PoseHandheld_Shooting.html",
    "title": "Class PoseHandheld_Shooting | AngeliA",
    "summary": "Class PoseHandheld_Shooting Fields TYPE_ID Declaration public static readonly int TYPE_ID Methods Animate(PoseCharacterRenderer) Perform the animation logic to the given character Declaration public override void Animate(PoseCharacterRenderer renderer) Overrides PoseAnimation.Animate(PoseCharacterRenderer) DrawTool(HandTool, PoseCharacterRenderer) Rendering the given handtool Declaration public override void DrawTool(HandTool tool, PoseCharacterRenderer renderer) Overrides HandheldPoseAnimation.DrawTool(HandTool, PoseCharacterRenderer)"
  },
  "api/AngeliA.Platformer.PoseHandheld_SingleHanded.html": {
    "href": "api/AngeliA.Platformer.PoseHandheld_SingleHanded.html",
    "title": "Class PoseHandheld_SingleHanded | AngeliA",
    "summary": "Class PoseHandheld_SingleHanded Fields TYPE_ID Declaration public static readonly int TYPE_ID Methods Animate(PoseCharacterRenderer) Perform the animation logic to the given character Declaration public override void Animate(PoseCharacterRenderer renderer) Overrides PoseAnimation.Animate(PoseCharacterRenderer) DrawTool(HandTool, PoseCharacterRenderer) Rendering the given handtool Declaration public override void DrawTool(HandTool tool, PoseCharacterRenderer renderer) Overrides HandheldPoseAnimation.DrawTool(HandTool, PoseCharacterRenderer)"
  },
  "api/AngeliA.Platformer.PoseHandheld_Throwing.html": {
    "href": "api/AngeliA.Platformer.PoseHandheld_Throwing.html",
    "title": "Class PoseHandheld_Throwing | AngeliA",
    "summary": "Class PoseHandheld_Throwing Fields TYPE_ID Declaration public static readonly int TYPE_ID Methods Animate(PoseCharacterRenderer) Perform the animation logic to the given character Declaration public override void Animate(PoseCharacterRenderer renderer) Overrides PoseAnimation.Animate(PoseCharacterRenderer) DrawTool(HandTool, PoseCharacterRenderer) Rendering the given handtool Declaration public override void DrawTool(HandTool tool, PoseCharacterRenderer renderer) Overrides HandheldPoseAnimation.DrawTool(HandTool, PoseCharacterRenderer)"
  },
  "api/AngeliA.Platformer.ProjectileWeapon-1.html": {
    "href": "api/AngeliA.Platformer.ProjectileWeapon-1.html",
    "title": "Class ProjectileWeapon<B> | AngeliA",
    "summary": "Class ProjectileWeapon<B> Weapon that shoot projectile to attack Implements IMapItem Type Parameters Name Description B Type of the bullet Properties AdditionalBulletSpeedForward Extra speed apply to forward direction Declaration protected virtual int AdditionalBulletSpeedForward { get; } AdditionalBulletSpeedSide Extra speed apply to side direction Declaration protected virtual int AdditionalBulletSpeedSide { get; } AngleSpeedDelta How multiple bullets spread when spawned at once Declaration public virtual int AngleSpeedDelta { get; } BulletCountInOneShot How many bullet does it shoot at once Declaration public virtual int BulletCountInOneShot { get; } BulletPivotY Bullet start position Y. (0 means bottom of character hitbox. 1000 means top of character hitbox) Declaration protected virtual int BulletPivotY { get; } ForceBulletCountNextShot Set this value to make \"BulletCountInOneShot\" different. Declaration protected int ForceBulletCountNextShot { get; set; } Methods SpawnBullet(Character) Spawn the bullet entity Declaration public override Bullet SpawnBullet(Character sender) Parameters Type Name Description Character sender Character that use the weapon Returns Type Description Bullet Instance of the spawned bullet entity. Return null when invalid Overrides Weapon.SpawnBullet(Character)"
  },
  "api/AngeliA.Platformer.RideableMovement.html": {
    "href": "api/AngeliA.Platformer.RideableMovement.html",
    "title": "Class RideableMovement | AngeliA",
    "summary": "Class RideableMovement Movement behavior for rideable vehicles Constructors RideableMovement(Rigidbody) Movement behavior for rideable vehicles Declaration public RideableMovement(Rigidbody rig) Methods InitializeMeta() Initialize config for the movement Declaration protected override void InitializeMeta() Overrides VehicleMovement.InitializeMeta()"
  },
  "api/AngeliA.Platformer.RideableVehicle-1.html": {
    "href": "api/AngeliA.Platformer.RideableVehicle-1.html",
    "title": "Class RideableVehicle<RM> | AngeliA",
    "summary": "Class RideableVehicle<RM> Vehicles that characters can ride on Implements IMapItem IDamageReceiver ICarrier IWithCharacterMovement Type Parameters Name Description RM Type of the movement behavior Constructors RideableVehicle() Declaration public RideableVehicle() Fields Navigation Navigation behavior for free wandering Declaration protected readonly RigidbodyNavigation Navigation Properties AllowFreeWandering True if the vehicle run around when not being drive Declaration protected virtual bool AllowFreeWandering { get; } StartDriveCooldown How long does it takes to ride again in frames Declaration public override int StartDriveCooldown { get; } Overrides Vehicle.StartDriveCooldown Methods BeforeUpdate() [2/4] This function is called every frame when entity is in stage. Prioritize using this function to update physics logic. Declaration public override void BeforeUpdate() Overrides Vehicle.BeforeUpdate() CheckForStartDrive(out Character) Update function for checking if a driver should start to drive Declaration protected override bool CheckForStartDrive(out Character driver) Returns Type Description bool True if any driver start to drive Overrides Vehicle.CheckForStartDrive(out Character) CheckForStopDrive() Update function for checking if the current driver should stop driving Declaration protected override bool CheckForStopDrive() Returns Type Description bool True if stop driving Overrides Vehicle.CheckForStopDrive() OnActivated() This function is called when entity enter the stage Declaration public override void OnActivated() Overrides Vehicle.OnActivated() OverrideDriverAnimation(PoseCharacterRenderer) Apply riding pose animation on driver Declaration protected virtual void OverrideDriverAnimation(PoseCharacterRenderer renderer) StopDrive() Stop current driver from driving this vehicle Declaration public override void StopDrive() Overrides Vehicle.StopDrive() Update() [3/4] This function is called every frame when entity is in stage. Prioritize using this function to update physics logic. Declaration public override void Update() Overrides Vehicle.Update()"
  },
  "api/AngeliA.Platformer.RigidbodyNavigation.html": {
    "href": "api/AngeliA.Platformer.RigidbodyNavigation.html",
    "title": "Class RigidbodyNavigation | AngeliA",
    "summary": "Class RigidbodyNavigation Behavior that handles auto movement for a target rigidbody Constructors RigidbodyNavigation(Rigidbody) Behavior that handles auto movement for a target rigidbody Declaration public RigidbodyNavigation(Rigidbody target) Fields Target Declaration public readonly Rigidbody Target Properties ClampInSpawnRect True if the target should only be inside the stage spawn rect Declaration public virtual bool ClampInSpawnRect { get; } DefaultFlySpeed Declaration public virtual int DefaultFlySpeed { get; } DefaultRunSpeed Declaration public virtual int DefaultRunSpeed { get; } EndFlyDistance Stop flying when distance between target ans aim position is smaller than this value Declaration public virtual int EndFlyDistance { get; } EndMoveDistance Stop moving when distance between target ans aim position is smaller than this value Declaration public virtual int EndMoveDistance { get; } EndMoveSlowDown Duration in frame for slowly stop moving Declaration public virtual int EndMoveSlowDown { get; } HasPerformableOperation True if there is still any operation to perform Declaration public bool HasPerformableOperation { get; } InstanceShift Position offset for distinguish multiple instance with same type Declaration public virtual int InstanceShift { get; } JumpSpeed Declaration public virtual int JumpSpeed { get; } MaxJumpDuration Declaration public virtual int MaxJumpDuration { get; } MinimumFlyDuration At least fly this frames long Declaration public virtual int MinimumFlyDuration { get; } NavigationAim Current target position this navigation want to go for Declaration public Int2 NavigationAim { get; set; } NavigationAimGrounded True if the aim position is touching ground Declaration public bool NavigationAimGrounded { get; set; } NavigationEnable True if this behavior should work currently Declaration public virtual bool NavigationEnable { get; } StartFlyDistance Start to fly when distance between target ans aim position is larger than this value Declaration public virtual int StartFlyDistance { get; } StartMoveDistance Start to move when distance between target ans aim position is larger than this value Declaration public virtual int StartMoveDistance { get; } TeleportWhenCantFly True if the target immediately goes to the aim position when they can not fly Declaration public virtual bool TeleportWhenCantFly { get; } Methods OnActivated() Declaration public virtual void OnActivated() PhysicsUpdate() Declaration public virtual void PhysicsUpdate() ResetNavigation() Declaration public void ResetNavigation() SetNavigationAim(Int2, bool) Set aim position in global space Declaration public void SetNavigationAim(Int2 newAim, bool grounded) bool grounded True if the new aim position is grounded"
  },
  "api/AngeliA.Platformer.RigidbodyNavigationState.html": {
    "href": "api/AngeliA.Platformer.RigidbodyNavigationState.html",
    "title": "Enum RigidbodyNavigationState | AngeliA",
    "summary": "Enum RigidbodyNavigationState Fields Name Description"
  },
  "api/AngeliA.Platformer.Shoes-2.html": {
    "href": "api/AngeliA.Platformer.Shoes-2.html",
    "title": "Class Shoes<P, N> | AngeliA",
    "summary": "Class Shoes<P, N> Armor on character's both foot Implements IMapItem IProgressiveItem Type Parameters Name Description P Type of the item this armor will become after take damage for once N Type of the item this armor will become after being repair for once Constructors Shoes() Declaration public Shoes() Properties EquipmentType Which type is this quipment Declaration public override sealed EquipmentType EquipmentType { get; } Overrides Equipment.EquipmentType Methods DrawArmor(PoseCharacterRenderer) Render the armor onto given character Declaration protected override void DrawArmor(PoseCharacterRenderer renderer) Overrides Armor<P, N>.DrawArmor(PoseCharacterRenderer)"
  },
  "api/AngeliA.Platformer.Slime.html": {
    "href": "api/AngeliA.Platformer.Slime.html",
    "title": "Class Slime | AngeliA",
    "summary": "Class Slime A slime type enemy that walks on ground/wall/ceilling Implements IMapItem IDamageReceiver ICarrier IWithCharacterMovement IWithCharacterAttackness IWithCharacterHealth IWithCharacterBuff IWithCharacterRenderer Properties AllowBeingPush True if this entity can be push by other Declaration public override bool AllowBeingPush { get; } Overrides Character.AllowBeingPush EjectWhenInsideGround True if this entity try to move out of ground automatically when it stuck inside ground Declaration public override bool EjectWhenInsideGround { get; } Overrides Character.EjectWhenInsideGround Rect Rect position of this entity in global space Declaration public override IRect Rect { get; } Overrides Rigidbody.Rect Methods FirstUpdate() [1/4] This function is called every frame when entity is in stage. Prioritize using this function to fill collider in to physics system. Declaration public override void FirstUpdate() Overrides Enemy.FirstUpdate() GroundedCheck() Function that holds the touching ground checking logic Declaration protected override bool GroundedCheck() Overrides Rigidbody.GroundedCheck() InsideGroundCheck() Function that holds the stuck inside ground checking logic Declaration protected override bool InsideGroundCheck() Overrides Character.InsideGroundCheck() OnActivated() This function is called when entity enter the stage Declaration public override void OnActivated() Overrides Enemy.OnActivated() OnCharacterRendered() This function is called after character is rendered Declaration public override void OnCharacterRendered() Overrides Character.OnCharacterRendered() OnDamaged(Damage) This function is called when character take damage Declaration public override void OnDamaged(Damage damage) Overrides Enemy.OnDamaged(Damage) Update() [3/4] This function is called every frame when entity is in stage. Prioritize using this function to update physics logic. Declaration public override void Update() Overrides Character.Update()"
  },
  "api/AngeliA.Platformer.Slope.html": {
    "href": "api/AngeliA.Platformer.Slope.html",
    "title": "Class Slope | AngeliA",
    "summary": "Class Slope Entity that have a 45° diagonal surface to interact with objects on stage Implements IMapItem IBlockEntity Properties CollisionMask Which physics layers is include for the hit check Declaration public virtual int CollisionMask { get; } DirectionHorizontal Left means ◿ or ◹, Right means ◺ or ◸ Declaration public abstract Direction2 DirectionHorizontal { get; } DirectionVertical Up means ◿ or ◺, Down means ◹ or ◸ Declaration public abstract Direction2 DirectionVertical { get; } Methods BeforeUpdate() [2/4] This function is called every frame when entity is in stage. Prioritize using this function to update physics logic. Declaration public override void BeforeUpdate() Overrides Entity.BeforeUpdate() FirstUpdate() [1/4] This function is called every frame when entity is in stage. Prioritize using this function to fill collider in to physics system. Declaration public override void FirstUpdate() Overrides Entity.FirstUpdate() LateUpdate() [4/4] This function is called every frame when entity is in stage. Prioritize using this function to render the entity. Declaration public override void LateUpdate() Overrides Entity.LateUpdate()"
  },
  "api/AngeliA.Platformer.Spring.html": {
    "href": "api/AngeliA.Platformer.Spring.html",
    "title": "Class Spring | AngeliA",
    "summary": "Class Spring Entity that bounce the touching targets Implements IMapItem ICarrier IBlockEntity IAutoTrackWalker IRouteWalker Properties AllowBeingPush True if this entity can be push by other Declaration public override bool AllowBeingPush { get; } Overrides Rigidbody.AllowBeingPush ArtworkRotation Current rotation of the artwork sprite Declaration public int ArtworkRotation { get; set; } BounceWhenInsideGround True if the spring perform bounce when stuck inside ground Declaration protected virtual bool BounceWhenInsideGround { get; } Horizontal True if the spring bounce horizontaly Declaration protected abstract bool Horizontal { get; } PhysicalLayer Which physical layer should this entity fill it's collider in Declaration public override int PhysicalLayer { get; } Overrides Rigidbody.PhysicalLayer Power Initial speed this spring gives when bounce Declaration protected abstract int Power { get; } Methods BeforeUpdate() [2/4] This function is called every frame when entity is in stage. Prioritize using this function to update physics logic. Declaration public override void BeforeUpdate() Overrides Entity.BeforeUpdate() LateUpdate() [4/4] This function is called every frame when entity is in stage. Prioritize using this function to render the entity. Declaration public override void LateUpdate() Overrides Entity.LateUpdate() OnActivated() This function is called when entity enter the stage Declaration public override void OnActivated() Overrides Rigidbody.OnActivated()"
  },
  "api/AngeliA.Platformer.StepTriggerPlatform.html": {
    "href": "api/AngeliA.Platformer.StepTriggerPlatform.html",
    "title": "Class StepTriggerPlatform | AngeliA",
    "summary": "Class StepTriggerPlatform Platform that triggers when target step on it Implements IMapItem IBlockEntity IUnitable ICircuitOperator Properties TriggerOnCharacterTouch True if characters can trigger this platform Declaration protected virtual bool TriggerOnCharacterTouch { get; } TriggerOnPlayerTouch True if selecting player can trigger this platform Declaration protected virtual bool TriggerOnPlayerTouch { get; } TriggerOnRigidbodyTouch True if rigidbody can trigger this platform Declaration protected virtual bool TriggerOnRigidbodyTouch { get; } Methods OnCharacterTouched(Character) This function is called when a character touchs this platform Declaration protected override void OnCharacterTouched(Character character) Overrides Platform.OnCharacterTouched(Character) OnPlayerTouched(Character) This function is called when the selecting player touchs this platform Declaration protected override void OnPlayerTouched(Character player) Overrides Platform.OnPlayerTouched(Character) OnRigidbodyTouched(Rigidbody) This function is called when a rigidbody touchs this platform Declaration protected override void OnRigidbodyTouched(Rigidbody rig) Overrides Platform.OnRigidbodyTouched(Rigidbody)"
  },
  "api/AngeliA.Platformer.Summon.html": {
    "href": "api/AngeliA.Platformer.Summon.html",
    "title": "Class Summon | AngeliA",
    "summary": "Class Summon Represent a character that summoned by another character Implements IMapItem ICarrier IWithCharacterMovement IWithCharacterAttackness IWithCharacterHealth IWithCharacterBuff IWithCharacterRenderer IDamageReceiver IActionTarget Constructors Summon() Declaration public Summon() Properties AllowBeingPush True if this entity can be push by other Declaration public override bool AllowBeingPush { get; } Overrides Character.AllowBeingPush AllowRescueWhenPassout True if the owner can bring back this character after it passout Declaration public virtual bool AllowRescueWhenPassout { get; } AttackTargetTeam Target team for dealing damage to other Declaration public override int AttackTargetTeam { get; } Overrides Character.AttackTargetTeam CarryOtherOnTop Trhe if this entity can carry other ICarrier on top Declaration public override bool CarryOtherOnTop { get; } Overrides Character.CarryOtherOnTop Navigation Behavior object to handle auto movement of this character Declaration public SummonNavigation Navigation { get; init; } Owner The character that summons this character Declaration public Character Owner { get; set; } RequireOwner True if this character despawn when owner is null or inactivated Declaration public virtual bool RequireOwner { get; } Team Target team for taking damage from other Declaration public override int Team { get; } Overrides Character.Team Methods CreateNativeAttackness() Create new instance for character's intrinsic attackness behaviour Declaration protected override CharacterAttackness CreateNativeAttackness() Overrides Character.CreateNativeAttackness() CreateSummon(Character, int, int, int, bool) Declaration public static Summon CreateSummon(Character owner, int typeID, int x, int y, bool forceCreate = false) Parameters Type Name Description Character owner Instance of the summon's owner int typeID Type of the summon int x Position in global space to put this summon int y Position in global space to put this summon bool forceCreate True if take an existing summon in same type and owner to summon it again Returns Type Description Summon Instance of the summoned character CreateSummonNavigation() Declaration protected virtual SummonNavigation CreateSummonNavigation() CreateSummon<T>(Character, int, int, bool) Declaration public static T CreateSummon<T>(Character owner, int x, int y, bool forceCreate = false) where T : Summon Parameters Type Name Description Character owner Instance of the summon's owner int x Position in global space to put this summon int y Position in global space to put this summon bool forceCreate True if take an existing summon in same type and owner to summon it again Returns Type Description T Instance of the summoned character Type Parameters Name Description T Type of the summon FirstUpdate() [1/4] This function is called every frame when entity is in stage. Prioritize using this function to fill collider in to physics system. Declaration public override void FirstUpdate() Overrides Character.FirstUpdate() LateUpdate() [4/4] This function is called every frame when entity is in stage. Prioritize using this function to render the entity. Declaration public override void LateUpdate() Overrides Character.LateUpdate() OnActivated() This function is called when entity enter the stage Declaration public override void OnActivated() Overrides Character.OnActivated() OnDamaged(Damage) This function is called when character take damage Declaration public override void OnDamaged(Damage damage) Overrides Character.OnDamaged(Damage) OnInactivated() This function is called when entity leave the stage Declaration public override void OnInactivated() Overrides Character.OnInactivated() OnSummoned(bool) This function is called when the character is being summoned Declaration public virtual void OnSummoned(bool create) Parameters Type Name Description bool create True if this character was not on stage before being summon SetCharacterState(CharacterState) Set character's general game state, ignore when state already is the current one Declaration public override void SetCharacterState(CharacterState state) Overrides Character.SetCharacterState(CharacterState) Update() [3/4] This function is called every frame when entity is in stage. Prioritize using this function to update physics logic. Declaration public override void Update() Overrides Character.Update()"
  },
  "api/AngeliA.Platformer.SummonItem-1.html": {
    "href": "api/AngeliA.Platformer.SummonItem-1.html",
    "title": "Class SummonItem<T> | AngeliA",
    "summary": "Class SummonItem<T> Item that create summon character when carry in inventory Implements IMapItem Type Parameters Name Description T Type of the summon character Properties MaxStackCount Count limitation for multiple items inside one inventory slot Declaration public override int MaxStackCount { get; } Overrides Item.MaxStackCount Methods OnItemUpdate_FromInventory(Character, int, int) This function is called every frame when this item is in an holder's inventory Declaration public override void OnItemUpdate_FromInventory(Character holder, int inventoryID, int itemIndex) Parameters Type Name Description Character holder The holder of the inventory int inventoryID ID of the inventory Overrides Item.OnItemUpdate_FromInventory(Character, int, int) SpawnSummonFromItem(Character) Spawn the target summon character Declaration public T SpawnSummonFromItem(Character owner)"
  },
  "api/AngeliA.Platformer.SummonNavigation.html": {
    "href": "api/AngeliA.Platformer.SummonNavigation.html",
    "title": "Class SummonNavigation | AngeliA",
    "summary": "Class SummonNavigation Behavior to handle auto movement for a summon character Constructors SummonNavigation(Summon) Behavior to handle auto movement for a summon character Declaration public SummonNavigation(Summon target) Properties ClampInSpawnRect True if the target should only be inside the stage spawn rect Declaration public override bool ClampInSpawnRect { get; } Overrides RigidbodyNavigation.ClampInSpawnRect EndFlyDistance Stop flying when distance between target ans aim position is smaller than this value Declaration public override int EndFlyDistance { get; } Overrides RigidbodyNavigation.EndFlyDistance EndMoveDistance Stop moving when distance between target ans aim position is smaller than this value Declaration public override int EndMoveDistance { get; } Overrides RigidbodyNavigation.EndMoveDistance InstanceShift Position offset for distinguish multiple instance with same type Declaration public override int InstanceShift { get; } Overrides RigidbodyNavigation.InstanceShift IsFollowingOwner True if the summon following the owner Declaration public bool IsFollowingOwner { get; } IsWandering True if the summon move along a given position Declaration public bool IsWandering { get; } JumpSpeed Declaration public override int JumpSpeed { get; } Overrides RigidbodyNavigation.JumpSpeed MaxJumpDuration Declaration public override int MaxJumpDuration { get; } Overrides RigidbodyNavigation.MaxJumpDuration MinimumFlyDuration At least fly this frames long Declaration public override int MinimumFlyDuration { get; } Overrides RigidbodyNavigation.MinimumFlyDuration NavigationEnable True if this behavior should work currently Declaration public override bool NavigationEnable { get; } Overrides RigidbodyNavigation.NavigationEnable StartFlyDistance Start to fly when distance between target ans aim position is larger than this value Declaration public override int StartFlyDistance { get; } Overrides RigidbodyNavigation.StartFlyDistance StartMoveDistance Start to move when distance between target ans aim position is larger than this value Declaration public override int StartMoveDistance { get; } Overrides RigidbodyNavigation.StartMoveDistance Methods MakeFollowOwner() Declaration public void MakeFollowOwner() MakeWander(int, int) Make the summon move along with given position in global space Declaration public void MakeWander(int x, int y) MakeWander<E>() Make the summon find a given type of entity on stage and move along at it's position Declaration public bool MakeWander<E>() where E : Entity Returns Type Description bool True if the target founded OnActivated() Declaration public override void OnActivated() Overrides RigidbodyNavigation.OnActivated() PhysicsUpdate() Declaration public override void PhysicsUpdate() Overrides RigidbodyNavigation.PhysicsUpdate() Refresh() Declaration public void Refresh()"
  },
  "api/AngeliA.Platformer.Table.html": {
    "href": "api/AngeliA.Platformer.Table.html",
    "title": "Class Table | AngeliA",
    "summary": "Class Table Furniture that functions as a horizontal expanding table Implements IMapItem IBlockEntity Properties ModuleType Which direction does this entity expand as map block. (eg. Beds goes horizontaly. Fridge goes verticaly) Declaration protected override sealed Direction3 ModuleType { get; } Overrides Furniture.ModuleType"
  },
  "api/AngeliA.Platformer.TechGlitchEffectScope.html": {
    "href": "api/AngeliA.Platformer.TechGlitchEffectScope.html",
    "title": "Struct TechGlitchEffectScope | AngeliA",
    "summary": "Struct TechGlitchEffectScope Implements IDisposable Constructors TechGlitchEffectScope() Declaration public TechGlitchEffectScope() TechGlitchEffectScope(int, Color32) Declaration public TechGlitchEffectScope(int range, Color32 tint = default) Methods Dispose() Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources. Declaration public void Dispose()"
  },
  "api/AngeliA.Platformer.TeleportTask.html": {
    "href": "api/AngeliA.Platformer.TeleportTask.html",
    "title": "Class TeleportTask | AngeliA",
    "summary": "Class TeleportTask Task for handle logic during player teleport Properties Duration Teleport takes this frames long to finish Declaration public int Duration { get; set; } TeleportFrom Teleport from this position in global space Declaration public Int2 TeleportFrom { get; set; } TeleportTo Teleport to this position in global space Declaration public Int3 TeleportTo { get; set; } UseParallax True if use the map layer parallax effect during teleport Declaration public bool UseParallax { get; set; } UseVignette True if use the vignette effect during teleport Declaration public bool UseVignette { get; set; } WaitDuration Teleport actually start after wait this frames long Declaration public int WaitDuration { get; set; } Methods FrameUpdate() This function is used to handle the internal logic. Declaration public override TaskResult FrameUpdate() Returns Type Description TaskResult \"Continue\" if the task should keep on after this frame. \"End\" if the task should end. Overrides Task.FrameUpdate() OnStart() This function is called when this task start Declaration public override void OnStart() Overrides Task.OnStart() TeleportFromDoor(int, int, int, int, int) Make a teleport for selecting player by using a door Declaration public static TeleportTask TeleportFromDoor(int fromX, int fromY, int toX, int toY, int toZ) Parameters Type Name Description int fromX (in global space) int fromY (in global space) int toX (in global space) int toY (in global space) Returns Type Description TeleportTask Global single instance of the task unit TeleportFromPortal(int, int, int, int, int, bool) Make a teleport for selecting player by using a portal Declaration public static TeleportTask TeleportFromPortal(int fromX, int fromY, int toX, int toY, int toZ, bool samePosition) Parameters Type Name Description int fromX (in global space) int fromY (in global space) int toX (in global space) int toY (in global space) Returns Type Description TeleportTask Global single instance of the task unit"
  },
  "api/AngeliA.Platformer.Tornado.html": {
    "href": "api/AngeliA.Platformer.Tornado.html",
    "title": "Class Tornado | AngeliA",
    "summary": "Class Tornado Entity that move in given speed and carry objects it touch Implements IMapItem Properties ArtworkPart Artwork sprite for rendering Declaration protected virtual SpriteCode ArtworkPart { get; } StiffFrameGap How frequently does it shakes the target left and right. Declaration protected virtual int StiffFrameGap { get; } StrengthGrounded Sucking power when touching ground. 0 means no power, 1000 means general power. Declaration protected virtual int StrengthGrounded { get; } StrengthInAir Sucking power when not touching ground. 0 means no power, 1000 means general power. Declaration protected virtual int StrengthInAir { get; } Velocity Target moving speed Declaration protected abstract Int2 Velocity { get; } Methods BeforeUpdate() [2/4] This function is called every frame when entity is in stage. Prioritize using this function to update physics logic. Declaration public override void BeforeUpdate() Overrides Entity.BeforeUpdate() LateUpdate() [4/4] This function is called every frame when entity is in stage. Prioritize using this function to render the entity. Declaration public override void LateUpdate() Overrides Entity.LateUpdate() OnActivated() This function is called when entity enter the stage Declaration public override void OnActivated() Overrides Entity.OnActivated()"
  },
  "api/AngeliA.Platformer.Track.html": {
    "href": "api/AngeliA.Platformer.Track.html",
    "title": "Class Track | AngeliA",
    "summary": "Class Track Entity that make IAutoTrackWalker walks along it Implements IMapItem IBlockEntity Properties AllowStraightConnection True if tracks can connect straight directions Declaration protected virtual bool AllowStraightConnection { get; } AllowTiltConnection True if tracks can connect from diagonal directions Declaration protected virtual bool AllowTiltConnection { get; } BodySprite Artwork sprite for rendering the body Declaration protected abstract SpriteCode BodySprite { get; } BodyTiltSprite Artwork sprite for rendering the tilted body Declaration protected abstract SpriteCode BodyTiltSprite { get; } CenterSprite Artwork sprite for rendering the center knob Declaration protected abstract SpriteCode CenterSprite { get; } HangGap Position offset Y for targets on it Declaration protected virtual int HangGap { get; } LoadItemFromMapElement True if map element overlapping will be spawned Declaration protected virtual bool LoadItemFromMapElement { get; } SlowDownWhenWalkerOverlap True if one of the targets slow down when overlap each other Declaration protected virtual bool SlowDownWhenWalkerOverlap { get; } Speed Speed of the targets on it Declaration protected virtual int Speed { get; } TurnBackWhenReachEnd True if targets turn back when walks into edge Declaration protected virtual bool TurnBackWhenReachEnd { get; } Methods BeforeUpdate() [2/4] This function is called every frame when entity is in stage. Prioritize using this function to update physics logic. Declaration public override void BeforeUpdate() Overrides Entity.BeforeUpdate() FirstUpdate() [1/4] This function is called every frame when entity is in stage. Prioritize using this function to fill collider in to physics system. Declaration public override void FirstUpdate() Overrides Entity.FirstUpdate() IsConnected(Direction8) True if there is track connecting to given direction Declaration public bool IsConnected(Direction8 direction) LateUpdate() [4/4] This function is called every frame when entity is in stage. Prioritize using this function to render the entity. Declaration public override void LateUpdate() Overrides Entity.LateUpdate() OnActivated() This function is called when entity enter the stage Declaration public override void OnActivated() Overrides Entity.OnActivated() OnEntityRefresh() This function is called when there are map changes happens nearby and the entity needs to refresh itself Declaration public void OnEntityRefresh() OnWalking(IAutoTrackWalker) This function is called when a walker is walking on the track Declaration protected virtual void OnWalking(IAutoTrackWalker walker)"
  },
  "api/AngeliA.Platformer.TrapDoor.html": {
    "href": "api/AngeliA.Platformer.TrapDoor.html",
    "title": "Class TrapDoor | AngeliA",
    "summary": "Class TrapDoor Entity that drops characters on top when getting step on Implements IMapItem IBlockEntity ICircuitOperator Properties IsOpening True if the door is currently opening Declaration public bool IsOpening { get; set; } LastSwitchFrame Last time this door switch state in frame Declaration public int LastSwitchFrame { get; } OpenDelay Frames between target step on and get trigger Declaration public virtual int OpenDelay { get; } OpenDuration How long does the door stay open before closed again Declaration public virtual int OpenDuration { get; } TriggerByCircuit True if trap door get trigger by circuit system Declaration public virtual bool TriggerByCircuit { get; } TriggerWhenStepOn True if trap door get trigger when target step on Declaration public virtual bool TriggerWhenStepOn { get; } Methods BeforeUpdate() [2/4] This function is called every frame when entity is in stage. Prioritize using this function to update physics logic. Declaration public override void BeforeUpdate() Overrides Entity.BeforeUpdate() Close() Make the door close Declaration public virtual void Close() FirstUpdate() [1/4] This function is called every frame when entity is in stage. Prioritize using this function to fill collider in to physics system. Declaration public override void FirstUpdate() Overrides Entity.FirstUpdate() HitCheck() Return true when the door is step on Declaration protected virtual bool HitCheck() OnActivated() This function is called when entity enter the stage Declaration public override void OnActivated() Overrides Entity.OnActivated() Open() Make the door open Declaration public virtual void Open()"
  },
  "api/AngeliA.Platformer.TriggerablePlatform.html": {
    "href": "api/AngeliA.Platformer.TriggerablePlatform.html",
    "title": "Class TriggerablePlatform | AngeliA",
    "summary": "Class TriggerablePlatform Platform that can be trigger and perform some specified logic Implements IMapItem IBlockEntity IUnitable ICircuitOperator Properties AllowMultipleTrigger True if a triggered platform can be trigger again Declaration protected virtual bool AllowMultipleTrigger { get; } LastTriggerFrame Declaration public int LastTriggerFrame { get; } TriggerMode How does the platforms get trigger in a group Declaration protected virtual IUnitable.UniteMode TriggerMode { get; } TriggeredData Custom data from the trigger function. Declaration protected object TriggeredData { get; set; } Methods OnActivated() This function is called when entity enter the stage Declaration public override void OnActivated() Overrides Platform.OnActivated() OnTriggered(object) This function is called when the platform is triggered Declaration protected virtual void OnTriggered(object data) Parameters Type Name Description object data Custom data. Use TriggerablePlatform.TriggeredData to get this value Trigger(object) Trigger the platform Declaration public virtual void Trigger(object data = null) Parameters Type Name Description object data Custom data"
  },
  "api/AngeliA.Platformer.Vehicle-1.html": {
    "href": "api/AngeliA.Platformer.Vehicle-1.html",
    "title": "Class Vehicle<M> | AngeliA",
    "summary": "Class Vehicle<M> Entity that allow characters to drive with Implements IMapItem IDamageReceiver ICarrier IWithCharacterMovement Type Parameters Name Description M Type of the movement Constructors Vehicle() Declaration public Vehicle()"
  },
  "api/AngeliA.Platformer.Vehicle.html": {
    "href": "api/AngeliA.Platformer.Vehicle.html",
    "title": "Class Vehicle | AngeliA",
    "summary": "Class Vehicle Entity that allow characters to drive with Implements IMapItem IDamageReceiver ICarrier IWithCharacterMovement Properties AirDragX Amount of horizontal speed lost every frame Declaration public override int AirDragX { get; } Overrides Rigidbody.AirDragX AirDragY Amount of vertical speed lost every frame Declaration public override int AirDragY { get; } Overrides Rigidbody.AirDragY CarryOtherOnTop Trhe if this entity can carry other ICarrier on top Declaration public override bool CarryOtherOnTop { get; } Overrides Rigidbody.CarryOtherOnTop Driver Character that driving this vehcle. Null when no driver. Declaration public Character Driver { get; } DriverLeaveLocalPosition Position from the vehcile to driver when they leave Declaration public virtual Int2? DriverLeaveLocalPosition { get; } DriverLocalPosition Position from the vehcile to driver Declaration public virtual Int2? DriverLocalPosition { get; } FacingRight True if this entity is facing right side Declaration public override bool FacingRight { get; } Overrides Rigidbody.FacingRight FillPyhsicsForDriver True if driver fill physics collider Declaration public virtual bool FillPyhsicsForDriver { get; } LastDriveChangedFrame Last time driving state change in global frame. Declaration public int LastDriveChangedFrame { get; } Movement Movement that override to the driver Declaration public VehicleMovement Movement { get; protected set; } PhysicalLayer Which physical layer should this entity fill it's collider in Declaration public override int PhysicalLayer { get; } Overrides Rigidbody.PhysicalLayer SelfCollisionMask Intrinsic physics layers this entity should collide with Declaration public override int SelfCollisionMask { get; } Overrides Rigidbody.SelfCollisionMask StartDriveCooldown How long does it takes to ride again in frames Declaration public virtual int StartDriveCooldown { get; } Methods BeforeUpdate() [2/4] This function is called every frame when entity is in stage. Prioritize using this function to update physics logic. Declaration public override void BeforeUpdate() Overrides Entity.BeforeUpdate() CheckForStartDrive(out Character) Update function for checking if a driver should start to drive Declaration protected virtual bool CheckForStartDrive(out Character driver) Returns Type Description bool True if any driver start to drive CheckForStopDrive() Update function for checking if the current driver should stop driving Declaration protected virtual bool CheckForStopDrive() Returns Type Description bool True if stop driving FirstUpdate() [1/4] This function is called every frame when entity is in stage. Prioritize using this function to fill collider in to physics system. Declaration public override void FirstUpdate() Overrides Rigidbody.FirstUpdate() OnActivated() This function is called when entity enter the stage Declaration public override void OnActivated() Overrides Rigidbody.OnActivated() OnDamaged(Damage) This function is called when vehicle take damage Declaration public virtual void OnDamaged(Damage damage) StartDrive(Character) Make driver start to drive this vehcile Declaration public virtual void StartDrive(Character driver) StopDrive() Stop current driver from driving this vehicle Declaration public virtual void StopDrive() TakeDriver() Make driver move with the vehicle Declaration protected virtual void TakeDriver() Update() [3/4] This function is called every frame when entity is in stage. Prioritize using this function to update physics logic. Declaration public override void Update() Overrides Rigidbody.Update()"
  },
  "api/AngeliA.Platformer.VehicleMovement.html": {
    "href": "api/AngeliA.Platformer.VehicleMovement.html",
    "title": "Class VehicleMovement | AngeliA",
    "summary": "Class VehicleMovement Movement behavior for vehicle override to their driver Constructors VehicleMovement(Rigidbody) Declaration public VehicleMovement(Rigidbody rig) Properties Driver Target character that drive the vehicle Declaration public Character Driver { get; set; } SyncFromConfigFile Does movement config sync with json file in game universe folder Declaration public override sealed bool SyncFromConfigFile { get; } Overrides CharacterMovement.SyncFromConfigFile Methods Crash() Perform crash (call this once when crash start) Declaration public override void Crash() Overrides CharacterMovement.Crash() Dash() Perform dash (call this once when dash start) Declaration public override void Dash() Overrides CharacterMovement.Dash() HoldJump(bool) Is character holding jump (call this every frame no matter character is jumpping or not) Declaration public override void HoldJump(bool holding) Overrides CharacterMovement.HoldJump(bool) InitializeMeta() Initialize config for the movement Declaration protected virtual void InitializeMeta() Jump(bool) Perform jump (call this once when jump start) Declaration public override void Jump(bool isSquatJump = false) Parameters Type Name Description bool isSquatJump Is this jump a squat jump or not Overrides CharacterMovement.Jump(bool) Move(Direction3, Direction3, bool) Move the character Declaration public override void Move(Direction3 x, Direction3 y, bool walk = false) bool walk True if character want to walk instead of run Overrides CharacterMovement.Move(Direction3, Direction3, bool) Pound() Perform pound (call this once when pound start) Declaration public override void Pound() Overrides CharacterMovement.Pound() Rush() Perform rush (call this once when rush start) Declaration public override void Rush() Overrides CharacterMovement.Rush() Stop() Stop current movement Declaration public override void Stop() Overrides CharacterMovement.Stop()"
  },
  "api/AngeliA.Platformer.Wallpaper.html": {
    "href": "api/AngeliA.Platformer.Wallpaper.html",
    "title": "Class Wallpaper | AngeliA",
    "summary": "Class Wallpaper Entity that load from map and keep exists to rendering the content between sky and map-behind layer. Implements IMapItem Properties Amount Current weight of this wallpaper Declaration protected int Amount { get; } Methods BeforeUpdate() [2/4] This function is called every frame when entity is in stage. Prioritize using this function to update physics logic. Declaration public override void BeforeUpdate() Overrides Entity.BeforeUpdate() DrawBackground(IRect) Use this function to handle the rendering logic Declaration protected abstract void DrawBackground(IRect backgroundRect) Parameters Type Name Description IRect backgroundRect Range in global space this wallpaper need to render in GetSkyTint(int) Get sky tint at given Y position Declaration protected Color32 GetSkyTint(int y) Parameters Type Name Description int y (in global space) LateUpdate() [4/4] This function is called every frame when entity is in stage. Prioritize using this function to render the entity. Declaration public override sealed void LateUpdate() Overrides Entity.LateUpdate() OnActivated() This function is called when entity enter the stage Declaration public override void OnActivated() Overrides Entity.OnActivated() Update() [3/4] This function is called every frame when entity is in stage. Prioritize using this function to update physics logic. Declaration public override void Update() Overrides Entity.Update()"
  },
  "api/AngeliA.Platformer.Wardrobe.html": {
    "href": "api/AngeliA.Platformer.Wardrobe.html",
    "title": "Class Wardrobe | AngeliA",
    "summary": "Class Wardrobe Furniture that functions as a vertical expanding wardrobe Implements IMapItem IBlockEntity IActionTarget Properties InventoryColumn Column count of the inventory UI Declaration protected override int InventoryColumn { get; } Overrides InventoryFurniture.InventoryColumn InventoryRow Row count of the inventory UI Declaration protected override int InventoryRow { get; } Overrides InventoryFurniture.InventoryRow ModuleType Which direction does this entity expand as map block. (eg. Beds goes horizontaly. Fridge goes verticaly) Declaration protected override sealed Direction3 ModuleType { get; } Overrides Furniture.ModuleType"
  },
  "api/AngeliA.Platformer.html": {
    "href": "api/AngeliA.Platformer.html",
    "title": "Namespace AngeliA.Platformer | AngeliA",
    "summary": "Namespace AngeliA.Platformer Classes ActionFurniture Furniture that allows the user to perform given logic as IActionTarget Armor<P, N> Equipment as body protection ArrowBullet Bullet entity that spawns an item when destroy ArrowBullet<I> Bullet entity that spawns an item when destroy AuraItem<B> Item that broadcast given buff to nearby object when being put into inventory BarrelMovement Movement for rolling on a barrel BarrelVehicle A barrel that roll to opposite direction when character walk on it BeamBullet A type of bullet that shoot into straight line Bed Furniture that player can sleep on and gain the reward from full-asleep BodyArmor<P, N> Armor on body of the character Breakable Entity that can be break by taking damage BulletShooter Entity that shoot given bullet repeatedly BulletShooter<B> Entity that shoot given bullet repeatedly Burner<F> Entity that spawn a file entity repeately CabinetIdol Furniture that show an idol statue on it CameraAutoDirection Path indicator for the CameraAutoScroll CameraAutoScroll Camera control entity that makes the camera follows a given path CameraGate Entity that perform extra controls to the in-game camera movement CameraGateDown Camera gate that clamp camera to down side CameraGateLeft Camera gate that clamp camera to left side CameraGateRight Camera gate that clamp camera to right side CameraGateUp Camera gate that clamp camera to up side CarryingPipe This entity carry the player when they get in ChainCrusher Entity holds a rotating chained ball to attack player Chair Furniture that makes the player sit on CheckAltar Entity that function as a check point. Can also use to unlock a type of check point. CheckAltar<CP> Entity that function as a check point. Can also use to unlock a type of check point. CheckPoint Entity that save player position when player touchs. When game restart, player spawns to the saved position. CheckPointPortal Portal that telepart player to target check point CircleFlamePortal Portal that looks like magic thing circling around Clock Furniture that display the current in-game time Collectable Entity that get collect when player touchs Conveyor Entity that move the objects on top horizontaly CraftingTable Furniture that allow the player to combine items into another item CraftingUI UI for the crafting table DollItem Item that draw a doll sprite onto character's hip when carry inside inventory DonutBlock Entity that drops when being step on for a well Door Entity that teleport player into next-front/behind layer of the map Enemy Characters that attack the player Explosion General representation of an explosion ExplosiveMovableBullet Movable bullet that spawn an explosion entity when despawn Fire Entity that burns on target ICombustible FireSprinkler Furniture that detect and put out fire automatically FloatingCombatText Displays text information with flowing up movement. FrozenZone Entity that freeze nearby buff carriers Furniture Entity that function as a furniture Gloves<P, N> Armor on character's both hands GrandfatherClock Furniture that works as a combustible and verticaly expanding GrandfatherClock HealBullet Bullet that heal a target Character. Use \"Damage\" to adjust how much does it heals. HealWeapon<B> Weapon that shoot bullet to heal friendly forces Helmet<P, N> Armor on character's head InventoryFurniture A type of furniture that player can put items inside InventoryFurniture<UI> A type of furniture that player can put items inside ItemBasedSummon Summon character that summons when other characters put the origin item in their inventory Launcher Entity that spawn a given target entity repeately Leaf Represent a breakable leaf on stage Light Furniture that give illuminate from 6:00 to 18:00 during in-game time Liquid Entity that behave like liquid in AngeliA style MapChest Furniture that allow the player to spawn a chain of items from map element below MeleeBullet An invisible bullet created by melee weapon MeleeWeapon Weapon that spawn invisible bullet that follows the character MiniGame A game that user can play with an extra in-game window MiniGameTask Task to make gameplay occupied during minigame playing MissileBullet A bullet that find and follow a target to attack them MissileWeapon<B> Weapon that shoot a missile to attack MomentumBooster Entity that force character on top run in given direction or their current facing direction MovableBullet A bullet that moves after being spawned Navigation Core system for navigate a platformer entity to move naturally OnCheckPointTouched_CheckPoint_CharacterAttribute The function will be called when a check point entity touched by player OnFirePutOut_IntTypeID_IRectAttribute The function will be called when a fire entity is put out OnMiniGameGiveBadge_IntQuality The function will be called when mini game give reward to player Oneway Entity that do not allow rigidbody pass through on given direction OpenableFurniture Furniture that opens when player triggers OpeningTask Task that handles the logic for game restart Plant Represent a breakable plant on stage Platform A moving entity that carry things on top PlatformerUtil Utility class for platformer package Portal Entity that teleport player to any given position when player touchs PoseAnimation_PhotoPose PoseAnimation_Ride PoseAnimation_Sit PoseAnimation_SlidingSit PoseAnimation_SlidingSitHigh PoseAttack_Bow PoseAttack_Float PoseAttack_Hand PoseAttack_MagicPole PoseAttack_MagicSingleHanded PoseAttack_Polearm PoseAttack_Scratch PoseAttack_Shooting PoseAttack_WaveDoubleHanded PoseAttack_WaveDoubleHanded_SmashOnly PoseAttack_WaveEachHand PoseAttack_WaveEachHand_SmashOnly PoseAttack_WavePolearm PoseAttack_WavePolearm_SmashOnly PoseAttack_WaveSingleHanded PoseAttack_WaveSingleHanded_SmashOnly PoseHandheld_Bow PoseHandheld_DoubleHanded PoseHandheld_EachHand PoseHandheld_Float PoseHandheld_MagicPole PoseHandheld_Polearm PoseHandheld_Shooting PoseHandheld_SingleHanded PoseHandheld_Throwing ProjectileWeapon<B> Weapon that shoot projectile to attack RideableMovement Movement behavior for rideable vehicles RideableVehicle<RM> Vehicles that characters can ride on RigidbodyNavigation Behavior that handles auto movement for a target rigidbody Shoes<P, N> Armor on character's both foot Slime A slime type enemy that walks on ground/wall/ceilling Slope Entity that have a 45° diagonal surface to interact with objects on stage Spring Entity that bounce the touching targets StepTriggerPlatform Platform that triggers when target step on it Summon Represent a character that summoned by another character SummonItem<T> Item that create summon character when carry in inventory SummonNavigation Behavior to handle auto movement for a summon character Table Furniture that functions as a horizontal expanding table Tornado Entity that move in given speed and carry objects it touch Track Entity that make IAutoTrackWalker walks along it TrapDoor Entity that drops characters on top when getting step on TriggerablePlatform Platform that can be trigger and perform some specified logic Vehicle Entity that allow characters to drive with VehicleMovement Movement behavior for vehicle override to their driver Vehicle<M> Entity that allow characters to drive with Wallpaper Entity that load from map and keep exists to rendering the content between sky and map-behind layer. Wardrobe Furniture that functions as a vertical expanding wardrobe Structs Navigation.Operation Data for a single step of navigation operation Interfaces IAutoTrackWalker Interace that provide logic for auto walking on tracks IPingPongWalker Interface that makes object auto walks and turn around when collide on a solid block. (like Goomba in Mario games) IRider Interface to mark an entity as can be ride by characters IUnitable Map blocks that connect to each other and forms a group Enums DonutBlock.BreakMode How this entity broke HelmetWearingMode How an helmet wear on head IUnitable.UniteMode Which direction will be connected NavigationOperateMotion Type of navigation motion for a single step"
  },
  "api/AngeliA.PlayerMenuItem-1.html": {
    "href": "api/AngeliA.PlayerMenuItem-1.html",
    "title": "Class PlayerMenuItem<UI> | AngeliA",
    "summary": "Class PlayerMenuItem<UI> A type of item that spawns a player partner menu when use Implements IMapItem Type Parameters Name Description UI What type of menu does it spawns Constructors PlayerMenuItem() Declaration public PlayerMenuItem() Properties Column Inventory column count of the menu Declaration protected abstract int Column { get; } MaxStackCount Count limitation for multiple items inside one inventory slot Declaration public override int MaxStackCount { get; } Overrides Item.MaxStackCount Row Inventory row count of the menu Declaration protected abstract int Row { get; } Methods CanUse(Character) True if this item can be use at current frame Declaration public override bool CanUse(Character character) Overrides Item.CanUse(Character) OnPanelOpened(UI) This function is called when the menu is spawned Declaration protected virtual void OnPanelOpened(UI panelUI) Parameters Type Name Description UI panelUI Instance of the menu Use(Character, int, int, out bool) Perform the logic when the item get used Declaration public override bool Use(Character character, int inventoryID, int itemIndex, out bool consume) int inventoryID Inventory ID of this holder int itemIndex Index of this item inside the inventory bool consume True if the item should disappear after being used Returns Type Description bool True if the item is used Overrides Item.Use(Character, int, int, out bool)"
  },
  "api/AngeliA.PlayerMenuPartnerUI.html": {
    "href": "api/AngeliA.PlayerMenuPartnerUI.html",
    "title": "Class PlayerMenuPartnerUI | AngeliA",
    "summary": "Class PlayerMenuPartnerUI Class for customize partner ui for player menu ui Implements IWindowEntityUI Properties BackgroundRect Rect position of the background range in global space Declaration public IRect BackgroundRect { get; protected set; } Column Inventory column count Declaration public virtual int Column { get; } InventoryID ID for inventory system Declaration public int InventoryID { get; set; } ItemFieldSize Unified size of a single item field Declaration public virtual int ItemFieldSize { get; } MouseInPanel Trie if mouse cursor is currently inside this panel Declaration public bool MouseInPanel { get; set; } Row Inventory row count Declaration public virtual int Row { get; } Methods DrawPanel(IRect) This function is called every frame for displaying this panel Declaration public virtual void DrawPanel(IRect panelRect) Parameters Type Name Description IRect panelRect Rect position for the range of this panel in global space EnablePanel() This function is called when the panel start to display Declaration public virtual void EnablePanel() Unify(int) Convert unified size into global size Declaration protected static int Unify(int value)"
  },
  "api/AngeliA.PlayerMenuUI.html": {
    "href": "api/AngeliA.PlayerMenuUI.html",
    "title": "Class PlayerMenuUI | AngeliA",
    "summary": "Class PlayerMenuUI Menu UI for display player's state, manage equipments and items. Display when player press \"select\" button once. Implements IMapItem Constructors PlayerMenuUI() Declaration public PlayerMenuUI() Properties CursorInBottomPanel True if the cursor is in bottom inventory panel (the one for player's inventory) Declaration public bool CursorInBottomPanel { get; set; } CursorIndex Index of the inventory cursor. (0 means bottom left, 1 makes the cursor go right) Declaration public int CursorIndex { get; set; } Instance Global instance of this entity Declaration public static PlayerMenuUI Instance { get; } Partner Instance of the current partner UI. Partner is the panel shows on top. The bottom one always display player's inventory. When partner panel is null, it display player's equipment panel. Declaration public PlayerMenuPartnerUI Partner { get; } ShowingUI True is this menu is currently displaying Declaration public static bool ShowingUI { get; } TakingCount Count of the current taking item. Declaration public int TakingCount { get; } TakingID ID of the current taking item (the one move with the cursor), 0 means no item is taking. Declaration public int TakingID { get; } TopPanelColumn Column count of the partner panel's inventory Declaration public int TopPanelColumn { get; } TopPanelRow Row count of the partner panel's inventory Declaration public int TopPanelRow { get; } Methods CloseMenu() Close the current opening player menu ui Declaration public static void CloseMenu() DrawItemFieldUI(int, int, int, IRect, bool, int) Draw a single item field Declaration public static void DrawItemFieldUI(int itemID, int itemCount, int frameCode, IRect itemRect, bool interactable, int uiIndex) Parameters Type Name Description int itemID ID of the item from this field int itemCount Count of the item from this field int frameCode Artwork sprite ID of the field's frame IRect itemRect Rect position of this field in global space bool interactable True if this field is currently interactable int uiIndex Cursor index for this field for UI logic only DrawTopInventory(int, int, int, int) Draw stardard inventory panel ui Declaration public static void DrawTopInventory(int inventoryID, int column, int row, int avatarID = 0) Parameters Type Name Description int inventoryID Inventory ID for the partner ui int column Inventory column count for the partner ui int row Inventory row count for the partner ui int avatarID Artwork sprite ID of the partner avatar OnActivated() This function is called when entity enter the stage Declaration public override void OnActivated() Overrides Entity.OnActivated() OnInactivated() This function is called when entity leave the stage Declaration public override void OnInactivated() Overrides Entity.OnInactivated() OpenMenu() Open player menu ui without partner. Player equipment ui will be display on top. Declaration public static PlayerMenuUI OpenMenu() Returns Type Description PlayerMenuUI Instance of the player menu ui OpenMenuWithPartner(PlayerMenuPartnerUI, int) Open player menu ui with given partner ui Declaration public static bool OpenMenuWithPartner(PlayerMenuPartnerUI partner, int partnerInventoryID) Parameters Type Name Description PlayerMenuPartnerUI partner Instance of the partner ui which will be display on top Returns Type Description bool True if the menu is opened SetTaking(int, int) Set current taking item on the cursor Declaration public void SetTaking(int takingID, int takingCount) UpdateUI() Declaration public override void UpdateUI() Overrides EntityUI.UpdateUI()"
  },
  "api/AngeliA.PlayerQuickMenuUI.html": {
    "href": "api/AngeliA.PlayerQuickMenuUI.html",
    "title": "Class PlayerQuickMenuUI | AngeliA",
    "summary": "Class PlayerQuickMenuUI UI menu that display when player hold \"select\" button during gameplay Implements IMapItem IWindowEntityUI Constructors PlayerQuickMenuUI() Declaration public PlayerQuickMenuUI() Properties BackgroundRect Rect position for background panel range in global size Declaration public IRect BackgroundRect { get; } Instance Global single instance for this entity Declaration public static PlayerQuickMenuUI Instance { get; } ShowingUI True if the ui id currently displaying Declaration public static bool ShowingUI { get; } Methods CloseMenu() Close the quick menu UI if it's opening Declaration public static void CloseMenu() OnActivated() This function is called when entity enter the stage Declaration public override void OnActivated() Overrides Entity.OnActivated() OnInactivated() This function is called when entity leave the stage Declaration public override void OnInactivated() Overrides Entity.OnInactivated() OpenMenu() Open the quick menu UI Declaration public static PlayerQuickMenuUI OpenMenu() Returns Type Description PlayerQuickMenuUI Instance of the opened menu UpdateUI() Declaration public override void UpdateUI() Overrides EntityUI.UpdateUI()"
  },
  "api/AngeliA.PlayerSystem.html": {
    "href": "api/AngeliA.PlayerSystem.html",
    "title": "Class PlayerSystem | AngeliA",
    "summary": "Class PlayerSystem Core system for user character control logic Fields DragPlayerInMiddleButtonToMove_DebugOnly True if allow user use middle mouse button to move player for debug. This feature is not include after the game publish. Declaration public static readonly FrameBasedBool DragPlayerInMiddleButtonToMove_DebugOnly IgnorePlayerView True if player system should not change the stage view rect Declaration public static readonly FrameBasedBool IgnorePlayerView TargetViewHeight View height in global space the player requiring to have Declaration public static readonly FrameBasedInt TargetViewHeight Properties AimViewX Target view position in global space Declaration public static int AimViewX { get; } AimViewY Target view position in global space Declaration public static int AimViewY { get; } AllowPlayerMenuUI True if user have access to the player menu UI Declaration public static bool AllowPlayerMenuUI { get; } AllowQuickPlayerMenuUI True if user have access to the quick player UI Declaration public static bool AllowQuickPlayerMenuUI { get; } Enable True if the system is online Declaration public static bool Enable { get; } HomeUnitPosition Respawn position in unit space when player have no check point activated Declaration public static Int3 HomeUnitPosition { get; set; } IgnoringAction True if the system is currently not react to IActionTarget Declaration public static bool IgnoringAction { get; } IgnoringInput True if the system is currently not react to user input Declaration public static bool IgnoringInput { get; } PlayableCharactersCount Total count of playable characters Declaration public static int PlayableCharactersCount { get; } RespawnCpUnitPosition Position in unit space for player respawn when game restart Declaration public static Int3? RespawnCpUnitPosition { get; set; } Selecting Instance of the selecting character as player (can be changed or set to null at any moment) Declaration public static Character Selecting { get; } TargetActionEntity Current highlighting IActionTarget Declaration public static IActionTarget TargetActionEntity { get; } UnlockedPlayerCount Total count of unlocked player characters Declaration public static int UnlockedPlayerCount { get; } Methods ForAllPlayables() Iterate through all playable characters Declaration public static IEnumerable<int> ForAllPlayables() ForAllUnlockedPlayers() Iterate through all unlocked playable characters Declaration public static IEnumerable<int> ForAllUnlockedPlayers() ForceUpdateGroundedForView(int) Make player always mark as grounded for view position for given frames long Declaration public static void ForceUpdateGroundedForView(int duration = 1) GetCameraShiftOffset(int) Get the Y position shift in global space from camera center to player center Declaration public static int GetCameraShiftOffset(int cameraHeight) GetDefaultPlayerID(bool) Declaration public static int GetDefaultPlayerID(bool forceSelect = false) Parameters Type Name Description bool forceSelect True if return the first founded IPlayable character ID GetPlayerFinalRespawnUnitPosition() Get the position in unit space for player get respawned when game restart Declaration public static Int3 GetPlayerFinalRespawnUnitPosition() IgnoreAction(int) Make user not react to IActionTarget for given frames long. Set to -1 to make ignoring stop. Declaration public static void IgnoreAction(int duration = 1) IgnoreAttack(int) Make user can not attack for given frames long. Set to -1 to make ignoring stop. Declaration public static void IgnoreAttack(int duration = 1) IgnoreInput(int) Make user input blocked for given frames long. Set to -1 to make ignoring stop. Declaration public static void IgnoreInput(int duration = 1) IgnorePlayerMenu(int) Make user have no access to player menu UI for given frames long. Set to -1 to make ignoring stop. Declaration public static void IgnorePlayerMenu(int duration = 1) IgnorePlayerQuickMenu(int) Make user have no access to quick player menu UI for given frames long. Set to -1 to make ignoring stop. Declaration public static void IgnorePlayerQuickMenu(int duration = 1) IsPlayerUnlocked(int) True if given player character is unlocked Declaration public static bool IsPlayerUnlocked(int id) SelectCharacterAsPlayer(int, bool) Set given ID as selecting player character Declaration public static void SelectCharacterAsPlayer(int characterTypeID, bool failbackToDefault = true) bool failbackToDefault True if use default character as selected when given one not found SetCharacterAsPlayer(Character) Set given character instance as selected player Declaration public static void SetCharacterAsPlayer(Character target) UnlockPlayer(int) Unlock given player character Declaration public static void UnlockPlayer(int id)"
  },
  "api/AngeliA.PoseAnimation.html": {
    "href": "api/AngeliA.PoseAnimation.html",
    "title": "Class PoseAnimation | AngeliA",
    "summary": "Class PoseAnimation Procedure animation to animate a pose-style character. ⚠Use global single instance from system pool⚠ Fields A2G Scale values from artwork pixel space to global space Declaration protected const int A2G = 16 AnimationType Which type of animation does the current character require to show Declaration protected static CharacterAnimationType AnimationType AttackEase Eased progress of attack. (0 means start, 1 means end) Declaration protected static float AttackEase AttackLerp Liner progress of attack. (0 means start, 1 means end) Declaration protected static float AttackLerp Attackness Attackness behavior of the target character Declaration protected static CharacterAttackness Attackness Body Declaration protected static BodyPart Body CurrentAnimationFrame Local animation frame of the target character Declaration protected static int CurrentAnimationFrame FacingFront True if the target character is facing front Declaration protected static bool FacingFront FacingRight True if the target character is facing right Declaration protected static bool FacingRight FacingSign Return 1 if the target character is facing right Declaration protected static int FacingSign FootL Declaration protected static BodyPart FootL FootR Declaration protected static BodyPart FootR FrontSign Return 1 if the target character is facing front Declaration protected static int FrontSign HandL Declaration protected static BodyPart HandL HandR Declaration protected static BodyPart HandR Head Declaration protected static BodyPart Head Hip Declaration protected static BodyPart Hip IsChargingAttack True if the target character is currently attacking Declaration protected static bool IsChargingAttack LowerArmL Declaration protected static BodyPart LowerArmL LowerArmR Declaration protected static BodyPart LowerArmR LowerLegL Declaration protected static BodyPart LowerLegL LowerLegR Declaration protected static BodyPart LowerLegR Movement Movement behavior of the target character Declaration protected static CharacterMovement Movement POSE_Z_HAND Declaration protected const int POSE_Z_HAND = 36 Rendering Rendering behavior of the target character Declaration protected static PoseCharacterRenderer Rendering ShoulderL Declaration protected static BodyPart ShoulderL ShoulderR Declaration protected static BodyPart ShoulderR Target Character that currently being animated Declaration protected static Character Target UpperArmL Declaration protected static BodyPart UpperArmL UpperArmR Declaration protected static BodyPart UpperArmR UpperLegL Declaration protected static BodyPart UpperLegL UpperLegR Declaration protected static BodyPart UpperLegR Properties DontBlendToNext True if this animation should immediately transition to the next Declaration protected virtual bool DontBlendToNext { get; } DontBlendToPrev True if the prev animation should immediately transition to this one Declaration protected virtual bool DontBlendToPrev { get; } ValidHeadPosition True if head position need to be recalculate after perform this animation Declaration protected virtual bool ValidHeadPosition { get; } Methods Animate(PoseCharacterRenderer) Perform the animation logic to the given character Declaration public virtual void Animate(PoseCharacterRenderer renderer) AttackHeadDown(float, int, int, int) Make head moves down for attack animation for cached character Declaration protected static void AttackHeadDown(float ease01, int headOffsetXAmount = 1000, int headOffsetYAmount = 1000, int headRotateAmount = 1000) AttackLegShake(float) Make legs shake for attack animation for cached character Declaration protected static void AttackLegShake(float ease01) PerformAnimation(PoseAnimation, PoseCharacterRenderer) Animate target character from given animation Declaration public static void PerformAnimation(PoseAnimation animation, PoseCharacterRenderer renderer) PerformAnimationBlend(PoseAnimation, PoseAnimation, float, PoseCharacterRenderer) Animate the target character from two given animations Declaration public static void PerformAnimationBlend(PoseAnimation animationA, PoseAnimation animationB, float blend01, PoseCharacterRenderer renderer) float blend01 0 means only perform animationA, 1 means only perform animationB. 0.5 means perform two animations equally. PerformAnimationBlendFromPool(int, int, float, PoseCharacterRenderer) Animate the target character from two animations inside system pool Declaration public static void PerformAnimationBlendFromPool(int idA, int idB, float blend01, PoseCharacterRenderer renderer) float blend01 0 means only perform animationA, 1 means only perform animationB. 0.5 means perform two animations equally. PerformAnimationFromPool(int, PoseCharacterRenderer) Animate the target character from animation inside system pool Declaration public static void PerformAnimationFromPool(int id, PoseCharacterRenderer renderer) ResetShoulderAndUpperArmPos(bool, bool) Reset position of soulder and upper arm for cached character Declaration protected static void ResetShoulderAndUpperArmPos(bool resetLeft = true, bool resetRight = true) TryGetAnimationFromPool(int, out PoseAnimation) Get global single instance from system pool Declaration public static bool TryGetAnimationFromPool(int id, out PoseAnimation result)"
  },
  "api/AngeliA.PoseAnimation_Animation_TakingDamage.html": {
    "href": "api/AngeliA.PoseAnimation_Animation_TakingDamage.html",
    "title": "Class PoseAnimation_Animation_TakingDamage | AngeliA",
    "summary": "Class PoseAnimation_Animation_TakingDamage Methods Animate(PoseCharacterRenderer) Perform the animation logic to the given character Declaration public override void Animate(PoseCharacterRenderer renderer) Overrides PoseAnimation.Animate(PoseCharacterRenderer)"
  },
  "api/AngeliA.PoseAnimation_Brake.html": {
    "href": "api/AngeliA.PoseAnimation_Brake.html",
    "title": "Class PoseAnimation_Brake | AngeliA",
    "summary": "Class PoseAnimation_Brake Methods Animate(PoseCharacterRenderer) Perform the animation logic to the given character Declaration public override void Animate(PoseCharacterRenderer renderer) Overrides PoseAnimation.Animate(PoseCharacterRenderer)"
  },
  "api/AngeliA.PoseAnimation_Climb.html": {
    "href": "api/AngeliA.PoseAnimation_Climb.html",
    "title": "Class PoseAnimation_Climb | AngeliA",
    "summary": "Class PoseAnimation_Climb Methods Animate(PoseCharacterRenderer) Perform the animation logic to the given character Declaration public override void Animate(PoseCharacterRenderer renderer) Overrides PoseAnimation.Animate(PoseCharacterRenderer)"
  },
  "api/AngeliA.PoseAnimation_Crash.html": {
    "href": "api/AngeliA.PoseAnimation_Crash.html",
    "title": "Class PoseAnimation_Crash | AngeliA",
    "summary": "Class PoseAnimation_Crash Properties DontBlendToPrev True if the prev animation should immediately transition to this one Declaration protected override bool DontBlendToPrev { get; } Overrides PoseAnimation.DontBlendToPrev Methods Animate(PoseCharacterRenderer) Perform the animation logic to the given character Declaration public override void Animate(PoseCharacterRenderer renderer) Overrides PoseAnimation.Animate(PoseCharacterRenderer)"
  },
  "api/AngeliA.PoseAnimation_Dash.html": {
    "href": "api/AngeliA.PoseAnimation_Dash.html",
    "title": "Class PoseAnimation_Dash | AngeliA",
    "summary": "Class PoseAnimation_Dash Methods Animate(PoseCharacterRenderer) Perform the animation logic to the given character Declaration public override void Animate(PoseCharacterRenderer renderer) Overrides PoseAnimation.Animate(PoseCharacterRenderer)"
  },
  "api/AngeliA.PoseAnimation_Fly.html": {
    "href": "api/AngeliA.PoseAnimation_Fly.html",
    "title": "Class PoseAnimation_Fly | AngeliA",
    "summary": "Class PoseAnimation_Fly Methods Animate(PoseCharacterRenderer) Perform the animation logic to the given character Declaration public override void Animate(PoseCharacterRenderer renderer) Overrides PoseAnimation.Animate(PoseCharacterRenderer)"
  },
  "api/AngeliA.PoseAnimation_GrabSide.html": {
    "href": "api/AngeliA.PoseAnimation_GrabSide.html",
    "title": "Class PoseAnimation_GrabSide | AngeliA",
    "summary": "Class PoseAnimation_GrabSide Methods Animate(PoseCharacterRenderer) Perform the animation logic to the given character Declaration public override void Animate(PoseCharacterRenderer renderer) Overrides PoseAnimation.Animate(PoseCharacterRenderer)"
  },
  "api/AngeliA.PoseAnimation_GrabTop.html": {
    "href": "api/AngeliA.PoseAnimation_GrabTop.html",
    "title": "Class PoseAnimation_GrabTop | AngeliA",
    "summary": "Class PoseAnimation_GrabTop Methods Animate(PoseCharacterRenderer) Perform the animation logic to the given character Declaration public override void Animate(PoseCharacterRenderer renderer) Overrides PoseAnimation.Animate(PoseCharacterRenderer)"
  },
  "api/AngeliA.PoseAnimation_Idle.html": {
    "href": "api/AngeliA.PoseAnimation_Idle.html",
    "title": "Class PoseAnimation_Idle | AngeliA",
    "summary": "Class PoseAnimation_Idle Fields TYPE_ID Declaration public static readonly int TYPE_ID Methods Animate(PoseCharacterRenderer) Perform the animation logic to the given character Declaration public override void Animate(PoseCharacterRenderer renderer) Overrides PoseAnimation.Animate(PoseCharacterRenderer)"
  },
  "api/AngeliA.PoseAnimation_JumpDown.html": {
    "href": "api/AngeliA.PoseAnimation_JumpDown.html",
    "title": "Class PoseAnimation_JumpDown | AngeliA",
    "summary": "Class PoseAnimation_JumpDown Methods Animate(PoseCharacterRenderer) Perform the animation logic to the given character Declaration public override void Animate(PoseCharacterRenderer renderer) Overrides PoseAnimation.Animate(PoseCharacterRenderer)"
  },
  "api/AngeliA.PoseAnimation_JumpUp.html": {
    "href": "api/AngeliA.PoseAnimation_JumpUp.html",
    "title": "Class PoseAnimation_JumpUp | AngeliA",
    "summary": "Class PoseAnimation_JumpUp Methods Animate(PoseCharacterRenderer) Perform the animation logic to the given character Declaration public override void Animate(PoseCharacterRenderer renderer) Overrides PoseAnimation.Animate(PoseCharacterRenderer)"
  },
  "api/AngeliA.PoseAnimation_PassOut.html": {
    "href": "api/AngeliA.PoseAnimation_PassOut.html",
    "title": "Class PoseAnimation_PassOut | AngeliA",
    "summary": "Class PoseAnimation_PassOut Properties ValidHeadPosition True if head position need to be recalculate after perform this animation Declaration protected override bool ValidHeadPosition { get; } Overrides PoseAnimation.ValidHeadPosition Methods Animate(PoseCharacterRenderer) Perform the animation logic to the given character Declaration public override void Animate(PoseCharacterRenderer renderer) Overrides PoseAnimation.Animate(PoseCharacterRenderer)"
  },
  "api/AngeliA.PoseAnimation_Pound.html": {
    "href": "api/AngeliA.PoseAnimation_Pound.html",
    "title": "Class PoseAnimation_Pound | AngeliA",
    "summary": "Class PoseAnimation_Pound Methods Animate(PoseCharacterRenderer) Perform the animation logic to the given character Declaration public override void Animate(PoseCharacterRenderer renderer) Overrides PoseAnimation.Animate(PoseCharacterRenderer)"
  },
  "api/AngeliA.PoseAnimation_Rolling.html": {
    "href": "api/AngeliA.PoseAnimation_Rolling.html",
    "title": "Class PoseAnimation_Rolling | AngeliA",
    "summary": "Class PoseAnimation_Rolling Fields TYPE_ID Declaration public static readonly int TYPE_ID Methods Animate(PoseCharacterRenderer) Perform the animation logic to the given character Declaration public override void Animate(PoseCharacterRenderer renderer) Overrides PoseAnimation.Animate(PoseCharacterRenderer)"
  },
  "api/AngeliA.PoseAnimation_Run.html": {
    "href": "api/AngeliA.PoseAnimation_Run.html",
    "title": "Class PoseAnimation_Run | AngeliA",
    "summary": "Class PoseAnimation_Run Fields TYPE_ID Declaration public static readonly int TYPE_ID Methods Animate(PoseCharacterRenderer) Perform the animation logic to the given character Declaration public override void Animate(PoseCharacterRenderer renderer) Overrides PoseAnimation.Animate(PoseCharacterRenderer)"
  },
  "api/AngeliA.PoseAnimation_Rush.html": {
    "href": "api/AngeliA.PoseAnimation_Rush.html",
    "title": "Class PoseAnimation_Rush | AngeliA",
    "summary": "Class PoseAnimation_Rush Methods Animate(PoseCharacterRenderer) Perform the animation logic to the given character Declaration public override void Animate(PoseCharacterRenderer renderer) Overrides PoseAnimation.Animate(PoseCharacterRenderer)"
  },
  "api/AngeliA.PoseAnimation_Sleep.html": {
    "href": "api/AngeliA.PoseAnimation_Sleep.html",
    "title": "Class PoseAnimation_Sleep | AngeliA",
    "summary": "Class PoseAnimation_Sleep Methods Animate(PoseCharacterRenderer) Perform the animation logic to the given character Declaration public override void Animate(PoseCharacterRenderer renderer) Overrides PoseAnimation.Animate(PoseCharacterRenderer)"
  },
  "api/AngeliA.PoseAnimation_Slide.html": {
    "href": "api/AngeliA.PoseAnimation_Slide.html",
    "title": "Class PoseAnimation_Slide | AngeliA",
    "summary": "Class PoseAnimation_Slide Methods Animate(PoseCharacterRenderer) Perform the animation logic to the given character Declaration public override void Animate(PoseCharacterRenderer renderer) Overrides PoseAnimation.Animate(PoseCharacterRenderer)"
  },
  "api/AngeliA.PoseAnimation_Spin.html": {
    "href": "api/AngeliA.PoseAnimation_Spin.html",
    "title": "Class PoseAnimation_Spin | AngeliA",
    "summary": "Class PoseAnimation_Spin Methods Animate(PoseCharacterRenderer) Perform the animation logic to the given character Declaration public override void Animate(PoseCharacterRenderer renderer) Overrides PoseAnimation.Animate(PoseCharacterRenderer)"
  },
  "api/AngeliA.PoseAnimation_SquatIdle.html": {
    "href": "api/AngeliA.PoseAnimation_SquatIdle.html",
    "title": "Class PoseAnimation_SquatIdle | AngeliA",
    "summary": "Class PoseAnimation_SquatIdle Fields TYPE_ID Declaration public static readonly int TYPE_ID Methods Animate(PoseCharacterRenderer) Perform the animation logic to the given character Declaration public override void Animate(PoseCharacterRenderer renderer) Overrides PoseAnimation.Animate(PoseCharacterRenderer)"
  },
  "api/AngeliA.PoseAnimation_SquatMove.html": {
    "href": "api/AngeliA.PoseAnimation_SquatMove.html",
    "title": "Class PoseAnimation_SquatMove | AngeliA",
    "summary": "Class PoseAnimation_SquatMove Methods Animate(PoseCharacterRenderer) Perform the animation logic to the given character Declaration public override void Animate(PoseCharacterRenderer renderer) Overrides PoseAnimation.Animate(PoseCharacterRenderer)"
  },
  "api/AngeliA.PoseAnimation_SwimIdle.html": {
    "href": "api/AngeliA.PoseAnimation_SwimIdle.html",
    "title": "Class PoseAnimation_SwimIdle | AngeliA",
    "summary": "Class PoseAnimation_SwimIdle Methods Animate(PoseCharacterRenderer) Perform the animation logic to the given character Declaration public override void Animate(PoseCharacterRenderer renderer) Overrides PoseAnimation.Animate(PoseCharacterRenderer)"
  },
  "api/AngeliA.PoseAnimation_SwimMove.html": {
    "href": "api/AngeliA.PoseAnimation_SwimMove.html",
    "title": "Class PoseAnimation_SwimMove | AngeliA",
    "summary": "Class PoseAnimation_SwimMove Methods Animate(PoseCharacterRenderer) Perform the animation logic to the given character Declaration public override void Animate(PoseCharacterRenderer renderer) Overrides PoseAnimation.Animate(PoseCharacterRenderer)"
  },
  "api/AngeliA.PoseAnimation_Walk.html": {
    "href": "api/AngeliA.PoseAnimation_Walk.html",
    "title": "Class PoseAnimation_Walk | AngeliA",
    "summary": "Class PoseAnimation_Walk Methods Animate(PoseCharacterRenderer) Perform the animation logic to the given character Declaration public override void Animate(PoseCharacterRenderer renderer) Overrides PoseAnimation.Animate(PoseCharacterRenderer)"
  },
  "api/AngeliA.PoseCharacterRenderer.html": {
    "href": "api/AngeliA.PoseCharacterRenderer.html",
    "title": "Class PoseCharacterRenderer | AngeliA",
    "summary": "Class PoseCharacterRenderer Constructors PoseCharacterRenderer(Character) Declaration public PoseCharacterRenderer(Character target) Fields BodyParts All body parts of the pose character Declaration public readonly BodyPart[] BodyParts CM_PER_PX How many cm does one artwork pixel represents Declaration public const int CM_PER_PX = 5 EarID ID of current animal-ear gadget instance (like cat-girl's ears, not human ears) Declaration public readonly FrameBasedInt EarID FaceID ID of current face gadget instance Declaration public readonly FrameBasedInt FaceID ForceFaceExpressionIndex Which face expression does the face need to render Declaration public readonly FrameBasedInt ForceFaceExpressionIndex HairID ID of current hair gadget instance Declaration public readonly FrameBasedInt HairID HandGrabAttackTwistL Angle twist of the object grabbing by the left hand (0 means disappear, 1000 means normal) Declaration public readonly FrameBasedInt HandGrabAttackTwistL HandGrabAttackTwistR Angle twist of the object grabbing by the right hand (0 means disappear, 1000 means normal) Declaration public readonly FrameBasedInt HandGrabAttackTwistR HandGrabRotationL Rotation of the object grabbing by the left hand Declaration public readonly FrameBasedInt HandGrabRotationL HandGrabRotationR Rotation of the object grabbing by the right hand Declaration public readonly FrameBasedInt HandGrabRotationR HandGrabScaleL Size scaling of the object grabbing by the left hand (0 means 0%, 1000 means 100%) Declaration public readonly FrameBasedInt HandGrabScaleL HandGrabScaleR Size scaling of the object grabbing by the right hand (0 means 0%, 1000 means 100%) Declaration public readonly FrameBasedInt HandGrabScaleR HornID ID of current horn gadget instance Declaration public readonly FrameBasedInt HornID SuitBody Current body suit id (cloth with sleeves) Declaration public readonly FrameBasedInt SuitBody SuitFoot Current shoes suit id Declaration public readonly FrameBasedInt SuitFoot SuitHand Current gloves suit id Declaration public readonly FrameBasedInt SuitHand SuitHead Current hat suit id Declaration public readonly FrameBasedInt SuitHead SuitHip Current hip suit id (pants or skirt) Declaration public readonly FrameBasedInt SuitHip TailID ID of current tail gadget instance Declaration public readonly FrameBasedInt TailID WingID ID of current wing gadget instance Declaration public readonly FrameBasedInt WingID Properties BasicRootY Mid-Bottom local position of character hip y position Declaration public int BasicRootY { get; set; } BlendDuration How many frames does it takes the character to transition from one pose to another Declaration public int BlendDuration { get; set; } Body Body of the pose character Declaration public BodyPart Body { get; init; } BodyTwist Make body rotate left or right Declaration public int BodyTwist { get; set; } CharacterHeight Character body height in cm Declaration public int CharacterHeight { get; set; } FootL Left foot of the pose character Declaration public BodyPart FootL { get; init; } FootR Right foot of the pose character Declaration public BodyPart FootR { get; init; } HandL Left hand of the pose character Declaration public BodyPart HandL { get; init; } HandR Right hand of the pose character Declaration public BodyPart HandR { get; init; } Head Head of the pose character Declaration public BodyPart Head { get; init; } HeadTwist Make head rotate like shaking head Declaration public int HeadTwist { get; set; } Hip Hip of the pose character Declaration public BodyPart Hip { get; init; } LowerArmL Left lower arm of the pose character Declaration public BodyPart LowerArmL { get; init; } LowerArmR Right lower arm of the pose character Declaration public BodyPart LowerArmR { get; init; } LowerLegL Left lower leg of the pose character Declaration public BodyPart LowerLegL { get; init; } LowerLegR Right lower leg of the pose character Declaration public BodyPart LowerLegR { get; init; } PoseRootX Total offset X for pose rendering Declaration public int PoseRootX { get; set; } PoseRootY Total offset Y for pose rendering Declaration public int PoseRootY { get; set; } RenderedCellZ Basic rendering Z value for last time character get rendered Declaration public int RenderedCellZ { get; } ShoulderL Left shoulder of the pose character Declaration public BodyPart ShoulderL { get; init; } ShoulderR Right shoulder of the pose character Declaration public BodyPart ShoulderR { get; init; } UpperArmL Left upper arm of the pose character Declaration public BodyPart UpperArmL { get; init; } UpperArmR Right upper arm of the pose character Declaration public BodyPart UpperArmR { get; init; } UpperLegL Left upper leg of the pose character Declaration public BodyPart UpperLegL { get; init; } UpperLegR Right upper leg of the pose character Declaration public BodyPart UpperLegR { get; init; } Methods BeforeUpdate() Declaration public override void BeforeUpdate() Overrides CharacterRenderer.BeforeUpdate() GetGadgetID(BodyGadgetType) Get current body gadget ID the character is using Declaration public int GetGadgetID(BodyGadgetType type) GetSuitID(ClothType) Get current suit ID the character is using Declaration public int GetSuitID(ClothType type) LateUpdate() Declaration public override void LateUpdate() Overrides CharacterRenderer.LateUpdate() ManualPoseAnimate(int, int) Make the renderer draw the character based on the given animation for specified frames long Declaration public void ManualPoseAnimate(int id, int duration = 1) OnActivated() Callback function for character entity get activated Declaration public override void OnActivated() Overrides CharacterRenderer.OnActivated() OverridePoseAnimation(CharacterAnimationType, int, int) Override animation for given animation type for specified frames long Declaration public void OverridePoseAnimation(CharacterAnimationType type, int id, int duration = 1) PerformPoseAnimation() Declaration protected virtual void PerformPoseAnimation() ReloadRenderingConfigPoolFromFileAndSheet(bool) Declaration public static void ReloadRenderingConfigPoolFromFileAndSheet(bool forceReset = false) RenderBodyGadgets() Declaration protected virtual void RenderBodyGadgets() RenderCloths() Declaration protected virtual void RenderCloths() RenderEquipment() Declaration protected virtual void RenderEquipment() RenderInventory() Declaration protected virtual void RenderInventory() SaveCharacterToConfig(bool) Declaration public void SaveCharacterToConfig(bool saveToFile = false) SyncRenderingConfigFromPool(bool) Declaration public void SyncRenderingConfigFromPool(bool forceSync = false) TryGetConfigFromPool(int, out CharacterRenderingConfig) Declaration public static bool TryGetConfigFromPool(int id, out CharacterRenderingConfig config)"
  },
  "api/AngeliA.PoseHandheld_Block.html": {
    "href": "api/AngeliA.PoseHandheld_Block.html",
    "title": "Class PoseHandheld_Block | AngeliA",
    "summary": "Class PoseHandheld_Block Fields TYPE_ID Declaration public static readonly int TYPE_ID Methods DrawTool(HandTool, PoseCharacterRenderer) Declaration public override void DrawTool(HandTool tool, PoseCharacterRenderer renderer) Overrides HandheldPoseAnimation.DrawTool(HandTool, PoseCharacterRenderer)"
  },
  "api/AngeliA.PoseHandheld_Tool.html": {
    "href": "api/AngeliA.PoseHandheld_Tool.html",
    "title": "Class PoseHandheld_Tool | AngeliA",
    "summary": "Class PoseHandheld_Tool Fields TYPE_ID Declaration public static readonly int TYPE_ID Methods DrawTool(HandTool, PoseCharacterRenderer) Declaration public override void DrawTool(HandTool tool, PoseCharacterRenderer renderer) Overrides HandheldPoseAnimation.DrawTool(HandTool, PoseCharacterRenderer)"
  },
  "api/AngeliA.PosePerform_Block.html": {
    "href": "api/AngeliA.PosePerform_Block.html",
    "title": "Class PosePerform_Block | AngeliA",
    "summary": "Class PosePerform_Block Fields TYPE_ID Declaration public static readonly int TYPE_ID Methods Animate(PoseCharacterRenderer) Perform the animation logic to the given character Declaration public override void Animate(PoseCharacterRenderer renderer) Overrides PoseAnimation.Animate(PoseCharacterRenderer) Build() Declaration public static void Build()"
  },
  "api/AngeliA.PosePerform_Tool.html": {
    "href": "api/AngeliA.PosePerform_Tool.html",
    "title": "Class PosePerform_Tool | AngeliA",
    "summary": "Class PosePerform_Tool Fields TYPE_ID Declaration public static readonly int TYPE_ID Methods Animate(PoseCharacterRenderer) Perform the animation logic to the given character Declaration public override void Animate(PoseCharacterRenderer renderer) Overrides PoseAnimation.Animate(PoseCharacterRenderer) Perform() Declaration public static void Perform()"
  },
  "api/AngeliA.ProjectType.html": {
    "href": "api/AngeliA.ProjectType.html",
    "title": "Enum ProjectType | AngeliA",
    "summary": "Enum ProjectType Fields Name Description Artwork Project with only pixel artwork EngineTheme Project with only pixel artwork for theme of AngeliA Engine Game Project with coded logic, pixel artwork and audio etc..."
  },
  "api/AngeliA.PropGroupAttribute.html": {
    "href": "api/AngeliA.PropGroupAttribute.html",
    "title": "Class PropGroupAttribute | AngeliA",
    "summary": "Class PropGroupAttribute Constructors PropGroupAttribute(string) Declaration public PropGroupAttribute(string name) Fields Name Declaration public string Name"
  },
  "api/AngeliA.PropSeparatorAttribute.html": {
    "href": "api/AngeliA.PropSeparatorAttribute.html",
    "title": "Class PropSeparatorAttribute | AngeliA",
    "summary": "Class PropSeparatorAttribute"
  },
  "api/AngeliA.PropVisibilityAttribute.html": {
    "href": "api/AngeliA.PropVisibilityAttribute.html",
    "title": "Class PropVisibilityAttribute | AngeliA",
    "summary": "Class PropVisibilityAttribute Constructors PropVisibilityAttribute(string, CompareMode) Declaration public PropVisibilityAttribute(string boolName, CompareMode compare = CompareMode.Equal) PropVisibilityAttribute(string, CompareMode, int) Declaration public PropVisibilityAttribute(string intName, CompareMode compare, int compareTargetValue) PropVisibilityAttribute(string, CompareMode, string) Declaration public PropVisibilityAttribute(string targetName, CompareMode compare, string compareTargetName) Fields Compare Declaration public readonly CompareMode Compare CompareTargetName Declaration public readonly string CompareTargetName CompareTargetValue Declaration public readonly int CompareTargetValue TargetName Declaration public readonly string TargetName Methods PropMatch(Dictionary<string, int>) Declaration public bool PropMatch(Dictionary<string, int> map) PropMatch(object) Declaration public bool PropMatch(object host)"
  },
  "api/AngeliA.RenderLayer.html": {
    "href": "api/AngeliA.RenderLayer.html",
    "title": "Class RenderLayer | AngeliA",
    "summary": "Class RenderLayer Layer for rendering Fields ADD Render cells with additive shader Declaration public const int ADD = 6 BEHIND Behind layer of level blocks Declaration public const int BEHIND = 1 COLOR Render cells with pure color, ignore sprite content Declaration public const int COLOR = 4 COUNT Declaration public const int COUNT = 8 DEFAULT Declaration public const int DEFAULT = 3 DEFAULT_CAPACITY Declaration public static readonly int[] DEFAULT_CAPACITY MULT Render cells with multiply shader Declaration public const int MULT = 5 NAMES Declaration public static readonly string[] NAMES SHADOW Hold shadow of level blocks and environment entities Declaration public const int SHADOW = 2 UI Declaration public const int UI = 7 WALLPAPER Most behind rendering layer, only overlap on top of sky color Declaration public const int WALLPAPER = 0"
  },
  "api/AngeliA.Renderer.CellComparer.html": {
    "href": "api/AngeliA.Renderer.CellComparer.html",
    "title": "Class Renderer.CellComparer | AngeliA",
    "summary": "Class Renderer.CellComparer Implements IComparer<Cell> Fields Instance Declaration public static readonly Renderer.CellComparer Instance Methods Compare(Cell, Cell) Compares two objects and returns a value indicating whether one is less than, equal to, or greater than the other. Declaration public int Compare(Cell a, Cell b) Returns Type Description int A signed integer that indicates the relative values of x and y, as shown in the following table. Value Meaning Less than zero x is less than y. Zero x equals y. Greater than zero x is greater than y."
  },
  "api/AngeliA.Renderer.html": {
    "href": "api/AngeliA.Renderer.html",
    "title": "Class Renderer | AngeliA",
    "summary": "Class Renderer Core system for draw artwork on screen for current frame Fields MainSheet Instance of main/default artwork sheet Declaration public static readonly Sheet MainSheet Properties AltSheetCount Total alt sheet count Declaration public static int AltSheetCount { get; } CameraRange Local range for the actual range for content on screen (black bar appears when window too wide) Declaration public static FRect CameraRange { get; } CameraRect Current rect position in global space for rendering the screen Declaration public static IRect CameraRect { get; } CurrentFontIndex Index of current using font Declaration public static int CurrentFontIndex { get; } CurrentLayerIndex Index of current using rendering layer Declaration public static int CurrentLayerIndex { get; } CurrentSheet Instance of current using artwork sheet Declaration public static Sheet CurrentSheet { get; } CurrentSheetIndex Index of current using artwork sheet Declaration public static int CurrentSheetIndex { get; set; } IsReady True if the system is ready to use Declaration public static bool IsReady { get; } LayerCount Total rendering layer count Declaration public static int LayerCount { get; } ScreenRenderRect Rendering rect position in screen position Declaration public static IRect ScreenRenderRect { get; } Methods AbandonLayerSort(int) Do not sort the unsorted cells inside this layer Declaration public static void AbandonLayerSort(int layerIndex) Parameters Type Name Description int layerIndex Use RenderLayer.XXX to get this value AddAltSheet(Sheet) Add alt sheet into the system Declaration public static int AddAltSheet(Sheet sheet) Returns Type Description int Index of the added alt sheet ClampCells(Cell[], IRect, int, int) Clamp cells inside rect range Declaration public static void ClampCells(Cell[] cells, IRect rect, int startIndex = 0, int endIndex = -1) IRect rect Target range in global space int endIndex (excluded) ClampCells(IRect, int, int) Clamp cells in using layer inside rect range Declaration public static void ClampCells(IRect rect, int startIndex, int endIndex = -1) Parameters Type Name Description IRect rect Target range in global space int endIndex (excluded) ClampCells(int, IRect, int, int) Clamp cells for given layer inside rect range Declaration public static void ClampCells(int layerIndex, IRect rect, int startIndex, int endIndex = -1) Parameters Type Name Description int layerIndex Use RenderLayer.XXX to get this value IRect rect Target range in global space int endIndex (excluded) ClearCharSpritePool() Reset internal pool for rendering character and unload the textures for them Declaration public static void ClearCharSpritePool() ClearFontIndexIdMap() Reset internal cache for font id with index Declaration public static void ClearFontIndexIdMap() Draw(AngeSprite, IRect, Color32, int) Draw a artwork sprite into using render layer Declaration public static Cell Draw(AngeSprite sprite, IRect rect, Color32 color, int z = -2147483648) Parameters Type Name Description AngeSprite sprite Artwork sprite IRect rect Rect position in global space Color32 color Color tint int z Z value for sorting rendering cells Returns Type Description Cell Rendering cell for this sprite Draw(AngeSprite, IRect, int) Draw a artwork sprite into using render layer Declaration public static Cell Draw(AngeSprite sprite, IRect rect, int z = -2147483648) Parameters Type Name Description AngeSprite sprite Artwork sprite IRect rect Rect position in global space int z Z value for sorting rendering cells Returns Type Description Cell Rendering cell for this sprite Draw(AngeSprite, int, int, int, int, int, int, int, Color32, int, bool) Draw a artwork sprite into using render layer Declaration public static Cell Draw(AngeSprite sprite, int x, int y, int pivotX, int pivotY, int rotation, int width, int height, Color32 color, int z = -2147483648, bool ignoreAttach = false) Parameters Type Name Description AngeSprite sprite Artwork sprite int x Position in global space int y Position in global space int pivotX 0 means \"x\" align with left edge. 1000 means \"x\" align with right edge. int pivotY 0 means \"y\" align with bottom edge. 1000 means \"y\" align with top edge. int rotation Rotation in degree. 90 means facing right. int width Size in global space int height Size in global space Color32 color Color tint int z Z value for sorting rendering cells bool ignoreAttach True if do not draw attaching sprite Returns Type Description Cell Rendering cell for this sprite Draw(AngeSprite, int, int, int, int, int, int, int, int) Draw a artwork sprite into using render layer Declaration public static Cell Draw(AngeSprite sprite, int x, int y, int pivotX, int pivotY, int rotation, int width, int height, int z = -2147483648) Parameters Type Name Description AngeSprite sprite Artwork sprite int x Position in global space int y Position in global space int pivotX 0 means \"x\" align with left edge. 1000 means \"x\" align with right edge. int pivotY 0 means \"y\" align with bottom edge. 1000 means \"y\" align with top edge. int rotation Rotation in degree. 90 means facing right. int width Size in global space int height Size in global space int z Z value for sorting rendering cells Returns Type Description Cell Rendering cell for this sprite Draw(SpriteCode, IRect, Color32, int) Draw a artwork sprite into using render layer Declaration public static Cell Draw(SpriteCode globalID, IRect rect, Color32 color, int z = -2147483648) Parameters Type Name Description SpriteCode globalID Artwork sprite ID IRect rect Rect position in global space Color32 color Color tint int z Z value for sorting rendering cells Returns Type Description Cell Rendering cell for this sprite Draw(SpriteCode, IRect, int) Draw a artwork sprite into using render layer Declaration public static Cell Draw(SpriteCode globalID, IRect rect, int z = -2147483648) Parameters Type Name Description SpriteCode globalID Artwork sprite ID IRect rect Rect position in global space int z Z value for sorting rendering cells Returns Type Description Cell Rendering cell for this sprite Draw(SpriteCode, int, int, int, int, int, int, int, Color32, int) Draw a artwork sprite into using render layer Declaration public static Cell Draw(SpriteCode globalID, int x, int y, int pivotX, int pivotY, int rotation, int width, int height, Color32 color, int z = -2147483648) Parameters Type Name Description SpriteCode globalID Artwork sprite ID int x Position in global space int y Position in global space int pivotX 0 means \"x\" align with left edge. 1000 means \"x\" align with right edge. int pivotY 0 means \"y\" align with bottom edge. 1000 means \"y\" align with top edge. int rotation Rotation in degree. 90 means facing right. int width Size in global space int height Size in global space Color32 color Color tint int z Z value for sorting rendering cells Returns Type Description Cell Rendering cell for this sprite Draw(SpriteCode, int, int, int, int, int, int, int, int) Draw a artwork sprite into using render layer Declaration public static Cell Draw(SpriteCode globalID, int x, int y, int pivotX, int pivotY, int rotation, int width, int height, int z = -2147483648) Parameters Type Name Description SpriteCode globalID Artwork sprite ID int x Position in global space int y Position in global space int pivotX 0 means \"x\" align with left edge. 1000 means \"x\" align with right edge. int pivotY 0 means \"y\" align with bottom edge. 1000 means \"y\" align with top edge. int rotation Rotation in degree. 90 means facing right. int width Size in global space int height Size in global space int z Z value for sorting rendering cells Returns Type Description Cell Rendering cell for this sprite Draw(int, IRect, Color32, int) Draw a artwork sprite into using render layer Declaration public static Cell Draw(int globalID, IRect rect, Color32 color, int z = -2147483648) Parameters Type Name Description int globalID Artwork sprite ID IRect rect Rect position in global space Color32 color Color tint int z Z value for sorting rendering cells Returns Type Description Cell Rendering cell for this sprite Draw(int, IRect, int) Draw a artwork sprite into using render layer Declaration public static Cell Draw(int globalID, IRect rect, int z = -2147483648) Parameters Type Name Description int globalID Artwork sprite ID IRect rect Rect position in global space int z Z value for sorting rendering cells Returns Type Description Cell Rendering cell for this sprite Draw(int, int, int, int, int, int, int, int, Color32, int) Draw a artwork sprite into using render layer Declaration public static Cell Draw(int globalID, int x, int y, int pivotX, int pivotY, int rotation, int width, int height, Color32 color, int z = -2147483648) Parameters Type Name Description int globalID Artwork sprite ID int x Position in global space int y Position in global space int pivotX 0 means \"x\" align with left edge. 1000 means \"x\" align with right edge. int pivotY 0 means \"y\" align with bottom edge. 1000 means \"y\" align with top edge. int rotation Rotation in degree. 90 means facing right. int width Size in global space int height Size in global space Color32 color Color tint int z Z value for sorting rendering cells Returns Type Description Cell Rendering cell for this sprite Draw(int, int, int, int, int, int, int, int, int) Draw a artwork sprite into using render layer Declaration public static Cell Draw(int globalID, int x, int y, int pivotX, int pivotY, int rotation, int width, int height, int z = -2147483648) Parameters Type Name Description int globalID Artwork sprite ID int x Position in global space int y Position in global space int pivotX 0 means \"x\" align with left edge. 1000 means \"x\" align with right edge. int pivotY 0 means \"y\" align with bottom edge. 1000 means \"y\" align with top edge. int rotation Rotation in degree. 90 means facing right. int width Size in global space int height Size in global space int z Z value for sorting rendering cells Returns Type Description Cell Rendering cell for this sprite DrawAnimation(SpriteGroup, int, int, int, int, int, int, int, int, int) Draw the given animation into using render layer Declaration public static Cell DrawAnimation(SpriteGroup group, int x, int y, int pivotX, int pivotY, int rotation, int width, int height, int frame, int z = -2147483648) int x Position in global space int y Position in global space int pivotX 0 means \"x\" align with left edge. 1000 means \"x\" align with right edge. int pivotY 0 means \"y\" align with bottom edge. 1000 means \"y\" align with top edge. int rotation Rotation in degree. 90 means facing right. int width Size in global space int height Size in global space int frame Animation frame int z Z value for sorting rendering cells Returns Type Description Cell Rendering cell for this sprite DrawAnimation(int, int, int, int, int, int, int, int, int, int) Draw the given animation into using render layer Declaration public static Cell DrawAnimation(int chainID, int x, int y, int pivotX, int pivotY, int rotation, int width, int height, int frame, int z = -2147483648) int x Position in global space int y Position in global space int pivotX 0 means \"x\" align with left edge. 1000 means \"x\" align with right edge. int pivotY 0 means \"y\" align with bottom edge. 1000 means \"y\" align with top edge. int rotation Rotation in degree. 90 means facing right. int width Size in global space int height Size in global space int frame Animation frame int z Z value for sorting rendering cells Returns Type Description Cell Rendering cell for this sprite DrawChar(CharSprite, int, int, int, int, Color32) Draw a text character into using render layer Declaration public static Cell DrawChar(CharSprite sprite, int x, int y, int width, int height, Color32 color) int x Position in global space int y Position in global space int width Size in global space int height Size in global space Color32 color Color tint Returns Type Description Cell Rendering cell for this text character DrawChar(char, int, int, int, int, Color32) Draw a text character into using render layer Declaration public static Cell DrawChar(char c, int x, int y, int width, int height, Color32 color) int x Position in global space int y Position in global space int width Size in global space int height Size in global space Color32 color Color tint Returns Type Description Cell Rendering cell for this text character DrawPixel(IRect, Color32, int) Draw a solid rectangle into using render layer Declaration public static Cell DrawPixel(IRect rect, Color32 color, int z = -2147483648) Color32 color Color tint int z Z value for sorting rendering cells Returns Type Description Cell Rendering cell for this sprite DrawPixel(IRect, int) Draw a solid rectangle into using render layer Declaration public static Cell DrawPixel(IRect rect, int z = -2147483648) int z Z value for sorting rendering cells Returns Type Description Cell Rendering cell for this sprite DrawPixel(int, int, int, int, int, int, int, Color32, int) Draw a solid rectangle into using render layer Declaration public static Cell DrawPixel(int x, int y, int pivotX, int pivotY, int rotation, int width, int height, Color32 color, int z = -2147483648) Parameters Type Name Description int x Position in global space int y Position in global space int pivotX 0 means \"x\" align with left edge. 1000 means \"x\" align with right edge. int pivotY 0 means \"y\" align with bottom edge. 1000 means \"y\" align with top edge. int rotation Rotation in degree. 90 means facing right. int width Size in global space int height Size in global space Color32 color Color tint int z Z value for sorting rendering cells Returns Type Description Cell Rendering cell for this sprite DrawPixel(int, int, int, int, int, int, int, int) Draw a solid rectangle into using render layer Declaration public static Cell DrawPixel(int x, int y, int pivotX, int pivotY, int rotation, int width, int height, int z = -2147483648) Parameters Type Name Description int x Position in global space int y Position in global space int pivotX 0 means \"x\" align with left edge. 1000 means \"x\" align with right edge. int pivotY 0 means \"y\" align with bottom edge. 1000 means \"y\" align with top edge. int rotation Rotation in degree. 90 means facing right. int width Size in global space int height Size in global space int z Z value for sorting rendering cells Returns Type Description Cell Rendering cell for this sprite DrawSlice(AngeSprite, IRect) Proportionally scale the sprite by dividing it into nine sections, protecting the corners and scaling/tiling the edges and center to maintain the image's integrity and prevent distortion. Declaration public static Cell[] DrawSlice(AngeSprite sprite, IRect rect) Parameters Type Name Description AngeSprite sprite Artwork sprite IRect rect Rect position in global space Returns Type Description Cell[] 9 Rendering cells for this sprite DrawSlice(AngeSprite, IRect, Color32, int) Proportionally scale the sprite by dividing it into nine sections, protecting the corners and scaling/tiling the edges and center to maintain the image's integrity and prevent distortion. Declaration public static Cell[] DrawSlice(AngeSprite sprite, IRect rect, Color32 color, int z = -2147483648) Parameters Type Name Description AngeSprite sprite Artwork sprite IRect rect Rect position in global space Color32 color Color tint int z Z value for sorting rendering cells Returns Type Description Cell[] 9 Rendering cells for this sprite DrawSlice(AngeSprite, IRect, int, int, int, int, Color32, int) Proportionally scale the sprite by dividing it into nine sections, protecting the corners and scaling/tiling the edges and center to maintain the image's integrity and prevent distortion. Declaration public static Cell[] DrawSlice(AngeSprite sprite, IRect rect, int borderL, int borderR, int borderD, int borderU, Color32 color, int z = -2147483648) Parameters Type Name Description AngeSprite sprite Artwork sprite IRect rect Rect position in global space int borderL Padding left in global space int borderR Padding right in global space int borderD Padding down in global space int borderU Padding up in global space Color32 color Color tint int z Z value for sorting rendering cells Returns Type Description Cell[] 9 Rendering cells for this sprite DrawSlice(AngeSprite, IRect, int, int, int, int, int) Proportionally scale the sprite by dividing it into nine sections, protecting the corners and scaling/tiling the edges and center to maintain the image's integrity and prevent distortion. Declaration public static Cell[] DrawSlice(AngeSprite sprite, IRect rect, int borderL, int borderR, int borderD, int borderU, int z = -2147483648) Parameters Type Name Description AngeSprite sprite Artwork sprite IRect rect Rect position in global space int borderL Padding left in global space int borderR Padding right in global space int borderD Padding down in global space int borderU Padding up in global space int z Z value for sorting rendering cells Returns Type Description Cell[] 9 Rendering cells for this sprite DrawSlice(AngeSprite, int, int, int, int, int, int, int, Color32, int) Proportionally scale the sprite by dividing it into nine sections, protecting the corners and scaling/tiling the edges and center to maintain the image's integrity and prevent distortion. Declaration public static Cell[] DrawSlice(AngeSprite sprite, int x, int y, int pivotX, int pivotY, int rotation, int width, int height, Color32 color, int z = -2147483648) Parameters Type Name Description AngeSprite sprite Artwork sprite int x Position in global space int y Position in global space int pivotX 0 means \"x\" align with left edge. 1000 means \"x\" align with right edge. int pivotY 0 means \"y\" align with bottom edge. 1000 means \"y\" align with top edge. int rotation Rotation in degree. 90 means facing right. int width Size in global space int height Size in global space Color32 color Color tint int z Z value for sorting rendering cells Returns Type Description Cell[] 9 Rendering cells for this sprite DrawSlice(AngeSprite, int, int, int, int, int, int, int, int) Proportionally scale the sprite by dividing it into nine sections, protecting the corners and scaling/tiling the edges and center to maintain the image's integrity and prevent distortion. Declaration public static Cell[] DrawSlice(AngeSprite sprite, int x, int y, int pivotX, int pivotY, int rotation, int width, int height, int z = -2147483648) Parameters Type Name Description AngeSprite sprite Artwork sprite int x Position in global space int y Position in global space int pivotX 0 means \"x\" align with left edge. 1000 means \"x\" align with right edge. int pivotY 0 means \"y\" align with bottom edge. 1000 means \"y\" align with top edge. int rotation Rotation in degree. 90 means facing right. int width Size in global space int height Size in global space int z Z value for sorting rendering cells Returns Type Description Cell[] 9 Rendering cells for this sprite DrawSlice(AngeSprite, int, int, int, int, int, int, int, int, int, int, int, Color32, int) Proportionally scale the sprite by dividing it into nine sections, protecting the corners and scaling/tiling the edges and center to maintain the image's integrity and prevent distortion. Declaration public static Cell[] DrawSlice(AngeSprite sprite, int x, int y, int pivotX, int pivotY, int rotation, int width, int height, int borderL, int borderR, int borderD, int borderU, Color32 color, int z = -2147483648) Parameters Type Name Description AngeSprite sprite Artwork sprite int x Position in global space int y Position in global space int pivotX 0 means \"x\" align with left edge. 1000 means \"x\" align with right edge. int pivotY 0 means \"y\" align with bottom edge. 1000 means \"y\" align with top edge. int rotation Rotation in degree. 90 means facing right. int width Size in global space int height Size in global space int borderL Padding left in global space int borderR Padding right in global space int borderD Padding down in global space int borderU Padding up in global space Color32 color Color tint int z Z value for sorting rendering cells Returns Type Description Cell[] 9 Rendering cells for this sprite DrawSlice(AngeSprite, int, int, int, int, int, int, int, int, int, int, int, bool[], Color32, int) Proportionally scale the sprite by dividing it into nine sections, protecting the corners and scaling/tiling the edges and center to maintain the image's integrity and prevent distortion. Declaration public static Cell[] DrawSlice(AngeSprite sprite, int x, int y, int pivotX, int pivotY, int rotation, int width, int height, int borderL, int borderR, int borderD, int borderU, bool[] partIgnore, Color32 color, int z) Parameters Type Name Description AngeSprite sprite Artwork sprite int x Position in global space int y Position in global space int pivotX 0 means \"x\" align with left edge. 1000 means \"x\" align with right edge. int pivotY 0 means \"y\" align with bottom edge. 1000 means \"y\" align with top edge. int rotation Rotation in degree. 90 means facing right. int width Size in global space int height Size in global space int borderL Padding left in global space int borderR Padding right in global space int borderD Padding down in global space int borderU Padding up in global space bool[] partIgnore Which part should be ignored. Set to true to exclude that part. Color32 color Color tint int z Z value for sorting rendering cells Returns Type Description Cell[] 9 Rendering cells for this sprite DrawSlice(AngeSprite, int, int, int, int, int, int, int, int, int, int, int, int) Proportionally scale the sprite by dividing it into nine sections, protecting the corners and scaling/tiling the edges and center to maintain the image's integrity and prevent distortion. Declaration public static Cell[] DrawSlice(AngeSprite sprite, int x, int y, int pivotX, int pivotY, int rotation, int width, int height, int borderL, int borderR, int borderD, int borderU, int z = -2147483648) Parameters Type Name Description AngeSprite sprite Artwork sprite int x Position in global space int y Position in global space int pivotX 0 means \"x\" align with left edge. 1000 means \"x\" align with right edge. int pivotY 0 means \"y\" align with bottom edge. 1000 means \"y\" align with top edge. int rotation Rotation in degree. 90 means facing right. int width Size in global space int height Size in global space int borderL Padding left in global space int borderR Padding right in global space int borderD Padding down in global space int borderU Padding up in global space int z Z value for sorting rendering cells Returns Type Description Cell[] 9 Rendering cells for this sprite DrawSlice(SpriteCode, IRect) Proportionally scale the sprite by dividing it into nine sections, protecting the corners and scaling/tiling the edges and center to maintain the image's integrity and prevent distortion. Declaration public static Cell[] DrawSlice(SpriteCode globalID, IRect rect) Parameters Type Name Description SpriteCode globalID Artwork sprite ID IRect rect Rect position in global space Returns Type Description Cell[] 9 Rendering cells for this sprite DrawSlice(SpriteCode, IRect, Color32, int) Proportionally scale the sprite by dividing it into nine sections, protecting the corners and scaling/tiling the edges and center to maintain the image's integrity and prevent distortion. Declaration public static Cell[] DrawSlice(SpriteCode globalID, IRect rect, Color32 color, int z = -2147483648) Parameters Type Name Description SpriteCode globalID Artwork sprite ID IRect rect Rect position in global space Color32 color Color tint int z Z value for sorting rendering cells Returns Type Description Cell[] 9 Rendering cells for this sprite DrawSlice(SpriteCode, IRect, int, int, int, int, Color32, int) Proportionally scale the sprite by dividing it into nine sections, protecting the corners and scaling/tiling the edges and center to maintain the image's integrity and prevent distortion. Declaration public static Cell[] DrawSlice(SpriteCode globalID, IRect rect, int borderL, int borderR, int borderD, int borderU, Color32 color, int z = -2147483648) Parameters Type Name Description SpriteCode globalID Artwork sprite ID IRect rect Rect position in global space int borderL Padding left in global space int borderR Padding right in global space int borderD Padding down in global space int borderU Padding up in global space Color32 color Color tint int z Z value for sorting rendering cells Returns Type Description Cell[] 9 Rendering cells for this sprite DrawSlice(SpriteCode, IRect, int, int, int, int, int) Proportionally scale the sprite by dividing it into nine sections, protecting the corners and scaling/tiling the edges and center to maintain the image's integrity and prevent distortion. Declaration public static Cell[] DrawSlice(SpriteCode globalID, IRect rect, int borderL, int borderR, int borderD, int borderU, int z = -2147483648) Parameters Type Name Description SpriteCode globalID Artwork sprite ID IRect rect Rect position in global space int borderL Padding left in global space int borderR Padding right in global space int borderD Padding down in global space int borderU Padding up in global space int z Z value for sorting rendering cells Returns Type Description Cell[] 9 Rendering cells for this sprite DrawSlice(SpriteCode, int, int, int, int, int, int, int, Color32, int) Proportionally scale the sprite by dividing it into nine sections, protecting the corners and scaling/tiling the edges and center to maintain the image's integrity and prevent distortion. Declaration public static Cell[] DrawSlice(SpriteCode globalID, int x, int y, int pivotX, int pivotY, int rotation, int width, int height, Color32 color, int z = -2147483648) Parameters Type Name Description SpriteCode globalID Artwork sprite ID int x Position in global space int y Position in global space int pivotX 0 means \"x\" align with left edge. 1000 means \"x\" align with right edge. int pivotY 0 means \"y\" align with bottom edge. 1000 means \"y\" align with top edge. int rotation Rotation in degree. 90 means facing right. int width Size in global space int height Size in global space Color32 color Color tint int z Z value for sorting rendering cells Returns Type Description Cell[] 9 Rendering cells for this sprite DrawSlice(SpriteCode, int, int, int, int, int, int, int, int) Proportionally scale the sprite by dividing it into nine sections, protecting the corners and scaling/tiling the edges and center to maintain the image's integrity and prevent distortion. Declaration public static Cell[] DrawSlice(SpriteCode globalID, int x, int y, int pivotX, int pivotY, int rotation, int width, int height, int z = -2147483648) Parameters Type Name Description SpriteCode globalID Artwork sprite ID int x Position in global space int y Position in global space int pivotX 0 means \"x\" align with left edge. 1000 means \"x\" align with right edge. int pivotY 0 means \"y\" align with bottom edge. 1000 means \"y\" align with top edge. int rotation Rotation in degree. 90 means facing right. int width Size in global space int height Size in global space int z Z value for sorting rendering cells Returns Type Description Cell[] 9 Rendering cells for this sprite DrawSlice(SpriteCode, int, int, int, int, int, int, int, int, int, int, int, Color32, int) Proportionally scale the sprite by dividing it into nine sections, protecting the corners and scaling/tiling the edges and center to maintain the image's integrity and prevent distortion. Declaration public static Cell[] DrawSlice(SpriteCode globalID, int x, int y, int pivotX, int pivotY, int rotation, int width, int height, int borderL, int borderR, int borderD, int borderU, Color32 color, int z = -2147483648) Parameters Type Name Description SpriteCode globalID Artwork sprite ID int x Position in global space int y Position in global space int pivotX 0 means \"x\" align with left edge. 1000 means \"x\" align with right edge. int pivotY 0 means \"y\" align with bottom edge. 1000 means \"y\" align with top edge. int rotation Rotation in degree. 90 means facing right. int width Size in global space int height Size in global space int borderL Padding left in global space int borderR Padding right in global space int borderD Padding down in global space int borderU Padding up in global space Color32 color Color tint int z Z value for sorting rendering cells Returns Type Description Cell[] 9 Rendering cells for this sprite DrawSlice(SpriteCode, int, int, int, int, int, int, int, int, int, int, int, bool[], Color32, int) Proportionally scale the sprite by dividing it into nine sections, protecting the corners and scaling/tiling the edges and center to maintain the image's integrity and prevent distortion. Declaration public static Cell[] DrawSlice(SpriteCode globalID, int x, int y, int pivotX, int pivotY, int rotation, int width, int height, int borderL, int borderR, int borderD, int borderU, bool[] partIgnore, Color32 color, int z = -2147483648) Parameters Type Name Description SpriteCode globalID Artwork sprite ID int x Position in global space int y Position in global space int pivotX 0 means \"x\" align with left edge. 1000 means \"x\" align with right edge. int pivotY 0 means \"y\" align with bottom edge. 1000 means \"y\" align with top edge. int rotation Rotation in degree. 90 means facing right. int width Size in global space int height Size in global space int borderL Padding left in global space int borderR Padding right in global space int borderD Padding down in global space int borderU Padding up in global space bool[] partIgnore Which part should be ignored. Set to true to exclude that part. Color32 color Color tint int z Z value for sorting rendering cells Returns Type Description Cell[] 9 Rendering cells for this sprite DrawSlice(SpriteCode, int, int, int, int, int, int, int, int, int, int, int, int) Proportionally scale the sprite by dividing it into nine sections, protecting the corners and scaling/tiling the edges and center to maintain the image's integrity and prevent distortion. Declaration public static Cell[] DrawSlice(SpriteCode globalID, int x, int y, int pivotX, int pivotY, int rotation, int width, int height, int borderL, int borderR, int borderD, int borderU, int z = -2147483648) Parameters Type Name Description SpriteCode globalID Artwork sprite ID int x Position in global space int y Position in global space int pivotX 0 means \"x\" align with left edge. 1000 means \"x\" align with right edge. int pivotY 0 means \"y\" align with bottom edge. 1000 means \"y\" align with top edge. int rotation Rotation in degree. 90 means facing right. int width Size in global space int height Size in global space int borderL Padding left in global space int borderR Padding right in global space int borderD Padding down in global space int borderU Padding up in global space int z Z value for sorting rendering cells Returns Type Description Cell[] 9 Rendering cells for this sprite DrawSlice(int, IRect) Proportionally scale the sprite by dividing it into nine sections, protecting the corners and scaling/tiling the edges and center to maintain the image's integrity and prevent distortion. Declaration public static Cell[] DrawSlice(int globalID, IRect rect) Parameters Type Name Description int globalID Artwork sprite ID IRect rect Rect position in global space Returns Type Description Cell[] 9 Rendering cells for this sprite DrawSlice(int, IRect, Color32, int) Proportionally scale the sprite by dividing it into nine sections, protecting the corners and scaling/tiling the edges and center to maintain the image's integrity and prevent distortion. Declaration public static Cell[] DrawSlice(int globalID, IRect rect, Color32 color, int z = -2147483648) Parameters Type Name Description int globalID Artwork sprite ID IRect rect Rect position in global space Color32 color Color tint int z Z value for sorting rendering cells Returns Type Description Cell[] 9 Rendering cells for this sprite DrawSlice(int, IRect, int, int, int, int, Color32, int) Proportionally scale the sprite by dividing it into nine sections, protecting the corners and scaling/tiling the edges and center to maintain the image's integrity and prevent distortion. Declaration public static Cell[] DrawSlice(int globalID, IRect rect, int borderL, int borderR, int borderD, int borderU, Color32 color, int z = -2147483648) Parameters Type Name Description int globalID Artwork sprite ID IRect rect Rect position in global space int borderL Padding left in global space int borderR Padding right in global space int borderD Padding down in global space int borderU Padding up in global space Color32 color Color tint int z Z value for sorting rendering cells Returns Type Description Cell[] 9 Rendering cells for this sprite DrawSlice(int, IRect, int, int, int, int, int) Proportionally scale the sprite by dividing it into nine sections, protecting the corners and scaling/tiling the edges and center to maintain the image's integrity and prevent distortion. Declaration public static Cell[] DrawSlice(int globalID, IRect rect, int borderL, int borderR, int borderD, int borderU, int z = -2147483648) Parameters Type Name Description int globalID Artwork sprite ID IRect rect Rect position in global space int borderL Padding left in global space int borderR Padding right in global space int borderD Padding down in global space int borderU Padding up in global space int z Z value for sorting rendering cells Returns Type Description Cell[] 9 Rendering cells for this sprite DrawSlice(int, int, int, int, int, int, int, int, Color32, int) Proportionally scale the sprite by dividing it into nine sections, protecting the corners and scaling/tiling the edges and center to maintain the image's integrity and prevent distortion. Declaration public static Cell[] DrawSlice(int globalID, int x, int y, int pivotX, int pivotY, int rotation, int width, int height, Color32 color, int z = -2147483648) Parameters Type Name Description int globalID Artwork sprite ID int x Position in global space int y Position in global space int pivotX 0 means \"x\" align with left edge. 1000 means \"x\" align with right edge. int pivotY 0 means \"y\" align with bottom edge. 1000 means \"y\" align with top edge. int rotation Rotation in degree. 90 means facing right. int width Size in global space int height Size in global space Color32 color Color tint int z Z value for sorting rendering cells Returns Type Description Cell[] 9 Rendering cells for this sprite DrawSlice(int, int, int, int, int, int, int, int, int) Proportionally scale the sprite by dividing it into nine sections, protecting the corners and scaling/tiling the edges and center to maintain the image's integrity and prevent distortion. Declaration public static Cell[] DrawSlice(int globalID, int x, int y, int pivotX, int pivotY, int rotation, int width, int height, int z = -2147483648) Parameters Type Name Description int globalID Artwork sprite ID int x Position in global space int y Position in global space int pivotX 0 means \"x\" align with left edge. 1000 means \"x\" align with right edge. int pivotY 0 means \"y\" align with bottom edge. 1000 means \"y\" align with top edge. int rotation Rotation in degree. 90 means facing right. int width Size in global space int height Size in global space int z Z value for sorting rendering cells Returns Type Description Cell[] 9 Rendering cells for this sprite DrawSlice(int, int, int, int, int, int, int, int, int, int, int, int, Color32, int) Proportionally scale the sprite by dividing it into nine sections, protecting the corners and scaling/tiling the edges and center to maintain the image's integrity and prevent distortion. Declaration public static Cell[] DrawSlice(int globalID, int x, int y, int pivotX, int pivotY, int rotation, int width, int height, int borderL, int borderR, int borderD, int borderU, Color32 color, int z = -2147483648) Parameters Type Name Description int globalID Artwork sprite ID int x Position in global space int y Position in global space int pivotX 0 means \"x\" align with left edge. 1000 means \"x\" align with right edge. int pivotY 0 means \"y\" align with bottom edge. 1000 means \"y\" align with top edge. int rotation Rotation in degree. 90 means facing right. int width Size in global space int height Size in global space int borderL Padding left in global space int borderR Padding right in global space int borderD Padding down in global space int borderU Padding up in global space Color32 color Color tint int z Z value for sorting rendering cells Returns Type Description Cell[] 9 Rendering cells for this sprite DrawSlice(int, int, int, int, int, int, int, int, int, int, int, int, bool[], Color32, int) Proportionally scale the sprite by dividing it into nine sections, protecting the corners and scaling/tiling the edges and center to maintain the image's integrity and prevent distortion. Declaration public static Cell[] DrawSlice(int globalID, int x, int y, int pivotX, int pivotY, int rotation, int width, int height, int borderL, int borderR, int borderD, int borderU, bool[] partIgnore, Color32 color, int z = -2147483648) Parameters Type Name Description int globalID Artwork sprite ID int x Position in global space int y Position in global space int pivotX 0 means \"x\" align with left edge. 1000 means \"x\" align with right edge. int pivotY 0 means \"y\" align with bottom edge. 1000 means \"y\" align with top edge. int rotation Rotation in degree. 90 means facing right. int width Size in global space int height Size in global space int borderL Padding left in global space int borderR Padding right in global space int borderD Padding down in global space int borderU Padding up in global space bool[] partIgnore Which part should be ignored. Set to true to exclude that part. Color32 color Color tint int z Z value for sorting rendering cells Returns Type Description Cell[] 9 Rendering cells for this sprite DrawSlice(int, int, int, int, int, int, int, int, int, int, int, int, int) Proportionally scale the sprite by dividing it into nine sections, protecting the corners and scaling/tiling the edges and center to maintain the image's integrity and prevent distortion. Declaration public static Cell[] DrawSlice(int globalID, int x, int y, int pivotX, int pivotY, int rotation, int width, int height, int borderL, int borderR, int borderD, int borderU, int z = -2147483648) Parameters Type Name Description int globalID Artwork sprite ID int x Position in global space int y Position in global space int pivotX 0 means \"x\" align with left edge. 1000 means \"x\" align with right edge. int pivotY 0 means \"y\" align with bottom edge. 1000 means \"y\" align with top edge. int rotation Rotation in degree. 90 means facing right. int width Size in global space int height Size in global space int borderL Padding left in global space int borderR Padding right in global space int borderD Padding down in global space int borderU Padding up in global space int z Z value for sorting rendering cells Returns Type Description Cell[] 9 Rendering cells for this sprite GetAltSheet(int) Get instance of the alt sheet at given index Declaration public static Sheet GetAltSheet(int index) GetAnimationGroupDuration(SpriteGroup) Get total duration in frame of an animation group Declaration public static int GetAnimationGroupDuration(SpriteGroup group) GetAnimationGroupDuration(int) Get total duration in frame of an animation group Declaration public static int GetAnimationGroupDuration(int chainID) GetCells(int, out Span<Cell>, out int) Get cells inside given layer Declaration public static bool GetCells(int layer, out Span<Cell> cells, out int count) Parameters Type Name Description int layer Use RenderLayer.XXX to get this value Returns Type Description bool True if cells founded GetCells(out Span<Cell>, out int) Get cells inside using layer Declaration public static bool GetCells(out Span<Cell> cells, out int count) Returns Type Description bool True if cells founded GetLayerCapacity(int) Get total size of the layer Declaration public static int GetLayerCapacity(int layerIndex) Parameters Type Name Description int layerIndex Use RenderLayer.XXX to get this value GetLayerTint(int) Get current color tint for given layer Declaration public static Color32 GetLayerTint(int layer) Parameters Type Name Description int layer Use RenderLayer.XXX to get this value GetUsedCellCount() Get current cells count inside the using layer Declaration public static int GetUsedCellCount() GetUsedCellCount(int) Get current cells count inside given layer Declaration public static int GetUsedCellCount(int layerIndex) Parameters Type Name Description int layerIndex Use RenderLayer.XXX to get this value HasSprite(int) True if sprite with given ID is founded Declaration public static bool HasSprite(int globalID) HasSpriteGroup(int) True if sprite group with given ID is founded Declaration public static bool HasSpriteGroup(int groupID) HasSpriteGroup(int, out int) True if sprite group with given ID is founded Declaration public static bool HasSpriteGroup(int groupID, out int groupLength) LoadMainSheet() Load main sheet from built-in path Declaration public static void LoadMainSheet() MultLayerTint(int, Color32) Make current color tint multiply given value for given layer Declaration public static void MultLayerTint(int layer, Color32 tint) Parameters Type Name Description int layer Use RenderLayer.XXX to get this value OverrideFontIdAndIndex(int, int) Add/set internal cache for font id with index Declaration public static void OverrideFontIdAndIndex(int fontId, int fontIndex) RemoveAltSheet(int) Remove alt sheet at index from system Declaration public static void RemoveAltSheet(int index) RequireCharForPool(char, out CharSprite) Require given text character from internal caching Declaration public static bool RequireCharForPool(char c, out CharSprite charSprite) RequireCharForPool(char, int, out CharSprite) Require given text character from internal caching Declaration public static bool RequireCharForPool(char c, int fontIndex, out CharSprite charSprite) ResetLayer(int) Clear the whole render layer Declaration public static void ResetLayer(int layerIndex) Parameters Type Name Description int layerIndex Use RenderLayer.XXX to get this value ReverseUnsortedCells(int) Sort cells inside layer reversely with default comparer Declaration public static void ReverseUnsortedCells(int layerIndex) Parameters Type Name Description int layerIndex Use RenderLayer.XXX to get this value SetFontID(int) Set current using font from ID Declaration public static void SetFontID(int id) SetFontIndex(int) Set current using font from index Declaration public static void SetFontIndex(int index) SetLayer(int) Set current using layer. Use RenderLayer.XXX to get this value. Declaration public static void SetLayer(int index) SetLayerTint(int, Color32) Set current color tint for given layer Declaration public static void SetLayerTint(int layer, Color32 tint) Parameters Type Name Description int layer Use RenderLayer.XXX to get this value SetLayerToAdditive() Declaration public static void SetLayerToAdditive() SetLayerToBehind() Declaration public static void SetLayerToBehind() SetLayerToColor() Declaration public static void SetLayerToColor() SetLayerToDefault() Declaration public static void SetLayerToDefault() SetLayerToMultiply() Declaration public static void SetLayerToMultiply() SetLayerToShadow() Declaration public static void SetLayerToShadow() SetLayerToWallpaper() Declaration public static void SetLayerToWallpaper() SortLayer(int) Sort cells inside layer with default comparer Declaration public static void SortLayer(int layerIndex) Parameters Type Name Description int layerIndex Use RenderLayer.XXX to get this value TryGetAnimationGroup(int, out SpriteGroup) Get instance of animation group Declaration public static bool TryGetAnimationGroup(int groupID, out SpriteGroup group) Returns Type Description bool True if animation group founded TryGetSprite(int, out AngeSprite, bool) Get instance of sprite Declaration public static bool TryGetSprite(int globalID, out AngeSprite sprite, bool ignoreAnimation = true) bool ignoreAnimation True if ignore animation group with \"globalID\" as chainID Returns Type Description bool True if sprite founded TryGetSpriteForGizmos(int, out AngeSprite) Get sprite for rendering UI/icon/gizmos Declaration public static bool TryGetSpriteForGizmos(int artworkID, out AngeSprite sprite) Returns Type Description bool True if sprite founded TryGetSpriteFromGroup(int, int, out AngeSprite, bool, bool, bool) Get sprite instance from given group ID and index Declaration public static bool TryGetSpriteFromGroup(int groupID, int index, out AngeSprite sprite, bool loopIndex = true, bool clampIndex = true, bool ignoreAnimatedWhenFailback = true) bool loopIndex True if the index loop bool clampIndex True if clamp the index when out of range bool ignoreAnimatedWhenFailback True if don't use animated sprite when returning the failback sprite Returns Type Description bool True if sprite founded TryGetSpriteGroup(int, out SpriteGroup) Get instance of sprite group Declaration public static bool TryGetSpriteGroup(int groupID, out SpriteGroup group) Returns Type Description bool True if sprite group founded TryGetTextureFromSheet<T>(int, int, out T) Get texture object for given sprite from sheet Declaration public static bool TryGetTextureFromSheet<T>(int spriteID, int sheetIndex, out T texture) Returns Type Description bool True if the texture founded Type Parameters Name Description T Type of texture object"
  },
  "api/AngeliA.RendererLayerCapacityAttribute.html": {
    "href": "api/AngeliA.RendererLayerCapacityAttribute.html",
    "title": "Class RendererLayerCapacityAttribute | AngeliA",
    "summary": "Class RendererLayerCapacityAttribute Max rendering cell count for the layer Constructors RendererLayerCapacityAttribute(int, int) Max rendering cell count for the layer Declaration public RendererLayerCapacityAttribute(int layer, int capacity)"
  },
  "api/AngeliA.RestartGameTask.html": {
    "href": "api/AngeliA.RestartGameTask.html",
    "title": "Class RestartGameTask | AngeliA",
    "summary": "Class RestartGameTask Task that restart the game Fields TYPE_ID Declaration public static readonly int TYPE_ID Methods FrameUpdate() This function is used to handle the internal logic. Declaration public override TaskResult FrameUpdate() Returns Type Description TaskResult \"Continue\" if the task should keep on after this frame. \"End\" if the task should end. Overrides Task.FrameUpdate()"
  },
  "api/AngeliA.ReverseCellsScope.html": {
    "href": "api/AngeliA.ReverseCellsScope.html",
    "title": "Struct ReverseCellsScope | AngeliA",
    "summary": "Struct ReverseCellsScope Scope that make rendering cells reverse in sorting order Implements IDisposable Examples using AngeliA; namespace AngeliaGame; public class Example { [OnGameUpdate] internal static void OnGameUpdate () { using (new ReverseCellsScope()) { // Rendering cells inside will be reversed in sorting order } } } Constructors ReverseCellsScope() Scope that make rendering cells reverse in sorting order Declaration public ReverseCellsScope() Methods Dispose() Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources. Declaration public void Dispose()"
  },
  "api/AngeliA.RigCallingMessage.CharRequirementData.html": {
    "href": "api/AngeliA.RigCallingMessage.CharRequirementData.html",
    "title": "Struct RigCallingMessage.CharRequirementData | AngeliA",
    "summary": "Struct RigCallingMessage.CharRequirementData Fields Advance Declaration public float Advance Char Declaration public char Char FontIndex Declaration public int FontIndex Offset Declaration public FRect Offset Valid Declaration public bool Valid"
  },
  "api/AngeliA.RigCallingMessage.html": {
    "href": "api/AngeliA.RigCallingMessage.html",
    "title": "Class RigCallingMessage | AngeliA",
    "summary": "Class RigCallingMessage Fields CharRequiredCount Declaration public int CharRequiredCount CursorInScreen Declaration public bool CursorInScreen DeviceData Declaration public byte DeviceData EffectEnable Declaration public byte EffectEnable GamepadLeftStickDirectionX Declaration public float GamepadLeftStickDirectionX GamepadLeftStickDirectionY Declaration public float GamepadLeftStickDirectionY GamepadRightStickDirectionX Declaration public float GamepadRightStickDirectionX GamepadRightStickDirectionY Declaration public float GamepadRightStickDirectionY GamepadStickHolding Declaration public byte GamepadStickHolding HoldingGamepadKeyCount Declaration public byte HoldingGamepadKeyCount HoldingGamepadKeys Declaration public readonly int[] HoldingGamepadKeys HoldingKeyboardKeyCount Declaration public byte HoldingKeyboardKeyCount HoldingKeyboardKeys Declaration public readonly int[] HoldingKeyboardKeys IsMusicPlaying Declaration public bool IsMusicPlaying MonitorHeight Declaration public int MonitorHeight MonitorWidth Declaration public int MonitorWidth MousePosX Declaration public int MousePosX MousePosY Declaration public int MousePosY MouseScrollDelta Declaration public int MouseScrollDelta PressedCharCount Declaration public byte PressedCharCount PressedChars Declaration public readonly char[] PressedChars PressedGuiKeys Declaration public readonly int[] PressedGuiKeys PressedKeyCount Declaration public byte PressedKeyCount REQUIRE_CHAR_MAX_COUNT Declaration public const int REQUIRE_CHAR_MAX_COUNT = 128 REQUIRE_GIZMOS_TEXTURE_MAX_COUNT Declaration public const int REQUIRE_GIZMOS_TEXTURE_MAX_COUNT = 128 RequireGameMessageInvoke Declaration public byte RequireGameMessageInvoke RequireRemoteSettingCount Declaration public int RequireRemoteSettingCount RequireRemoteSettings Declaration public Int2[] RequireRemoteSettings RequiredChars Declaration public RigCallingMessage.CharRequirementData[] RequiredChars RequiringWindowIndex Declaration public byte RequiringWindowIndex ScreenHeight Declaration public int ScreenHeight ScreenWidth Declaration public int ScreenWidth Properties IgnoringMouseInput Declaration public bool IgnoringMouseInput { get; } Methods LoadDataFromEngine(bool, bool, int, int, byte) Declaration public void LoadDataFromEngine(bool ignoreMouseInput, bool ignoreKeyInput, int paddingL, int paddingR, byte requiringWindowIndex) ReadDataFromPipe(byte*) Declaration public void ReadDataFromPipe(byte* pointer) RequireClearCharPoolInvoke() Declaration public void RequireClearCharPoolInvoke() RequireDrawColliderGizmos() Declaration public void RequireDrawColliderGizmos() RequireEntityClicker() Declaration public void RequireEntityClicker() RequireFocusInvoke() Declaration public void RequireFocusInvoke() RequireLostFocusInvoke() Declaration public void RequireLostFocusInvoke() RequireRemoteSetting(Saving<bool>) Declaration public void RequireRemoteSetting(Saving<bool> data) RequireRemoteSetting(Saving<int>) Declaration public void RequireRemoteSetting(Saving<int> data) RequireRemoteSetting(int, bool) Declaration public void RequireRemoteSetting(int id, bool data) RequireRemoteSetting(int, int) Declaration public void RequireRemoteSetting(int id, int data) WriteDataToPipe(byte*) Declaration public void WriteDataToPipe(byte* pointer)"
  },
  "api/AngeliA.RigRespondMessage.DoodleRectData.html": {
    "href": "api/AngeliA.RigRespondMessage.DoodleRectData.html",
    "title": "Struct RigRespondMessage.DoodleRectData | AngeliA",
    "summary": "Struct RigRespondMessage.DoodleRectData Fields Color Declaration public Color32 Color Rect Declaration public FRect Rect"
  },
  "api/AngeliA.RigRespondMessage.DoodleWorldData.html": {
    "href": "api/AngeliA.RigRespondMessage.DoodleWorldData.html",
    "title": "Struct RigRespondMessage.DoodleWorldData | AngeliA",
    "summary": "Struct RigRespondMessage.DoodleWorldData Fields IgnoreMask Declaration public byte IgnoreMask ScreenRect Declaration public FRect ScreenRect WorldUnitRange Declaration public IRect WorldUnitRange Z Declaration public int Z"
  },
  "api/AngeliA.RigRespondMessage.GizmosLineData.html": {
    "href": "api/AngeliA.RigRespondMessage.GizmosLineData.html",
    "title": "Struct RigRespondMessage.GizmosLineData | AngeliA",
    "summary": "Struct RigRespondMessage.GizmosLineData Fields Color Declaration public Color32 Color End Declaration public Int2 End Start Declaration public Int2 Start Thickness Declaration public int Thickness"
  },
  "api/AngeliA.RigRespondMessage.GizmosRectData.html": {
    "href": "api/AngeliA.RigRespondMessage.GizmosRectData.html",
    "title": "Struct RigRespondMessage.GizmosRectData | AngeliA",
    "summary": "Struct RigRespondMessage.GizmosRectData Fields ColorBL Declaration public Color32 ColorBL ColorBR Declaration public Color32 ColorBR ColorTL Declaration public Color32 ColorTL ColorTR Declaration public Color32 ColorTR Rect Declaration public IRect Rect"
  },
  "api/AngeliA.RigRespondMessage.PlaySoundRequirement.html": {
    "href": "api/AngeliA.RigRespondMessage.PlaySoundRequirement.html",
    "title": "Class RigRespondMessage.PlaySoundRequirement | AngeliA",
    "summary": "Class RigRespondMessage.PlaySoundRequirement Fields ID Declaration public int ID Pan Declaration public float Pan Pitch Declaration public float Pitch Volume Declaration public float Volume"
  },
  "api/AngeliA.RigRespondMessage.RenderingCellData.html": {
    "href": "api/AngeliA.RigRespondMessage.RenderingCellData.html",
    "title": "Class RigRespondMessage.RenderingCellData | AngeliA",
    "summary": "Class RigRespondMessage.RenderingCellData Fields BorderSide Declaration public Alignment BorderSide Color Declaration public Color32 Color FontIndex Declaration public int FontIndex Height Declaration public int Height PivotX Declaration public float PivotX PivotY Declaration public float PivotY Rotation1000 Declaration public int Rotation1000 Shift Declaration public Int4 Shift SpriteID Declaration public int SpriteID TextSpriteChar Declaration public char TextSpriteChar Width Declaration public int Width X Declaration public int X Y Declaration public int Y Z Declaration public int Z"
  },
  "api/AngeliA.RigRespondMessage.RenderingLayerData.html": {
    "href": "api/AngeliA.RigRespondMessage.RenderingLayerData.html",
    "title": "Class RigRespondMessage.RenderingLayerData | AngeliA",
    "summary": "Class RigRespondMessage.RenderingLayerData Constructors RenderingLayerData(int) Declaration public RenderingLayerData(int capacity) Fields CellCount Declaration public int CellCount Cells Declaration public readonly RigRespondMessage.RenderingCellData[] Cells layerTint Declaration public Color32 layerTint"
  },
  "api/AngeliA.RigRespondMessage.html": {
    "href": "api/AngeliA.RigRespondMessage.html",
    "title": "Class RigRespondMessage | AngeliA",
    "summary": "Class RigRespondMessage Fields AudioActionRequirement Declaration public byte AudioActionRequirement CharRequiringCount Declaration public int CharRequiringCount EffectEnable Declaration public byte EffectEnable EntityCapacities Declaration public int[] EntityCapacities EntityUsages Declaration public int[] EntityUsages GamePlaying Declaration public bool GamePlaying GlobalFrame Declaration public int GlobalFrame HasEffectParams Declaration public byte HasEffectParams IsTyping Declaration public bool IsTyping Layers Declaration public RigRespondMessage.RenderingLayerData[] Layers MusicVolume Declaration public int MusicVolume PlaySoundRequirements Declaration public RigRespondMessage.PlaySoundRequirement[] PlaySoundRequirements REQUIRE_CHAR_MAX_COUNT Declaration public const int REQUIRE_CHAR_MAX_COUNT = 64 RenderCapacities Declaration public int[] RenderCapacities RenderUsages Declaration public int[] RenderUsages RequireChars Declaration public char[] RequireChars RequireCharsFontIndex Declaration public int[] RequireCharsFontIndex RequireDoodleRectCount Declaration public int RequireDoodleRectCount RequireDoodleRects Declaration public RigRespondMessage.DoodleRectData[] RequireDoodleRects RequireDoodleRenderingOffset Declaration public Float2 RequireDoodleRenderingOffset RequireDoodleRenderingZoom Declaration public float RequireDoodleRenderingZoom RequireDoodleWorldCount Declaration public int RequireDoodleWorldCount RequireDoodleWorlds Declaration public RigRespondMessage.DoodleWorldData[] RequireDoodleWorlds RequireGizmosLineCount Declaration public int RequireGizmosLineCount RequireGizmosLines Declaration public RigRespondMessage.GizmosLineData[] RequireGizmosLines RequireGizmosRectCount Declaration public int RequireGizmosRectCount RequireGizmosRects Declaration public RigRespondMessage.GizmosRectData[] RequireGizmosRects RequirePlayMusicFromStart Declaration public bool RequirePlayMusicFromStart RequirePlayMusicID Declaration public int RequirePlayMusicID RequirePlaySoundCount Declaration public int RequirePlaySoundCount RequireResetDoodle Declaration public bool RequireResetDoodle RequireSetCursorIndex Declaration public int RequireSetCursorIndex RequireSetMusicVolume Declaration public int RequireSetMusicVolume RequireSetSoundVolume Declaration public int RequireSetSoundVolume RequireShowDoodle Declaration public bool RequireShowDoodle SelectingPlayerID Declaration public int SelectingPlayerID SkyBottom Declaration public Color32 SkyBottom SkyTop Declaration public Color32 SkyTop SoundVolume Declaration public int SoundVolume TargetFramerate Declaration public int TargetFramerate ViewHeight Declaration public int ViewHeight ViewWidth Declaration public int ViewWidth ViewX Declaration public int ViewX ViewY Declaration public int ViewY ViewZ Declaration public int ViewZ e_DarkenAmount Declaration public float e_DarkenAmount e_DarkenStep Declaration public float e_DarkenStep e_LightenAmount Declaration public float e_LightenAmount e_LightenStep Declaration public float e_LightenStep e_TintColor Declaration public Color32 e_TintColor e_VigFeather Declaration public float e_VigFeather e_VigOffsetX Declaration public float e_VigOffsetX e_VigOffsetY Declaration public float e_VigOffsetY e_VigRadius Declaration public float e_VigRadius e_VigRound Declaration public float e_VigRound Methods ApplyRenderingToEngine(Universe, int, int, int, bool, bool) Declaration public void ApplyRenderingToEngine(Universe universe, int sheetIndex, int leftPadding, int rightPadding, bool ignoreInGameGizmos, bool ignoreViewRect) ApplyToEngine(RigCallingMessage, bool) Declaration public void ApplyToEngine(RigCallingMessage callingMessage, bool ignoreMouseInput) ReadDataFromPipe(byte*) Declaration public void ReadDataFromPipe(byte* pointer) Reset(bool) Declaration public void Reset(bool clearLastRendering = false) TransationStart() Declaration public void TransationStart() WriteDataToPipe(byte*) Declaration public void WriteDataToPipe(byte* pointer)"
  },
  "api/AngeliA.RigTransceiver.html": {
    "href": "api/AngeliA.RigTransceiver.html",
    "title": "Class RigTransceiver | AngeliA",
    "summary": "Class RigTransceiver Constructors RigTransceiver(string) Declaration public RigTransceiver(string exePath) Fields CallingMessage Declaration public readonly RigCallingMessage CallingMessage ERROR_EXE_FILE_NOT_FOUND Declaration public const int ERROR_EXE_FILE_NOT_FOUND = -100 ERROR_LIB_FILE_NOT_FOUND Declaration public const int ERROR_LIB_FILE_NOT_FOUND = -103 ERROR_PROCESS_FAIL_TO_START Declaration public const int ERROR_PROCESS_FAIL_TO_START = -101 ERROR_UNKNOWN Declaration public const int ERROR_UNKNOWN = -102 RespondMessage Declaration public readonly RigRespondMessage RespondMessage Properties LastRigViewHeight Declaration public int? LastRigViewHeight { get; } LastRigViewPos Declaration public Int3? LastRigViewPos { get; } LogWithPrefix Declaration public bool LogWithPrefix { get; set; } RigProcessRunning Declaration public bool RigProcessRunning { get; } Methods Abort() Declaration public void Abort() Call(bool, bool, int, int, byte) Declaration public void Call(bool ignoreMouseInput, bool ignoreKeyInput, int paddingLeft, int paddingRight, byte requiringWindowIndex) Quit() Declaration public void Quit() Respond(Universe, int, bool, bool, bool) Declaration public bool Respond(Universe universe, int sheetIndex, bool updateViewCache, bool ignoreRendering, bool ignoreInGameGizmos) SetStartViewPos(int, int, int, int) Declaration public void SetStartViewPos(int viewX, int viewY, int viewZ, int viewHeight) Start(string, string) Declaration public int Start(string gameBuildFolder, string universePath) UpdateLastRespondedRender(Universe, int, bool, bool, bool) Declaration public void UpdateLastRespondedRender(Universe universe, int sheetIndex, bool coverWithBlackTint, bool ignoreInGameGizmos, bool ignoreViewRect)"
  },
  "api/AngeliA.Rigidbody.html": {
    "href": "api/AngeliA.Rigidbody.html",
    "title": "Class Rigidbody | AngeliA",
    "summary": "Class Rigidbody Class for the entities which apply general physics by the system Implements IMapItem ICarrier Fields CollisionMask Which physics layers should this entity collide with Declaration public readonly FrameBasedInt CollisionMask FallingGravityScale Amount of gravity apply to this entity when it's moving downward (0 means 0%, 1000 means 100%) Declaration public readonly FrameBasedInt FallingGravityScale GlobalGravity Gravity value that applys to all rigidbody Declaration public static readonly FrameBasedInt GlobalGravity IgnoreGravity True if this entity currently should not apply gravity Declaration public readonly FrameBasedBool IgnoreGravity IgnoreGroundCheck If this entity currently check for touching ground Declaration public readonly FrameBasedBool IgnoreGroundCheck IgnoreInsideGround If this entity currently check for stuck inside ground Declaration public readonly FrameBasedBool IgnoreInsideGround IgnoreMomentum True if this entity currently should not apply any momentum Declaration public readonly FrameBasedBool IgnoreMomentum IgnoreOneway True if this entity currently should not collide with oneway gates Declaration public readonly FrameBasedBool IgnoreOneway IgnorePhysics True if this entity currently should not apply any physics logic Declaration public readonly FrameBasedBool IgnorePhysics MomentumX Velocity X that keep applying on this entity. Every frame the value will move to 0 by \"decay\" Declaration public (int value, int decay) MomentumX MomentumY Velocity Y that keep applying on this entity. Every frame the value will move to 0 by \"decay\" Declaration public (int value, int decay) MomentumY RisingGravityScale Amount of gravity apply to this entity when it's moving upward (0 means 0%, 1000 means 100%) Declaration public readonly FrameBasedInt RisingGravityScale Properties AirDragX Amount of horizontal speed lost every frame Declaration public virtual int AirDragX { get; } AirDragY Amount of vertical speed lost every frame Declaration public virtual int AirDragY { get; } AllowBeingPush True if this entity can be push by other Declaration public virtual bool AllowBeingPush { get; } BounceSpeedRate How many speed remain after this entity collide on another entity (0 means 0%, 1000 means 100%) Declaration public int BounceSpeedRate { get; set; } CarryOtherOnTop Trhe if this entity can carry other ICarrier on top Declaration public virtual bool CarryOtherOnTop { get; } DeltaPositionX Changes of position X at current frame in global space Declaration public int DeltaPositionX { get; } DeltaPositionY Changes of position Y at current frame in global space Declaration public int DeltaPositionY { get; } DestroyWhenInsideGround True if this entity despawns when it's inside ground Declaration public virtual bool DestroyWhenInsideGround { get; } EjectWhenInsideGround True if this entity try to move out of ground automatically when it stuck inside ground Declaration public virtual bool EjectWhenInsideGround { get; } FacingRight True if this entity is facing right side Declaration public virtual bool FacingRight { get; } GroundedID Block ID of the current touching ground block Declaration public int GroundedID { get; set; } InWater True if this entity is inside water Declaration public bool InWater { get; } IsGrounded True if this entity is touching ground Declaration public bool IsGrounded { get; protected set; } IsInsideGround True if this entity is stucking inside the ground Declaration public bool IsInsideGround { get; } MaxGravitySpeed Limitation for speed from gravity Declaration public virtual int MaxGravitySpeed { get; } OffsetX Position offset between X value and Rect.x value Declaration public int OffsetX { get; set; } OffsetY Position offset between Y value and Rect.y value Declaration public int OffsetY { get; set; } PhysicalLayer Which physical layer should this entity fill it's collider in Declaration public virtual int PhysicalLayer { get; } PrevX Position X for the last frame in global space Declaration public int PrevX { get; } PrevY Position Y for the last frame in global space Declaration public int PrevY { get; } Rect Rect position of this entity in global space Declaration public override IRect Rect { get; } Overrides Entity.Rect RequireDodgeOverlap True if this entity do not react to the colliders which already overlaps on it. Declaration public bool RequireDodgeOverlap { get; set; } SelfCollisionMask Intrinsic physics layers this entity should collide with Declaration public virtual int SelfCollisionMask { get; } VelocityX Horizontal velocity at current frame Declaration public int VelocityX { get; set; } VelocityY Vertical velocity at current frame Declaration public int VelocityY { get; set; } WaterFloatSpeed Amount of upward speed apply when the entity inside water Declaration public virtual int WaterFloatSpeed { get; } WaterSpeedRate Amount of speed scales when entity inside water (0 means 0%, 1000 means 100%) Declaration public virtual int WaterSpeedRate { get; } Methods CancelMakeGrounded() Stop making this entity marked as touching ground Declaration public void CancelMakeGrounded() FillAsOnewayUp(int, int) Make this entity fill upward oneway gate into the physics system for given frames long Declaration public void FillAsOnewayUp(int duration = 0, int priority = 0) FillAsTrigger(int, int) Make this entity fill trigger into the physics system for given frames long Declaration public void FillAsTrigger(int duration = 0, int priority = 0) FirstUpdate() [1/4] This function is called every frame when entity is in stage. Prioritize using this function to fill collider in to physics system. Declaration public override void FirstUpdate() Overrides Entity.FirstUpdate() GroundedCheck() Function that holds the touching ground checking logic Declaration protected virtual bool GroundedCheck() InsideGroundCheck() Function that holds the stuck inside ground checking logic Declaration protected virtual bool InsideGroundCheck() MakeGrounded(int, int) Mark this entity as touching ground for given frames long Declaration public void MakeGrounded(int frame = 1, int blockID = 0) int blockID Ground block ID OnActivated() This function is called when entity enter the stage Declaration public override void OnActivated() Overrides Entity.OnActivated() OnInsideGroundDestroyed() This function is called when this entity is despawn by being stuck inside ground Declaration protected virtual void OnInsideGroundDestroyed() PerformGroundCheck(IRect, out PhysicsCell) Return true if the entity is touching ground Declaration public bool PerformGroundCheck(IRect rect, out PhysicsCell hit) Parameters Type Name Description IRect rect Blocks overlap this rect range will be count as touching ground PhysicsCell hit The physics data from the ground block PerformMove(int, int, bool) Make this entity move with physics rules at this frame Declaration public void PerformMove(int speedX, int speedY, bool ignoreCarry = false) Parameters Type Name Description int speedX Delta position X int speedY Delta position Y bool ignoreCarry True if this entity don't carry other on top Push(int) This function is called when the entity is being pushed Declaration public virtual void Push(int speedX) RefreshPrevPosition() Declaration protected void RefreshPrevPosition() Update() [3/4] This function is called every frame when entity is in stage. Prioritize using this function to update physics logic. Declaration public override void Update() Overrides Entity.Update()"
  },
  "api/AngeliA.RotateCellScope.html": {
    "href": "api/AngeliA.RotateCellScope.html",
    "title": "Struct RotateCellScope | AngeliA",
    "summary": "Struct RotateCellScope Scope that make rendering cells rotate Implements IDisposable Examples using AngeliA; namespace AngeliaGame; public class Example { [OnGameUpdate] internal static void OnGameUpdate () { var cameraRect = Renderer.CameraRect; int rot = QTest.Int(\"Rot\", 0, 0, 360); int pointX = QTest.Int(\"Pivot X\", 4096, 0, 4096 * 2); int pointY = QTest.Int(\"Pivot Y\", 2048, 0, 4096); QTest.Mark(new Int2(cameraRect.x + pointX, cameraRect.y + pointY)); using (var scroll = new RotateCellScope(rot, cameraRect.x + pointX, cameraRect.y + pointY)) { Renderer.Draw( BuiltInSprite.ICON_ENTITY, cameraRect.CenterX(), cameraRect.CenterY(), 500, 500, 0, 512, 512 ); } } } Constructors RotateCellScope() Scope that make rendering cells rotate Declaration public RotateCellScope() RotateCellScope(int, int, int, bool) Scope that make rendering cells rotate Declaration public RotateCellScope(int rotation, int pointX = -2147483648, int pointY = -2147483648, bool keepOriginalRotation = false) int pointX Orientation point X in global space int pointY Orientation point Y in global space bool keepOriginalRotation True if only change the position of cells (not rotation) Methods Dispose() Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources. Declaration public void Dispose()"
  },
  "api/AngeliA.Rule.html": {
    "href": "api/AngeliA.Rule.html",
    "title": "Enum Rule | AngeliA",
    "summary": "Enum Rule Single checking rule for auto tiling map blocks Fields Name Description AnyTile True if the target block is not 0 Empty True if the target block is 0 NotSameTile True if the target block is the different with source SameTile True if the target block is the same with source Whatever Always true, do not check"
  },
  "api/AngeliA.Saving-1.html": {
    "href": "api/AngeliA.Saving-1.html",
    "title": "Class Saving<T> | AngeliA",
    "summary": "Class Saving<T> Data that auto save into player saving data Type Parameters Name Description T Type of the data Constructors Saving(string, T, SavingLocation) Declaration public Saving(string key, T defaultValue, SavingLocation location) Parameters Type Name Description string key Unique key to identify this data SavingLocation location Set to \"global\" if this data shares between all saving slots Properties DefaultValue Default value Declaration public T DefaultValue { get; init; } Value Current value it holds Declaration public T Value { get; set; } Methods GetValue(bool) Get the value it currently holds Declaration public T GetValue(bool forceLoad = false) SetValue(T, bool) Set the value it currently holds Declaration public void SetValue(T value, bool forceSave = false) StringToValue(string) Convert given string into the value Declaration protected abstract T StringToValue(string str) ValueToString(T) Convert given value into string data Declaration protected abstract string ValueToString(T value)"
  },
  "api/AngeliA.Saving.html": {
    "href": "api/AngeliA.Saving.html",
    "title": "Class Saving | AngeliA",
    "summary": "Class Saving Data that auto save into player saving data Properties ID AngeHash of the \"Key\" Declaration public int ID { get; init; } Key Unique key to identify this data Declaration public string Key { get; init; }"
  },
  "api/AngeliA.SavingBool.html": {
    "href": "api/AngeliA.SavingBool.html",
    "title": "Class SavingBool | AngeliA",
    "summary": "Class SavingBool Boolean data that auto save into player saving data Constructors SavingBool(string, bool, SavingLocation) Boolean data that auto save into player saving data Declaration public SavingBool(string key, bool defaultValue, SavingLocation location) Parameters Type Name Description string key Unique key to identify this data SavingLocation location Set to \"global\" if this data shares between all saving slots Methods StringToValue(string) Convert given string into the value Declaration protected override bool StringToValue(string str) Overrides Saving<bool>.StringToValue(string) ValueToString(bool) Convert given value into string data Declaration protected override string ValueToString(bool value) Overrides Saving<bool>.ValueToString(bool)"
  },
  "api/AngeliA.SavingColor32.html": {
    "href": "api/AngeliA.SavingColor32.html",
    "title": "Class SavingColor32 | AngeliA",
    "summary": "Class SavingColor32 Color data that auto save into player saving data Constructors SavingColor32(string, Color32, SavingLocation) Color data that auto save into player saving data Declaration public SavingColor32(string key, Color32 defaultValue, SavingLocation location) Parameters Type Name Description string key Unique key to identify this data SavingLocation location Set to \"global\" if this data shares between all saving slots Methods StringToValue(string) Convert given string into the value Declaration protected override Color32 StringToValue(string str) Overrides Saving<Color32>.StringToValue(string) ValueToString(Color32) Convert given value into string data Declaration protected override string ValueToString(Color32 value) Overrides Saving<Color32>.ValueToString(Color32)"
  },
  "api/AngeliA.SavingColor32NoAlpha.html": {
    "href": "api/AngeliA.SavingColor32NoAlpha.html",
    "title": "Class SavingColor32NoAlpha | AngeliA",
    "summary": "Class SavingColor32NoAlpha Color data without alpha value that auto save into player saving data Constructors SavingColor32NoAlpha(string, Color32, SavingLocation) Color data without alpha value that auto save into player saving data Declaration public SavingColor32NoAlpha(string key, Color32 defaultValue, SavingLocation location) Parameters Type Name Description string key Unique key to identify this data SavingLocation location Set to \"global\" if this data shares between all saving slots Methods StringToValue(string) Convert given string into the value Declaration protected override Color32 StringToValue(string str) Overrides Saving<Color32>.StringToValue(string) ValueToString(Color32) Convert given value into string data Declaration protected override string ValueToString(Color32 value) Overrides Saving<Color32>.ValueToString(Color32)"
  },
  "api/AngeliA.SavingHotkey.html": {
    "href": "api/AngeliA.SavingHotkey.html",
    "title": "Class SavingHotkey | AngeliA",
    "summary": "Class SavingHotkey Hotkey data that auto save into player saving data Constructors SavingHotkey(string, Hotkey, SavingLocation) Hotkey data that auto save into player saving data Declaration public SavingHotkey(string key, Hotkey defaultValue, SavingLocation location) Parameters Type Name Description string key Unique key to identify this data SavingLocation location Set to \"global\" if this data shares between all saving slots Methods StringToValue(string) Convert given string into the value Declaration protected override Hotkey StringToValue(string str) Overrides Saving<Hotkey>.StringToValue(string) ValueToString(Hotkey) Convert given value into string data Declaration protected override string ValueToString(Hotkey value) Overrides Saving<Hotkey>.ValueToString(Hotkey)"
  },
  "api/AngeliA.SavingInt.html": {
    "href": "api/AngeliA.SavingInt.html",
    "title": "Class SavingInt | AngeliA",
    "summary": "Class SavingInt Intager data that auto save into player saving data Constructors SavingInt(string, int, SavingLocation) Intager data that auto save into player saving data Declaration public SavingInt(string key, int defaultValue, SavingLocation location) Parameters Type Name Description string key Unique key to identify this data SavingLocation location Set to \"global\" if this data shares between all saving slots Methods StringToValue(string) Convert given string into the value Declaration protected override int StringToValue(string str) Overrides Saving<int>.StringToValue(string) ValueToString(int) Convert given value into string data Declaration protected override string ValueToString(int value) Overrides Saving<int>.ValueToString(int)"
  },
  "api/AngeliA.SavingLocation.html": {
    "href": "api/AngeliA.SavingLocation.html",
    "title": "Enum SavingLocation | AngeliA",
    "summary": "Enum SavingLocation Where should the saving data local inside the disk Fields Name Description Global Shared between all saving slot Slot Only for it's own saving slot"
  },
  "api/AngeliA.SavingString.html": {
    "href": "api/AngeliA.SavingString.html",
    "title": "Class SavingString | AngeliA",
    "summary": "Class SavingString String data that auto save into player saving data Constructors SavingString(string, string, SavingLocation) String data that auto save into player saving data Declaration public SavingString(string key, string defaultValue, SavingLocation location) Parameters Type Name Description string key Unique key to identify this data SavingLocation location Set to \"global\" if this data shares between all saving slots Methods StringToValue(string) Convert given string into the value Declaration protected override string StringToValue(string str) Overrides Saving<string>.StringToValue(string) ValueToString(string) Convert given value into string data Declaration protected override string ValueToString(string value) Overrides Saving<string>.ValueToString(string)"
  },
  "api/AngeliA.SavingSystem.html": {
    "href": "api/AngeliA.SavingSystem.html",
    "title": "Class SavingSystem | AngeliA",
    "summary": "Class SavingSystem Core system for handle data that auto keeps inside disk. Properties FileLoaded True if the internal pool is loaded from file Declaration public static bool FileLoaded { get; } IsDirty True if there's any unsaved change Declaration public static bool IsDirty { get; set; } PoolReady True if the internal pool is ready to use Declaration public static bool PoolReady { get; } PoolVersion Data version of the internal pool Declaration public static int PoolVersion { get; } Methods HasKey(Saving) True if the given key exists in the internal pool Declaration public static bool HasKey(Saving saving) HasKey(int) True if the given key exists in the internal pool Declaration public static bool HasKey(int id)"
  },
  "api/AngeliA.SelectPlayerTask.html": {
    "href": "api/AngeliA.SelectPlayerTask.html",
    "title": "Class SelectPlayerTask | AngeliA",
    "summary": "Class SelectPlayerTask Task that select current player Fields TYPE_ID Declaration public static readonly int TYPE_ID Methods FrameUpdate() This function is used to handle the internal logic. Declaration public override TaskResult FrameUpdate() Returns Type Description TaskResult \"Continue\" if the task should keep on after this frame. \"End\" if the task should end. Overrides Task.FrameUpdate()"
  },
  "api/AngeliA.Sheet.html": {
    "href": "api/AngeliA.Sheet.html",
    "title": "Class Sheet | AngeliA",
    "summary": "Class Sheet Artwork sheet that holds sprites, sprite groups, atlas and textures data for rendering Constructors Sheet(bool, bool, bool) Artwork sheet that holds sprites, sprite groups, atlas and textures data for rendering Declaration public Sheet(bool ignoreGroups = false, bool ignoreSpriteWithPaletteTag = true, bool ignoreTextureAndPixels = false) Parameters Type Name Description bool ignoreGroups True if do not require sprite group bool ignoreSpriteWithPaletteTag True if do not load sprites with Tag.Palette bool ignoreTextureAndPixels True if do not load pixel data and do not create textures Sheet(List<AngeSprite>, List<Atlas>, bool, bool, bool) Create a sheet with given data Declaration public Sheet(List<AngeSprite> sprites, List<Atlas> atlasInfo, bool ignoreGroups = false, bool ignoreSpriteWithIgnoreTag = true, bool ignoreTextureAndPixels = false) bool ignoreGroups True if do not require sprite group bool ignoreSpriteWithIgnoreTag True if do not load sprites with Tag.Palette bool ignoreTextureAndPixels True if do not load pixel data and do not create textures Fields Atlas All atlas instances inside this sheet Declaration public readonly List<Atlas> Atlas AtlasPool Declaration public readonly Dictionary<int, Atlas> AtlasPool GroupPool Declaration public readonly Dictionary<int, SpriteGroup> GroupPool Groups All sprite group instances inside this sheet Declaration public readonly List<SpriteGroup> Groups SpritePool Declaration public readonly Dictionary<int, AngeSprite> SpritePool Sprites All sprite instances inside this sheet Declaration public readonly List<AngeSprite> Sprites TexturePool Declaration public readonly Dictionary<int, object> TexturePool Methods AddSprite(AngeSprite) Add the given sprite into this sheet Declaration public bool AddSprite(AngeSprite sprite) Returns Type Description bool True if the sprite is successfuly added Clear() Clear all content inside this sheet Declaration public void Clear() CombineAllSheetInFolder(string, bool, string) Add all content from sheets from given folder into this sheet. Declaration public void CombineAllSheetInFolder(string folderPath, bool topOnly = false, string ignoreNameWithExtension = \"\") string ignoreNameWithExtension Ignore sheets with this name CombineSheet(Sheet, bool) Add all content from given sheet into this sheet. Declaration public void CombineSheet(Sheet sheet, bool renameDuplicateSprites = false) bool renameDuplicateSprites Set to false to skip the sprite with same name ContainGroup(int) True if there is a group with given ID. Declaration public bool ContainGroup(int id) ContainSprite(int) True if there is a sprite with given ID. Declaration public bool ContainSprite(int id) CreateSprite(string, IRect, int) Create a sprite without add into this sheet Declaration public AngeSprite CreateSprite(string name, IRect pixelRect, int atlasID) GetAvailableSpriteName(string) Get a new sprite name that be add into this sheet Declaration public string GetAvailableSpriteName(string basicName) GetSpriteAnimationDuration(SpriteGroup) Get how long does the given animation group takes in frame Declaration public int GetSpriteAnimationDuration(SpriteGroup aniGroup) IndexOfGroup(int) Find the group's index in the list Declaration public int IndexOfGroup(int id) Returns Type Description int -1 if the group not found IndexOfSprite(int) Find the sprite's index in the list Declaration public int IndexOfSprite(int id) Returns Type Description int -1 if the sprite not found LoadFromDisk(string) Declaration public bool LoadFromDisk(string path) MoveAtlas(int, int, bool) Move the atlas inside the atlas list Declaration public void MoveAtlas(int from, int to, bool intoFolder = false) RemoveAllAtlasAndSpritesInsideExcept(int) Declaration public void RemoveAllAtlasAndSpritesInsideExcept(int ignoreAtlasID) RemoveAtlasAndAllSpritesInside(int) Declaration public void RemoveAtlasAndAllSpritesInside(int atlasIndex) RemoveGroupAndAllSpritesInside(int) Declaration public void RemoveGroupAndAllSpritesInside(int groupIndex) RemoveSprite(int) Declaration public void RemoveSprite(int spriteIndex) RenameAtlas(int, string) Declaration public bool RenameAtlas(int atlasID, string newName) RenameSprite(AngeSprite, string) Declaration public bool RenameSprite(AngeSprite sprite, string newName) RenameSprite(int, string) Declaration public bool RenameSprite(int id, string newName) SaveToDisk(string) Declaration public void SaveToDisk(string path) SetData(List<AngeSprite>, List<Atlas>) Set the sprites and atlas data of this sheet Declaration public void SetData(List<AngeSprite> sprites, List<Atlas> atlasInfo) SyncSpritePixelsIntoTexturePool(AngeSprite) Update rendering texture for the sprite if the pixel content changed Declaration public void SyncSpritePixelsIntoTexturePool(AngeSprite sprite) TryGetSpriteFromAnimationFrame(SpriteGroup, int, out AngeSprite, int) Get current showing sprite from a animation group Declaration public bool TryGetSpriteFromAnimationFrame(SpriteGroup group, int localFrame, out AngeSprite sprite, int loopStart = -1) int localFrame Animation frame start from 0 AngeSprite sprite Result sprite int loopStart Sprite index this animation start to play after it reach the end. Set to -1 to use loop start value from group. Returns Type Description bool True if the sprite is successfuly found TryGetTextureFromPool(int, out object) Get texture for rendering from given ID Declaration public bool TryGetTextureFromPool(int spriteID, out object texture)"
  },
  "api/AngeliA.SheetCharacterRenderer.html": {
    "href": "api/AngeliA.SheetCharacterRenderer.html",
    "title": "Class SheetCharacterRenderer | AngeliA",
    "summary": "Class SheetCharacterRenderer Constructors SheetCharacterRenderer(Character) Declaration public SheetCharacterRenderer(Character target) Properties RenderedCell Declaration public Cell RenderedCell { get; } Methods LateUpdate() Declaration public override void LateUpdate() Overrides CharacterRenderer.LateUpdate()"
  },
  "api/AngeliA.SheetIndexScope.html": {
    "href": "api/AngeliA.SheetIndexScope.html",
    "title": "Struct SheetIndexScope | AngeliA",
    "summary": "Struct SheetIndexScope Scope that change sheet index of the rendering cells inside Implements IDisposable Examples using AngeliA; namespace AngeliaGame; public class Example { [OnGameUpdate] internal static void OnGameUpdate () { using (new SheetIndexScope(/*Your Sheet Index*/)) { // Rendering cells inside will render with given sheet } } } Constructors SheetIndexScope() Scope that change sheet index of the rendering cells inside Declaration public SheetIndexScope() SheetIndexScope(int) Scope that change sheet index of the rendering cells inside Declaration public SheetIndexScope(int sheet) Methods Dispose() Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources. Declaration public void Dispose()"
  },
  "api/AngeliA.ShiftCellsScope.html": {
    "href": "api/AngeliA.ShiftCellsScope.html",
    "title": "Struct ShiftCellsScope | AngeliA",
    "summary": "Struct ShiftCellsScope Scope that shift position of the rendering cells inside Implements IDisposable Examples using AngeliA; namespace AngeliaGame; public class Example { [OnGameUpdate] internal static void OnGameUpdate () { using (new ShiftCellsScope(/*Your Offset Position Here*/)) { // Rendering cells inside will offset their position } } } Constructors ShiftCellsScope() Scope that shift position of the rendering cells inside Declaration public ShiftCellsScope() ShiftCellsScope(Int2) Scope that shift position of the rendering cells inside Declaration public ShiftCellsScope(Int2 shift) Methods Dispose() Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources. Declaration public void Dispose()"
  },
  "api/AngeliA.Sky.html": {
    "href": "api/AngeliA.Sky.html",
    "title": "Class Sky | AngeliA",
    "summary": "Class Sky Core system handles background rendering of the game Properties GradientBottom Gradient for \"SkyTintBottomColor\" along in-game time Declaration public static ColorGradient GradientBottom { get; set; } GradientTop Gradient for \"SkyTintTopColor\" along in-game time Declaration public static ColorGradient GradientTop { get; set; } InGameDaytime01 Current in-game time (0 means 0:00. 0.5 means 12:00. 1 means 24:00) Declaration public static float InGameDaytime01 { get; } SkyTintBottomColor Bottom color of the sky liner gradient Declaration public static Color32 SkyTintBottomColor { get; } SkyTintTopColor Top color of the sky liner gradient Declaration public static Color32 SkyTintTopColor { get; } SunlightTint Gradient for \"SunlightTintColor\" along in-game time Declaration public static ColorGradient SunlightTint { get; set; } SunlightTintColor Tint color for day-light Declaration public static Color32 SunlightTintColor { get; } Methods ForceSkyboxTint(Color32, Color32, int) Make top and bottom sky tint gradient color into given colors for specified frames long Declaration public static void ForceSkyboxTint(Color32 top, Color32 bottom, int duration = 1) ForceSkyboxTint(Color32, int) Make both top and bottom sky tint gradient color into given color for specified frames long Declaration public static void ForceSkyboxTint(Color32 color, int duration = 1) GetInGameDaytimeFromRealTime() Get in-game time from current date time in real world Declaration public static float GetInGameDaytimeFromRealTime() Returns Type Description float (0 means 0:00. 0.5 means 12:00. 1 means 24:00) SetInGameDaytime(float) Set current in-game time. (0 means 0:00. 0.5 means 12:00. 1 means 24:00. -1 means real world time) Declaration public static void SetInGameDaytime(float newDaytime01)"
  },
  "api/AngeliA.SoundData.html": {
    "href": "api/AngeliA.SoundData.html",
    "title": "Class SoundData | AngeliA",
    "summary": "Class SoundData Fields LastPlayFrame Declaration public int LastPlayFrame SoundObjects Declaration public object[] SoundObjects StartFrames Declaration public int[] StartFrames"
  },
  "api/AngeliA.SpawnEntityTask.html": {
    "href": "api/AngeliA.SpawnEntityTask.html",
    "title": "Class SpawnEntityTask | AngeliA",
    "summary": "Class SpawnEntityTask Task that spawn given entity. Examples using AngeliA; namespace AngeliaGame; public class Example { [OnGameUpdate] internal static void OnGameUpdate () { if (TaskSystem.AddToLast(SpawnEntityTask.TYPE_ID) is SpawnEntityTask task) { task.EntityID = /*Target entity ID*/; task.X = /*Target X in global space*/; task.Y = /*Target Y in global space*/; } } } Fields EntityID Target entity ID Declaration public int EntityID TYPE_ID Declaration public static readonly int TYPE_ID X Target position X in global space Declaration public int X Y Target position Y in global space Declaration public int Y Methods FrameUpdate() This function is used to handle the internal logic. Declaration public override TaskResult FrameUpdate() Returns Type Description TaskResult \"Continue\" if the task should keep on after this frame. \"End\" if the task should end. Overrides Task.FrameUpdate()"
  },
  "api/AngeliA.SpriteCode.html": {
    "href": "api/AngeliA.SpriteCode.html",
    "title": "Class SpriteCode | AngeliA",
    "summary": "Class SpriteCode Quick setup for an artwork sprite Examples private static readonly SpriteCode SpriteCodeName = \"Sprite/Group name in artwork sheet\"; Constructors SpriteCode(string) Quick setup for an artwork sprite Declaration public SpriteCode(string name) Examples private static readonly SpriteCode SpriteCodeName = \"Sprite/Group name in artwork sheet\"; Fields ID Declaration public readonly int ID Properties Name Declaration public string Name { get; } Operators implicit operator int(SpriteCode) Declaration public static implicit operator int(SpriteCode code) implicit operator SpriteCode(string) Declaration public static implicit operator SpriteCode(string value)"
  },
  "api/AngeliA.SpriteGroup.html": {
    "href": "api/AngeliA.SpriteGroup.html",
    "title": "Class SpriteGroup | AngeliA",
    "summary": "Class SpriteGroup A chain of AngeSprites Fields Animated True if this group is animation group Declaration public bool Animated ID Unique ID of this group Declaration public int ID LoopStart Sprite index this animation start to play after it reach the end. Set to -1 for not loop. Declaration public int LoopStart MAX_COUNT Declaration public const int MAX_COUNT = 256 Name Unique name of this group Declaration public string Name Random True if this group should apply random paiting brush in map editor Declaration public bool Random Sprites Instance of sprite it holds Declaration public List<AngeSprite> Sprites WithRule True if this group contains sprite with auto tiling rule Declaration public bool WithRule Properties Count How many sprites does this group have Declaration public int Count { get; }"
  },
  "api/AngeliA.Stage.html": {
    "href": "api/AngeliA.Stage.html",
    "title": "Class Stage | AngeliA",
    "summary": "Class Stage Core system that handles entity spawning and despawning logic Fields SETTING_SET_VIEW_H ID for remote setting between engine and rigged game Declaration public const int SETTING_SET_VIEW_H = 921736238 SETTING_SET_VIEW_X ID for remote setting between engine and rigged game Declaration public const int SETTING_SET_VIEW_X = 921736235 SETTING_SET_VIEW_Y ID for remote setting between engine and rigged game Declaration public const int SETTING_SET_VIEW_Y = 921736236 SETTING_SET_VIEW_Z ID for remote setting between engine and rigged game Declaration public const int SETTING_SET_VIEW_Z = 921736237 Properties AntiSpawnRect Rect in global space that determine where a despawned entity should not respawn from map Declaration public static IRect AntiSpawnRect { get; } Enable True is the system is required for the game Declaration public static bool Enable { get; } Entities Current spawned entity instances for each layer Declaration public static Entity[][] Entities { get; } EntityCounts Current spawned entity count for each layers Declaration public static int[] EntityCounts { get; } IsReady True if the system is ready to use Declaration public static bool IsReady { get; } SpawnRect Rect in global space that determine where the entities need to be spawn from map Declaration public static IRect SpawnRect { get; } ViewRect Rect in global space that represents player view. Ascpect ratio of this rect keeps the same when user adjust application window size, so the actual rect range for rendering is Renderer.CameraRect. Declaration public static IRect ViewRect { get; } ViewZ Current position Z value Declaration public static int ViewZ { get; } Methods DespawnAllEntitiesOfType<E>(int) Declaration public static void DespawnAllEntitiesOfType<E>(int targetLayer = -1) where E : Entity Parameters Type Name Description int targetLayer Set to -1 to apply on all layers DespawnAllNonUiEntities(bool) Declaration public static void DespawnAllNonUiEntities(bool refreshImmediately = false) Parameters Type Name Description bool refreshImmediately True if refresh the active state inside this function FindEntity(int) Get instance of an spawned entity which have given type ID Declaration public static Entity FindEntity(int typeID) FindEntity<T>() Get instance of an spawned entity with type of T Declaration public static T FindEntity<T>() where T : Entity ForAllActiveEntities<E>(int) Iterate through all active entities inside given layer Declaration public static IEnumerable<E> ForAllActiveEntities<E>(int entityLayer = -1) where E : Entity Parameters Type Name Description int entityLayer Use EntityLayer.XXX to get this value. Set to -1 to target all layers Type Parameters Name Description E Type of target entity GetCameraCullingPadding() Get current expand padding for camera rect in global space Declaration public static Int4 GetCameraCullingPadding() GetEntityCapacity(int) Get max size limitation of target entity inside it's entity layer Declaration public static int GetEntityCapacity(int typeID) GetEntityType(int) Get System.Type for given type ID. Null if ID is invalid Declaration public static Type GetEntityType(int id) GetOrSpawnEntity(int, int, int) Get instance of an entity from stage first, if not found, spawn a new one. Declaration public static Entity GetOrSpawnEntity(int typeID, int x, int y) int x Initial position in global space when spawn a new one int y Initial position in global space when spawn a new one Returns Type Description Entity The entity instance. Null if not found GetOrSpawnEntity<T>(int, int) Get instance of an entity from stage first, if not found, spawn a new one. Declaration public static T GetOrSpawnEntity<T>(int x, int y) where T : Entity Parameters Type Name Description int x Initial position in global space when spawn a new one int y Initial position in global space when spawn a new one Returns Type Description T The entity instance. Null if not found GetSpawnedEntityCount(int) Get how many entities of given type is on stage currently Declaration public static int GetSpawnedEntityCount(int id) Parameters Type Name Description int id ID of the entity. Can be cached by typeof(YourEntity).AngeHash() IsEntityRequireDrawBehind(int) True if entity with given type ID should draw inside behind map layer Declaration public static bool IsEntityRequireDrawBehind(int id) IsEntityRequireReposition(int) True if the target entity keep it's position when out of range. This is done by setting the map block data. Declaration public static bool IsEntityRequireReposition(int typeID) IsValidEntityID(int) True if the given ID is a valid entity type ID in internal pool Declaration public static bool IsValidEntityID(int id) PeekOrGetEntity(int) Get instance of an unspawned entity from pool first, if not found, get a spawned one from the stage Declaration public static Entity PeekOrGetEntity(int typeID) Returns Type Description Entity The entity instance. Null if not found PeekOrGetEntity<T>() Get instance of an unspawned entity from pool first, if not found, get a spawned one from the stage Declaration public static T PeekOrGetEntity<T>() where T : Entity Returns Type Description T True if the instance is founded RemoveStagedEntity(Int3) Remove entity with given instance ID from StagedEntityPool Declaration public static void RemoveStagedEntity(Int3 instanceID) SetViewPositionDelay(int, int, int, int) Set view rect position at the end of current frame Declaration public static void SetViewPositionDelay(int x, int y, int lerp = 1000, int priority = -2147483648) int lerp Smooth amount (0 means no motion applys. 1000 means immediately applys) SetViewRectImmediately(IRect, bool, bool) Set view rect position in global space Declaration public static void SetViewRectImmediately(IRect newRect, bool remapAllRenderingCells = false, bool resetDelay = true) bool remapAllRenderingCells True if change position and size for all existing rendering cells bool resetDelay True if ignore all existing delay operation of view rect position/size SetViewSizeDelay(int, int, int, bool) Set view rect height at the end of current frame Declaration public static void SetViewSizeDelay(int height, int lerp = 1000, int priority = -2147483648, bool centralized = false) SetViewXDelay(int, int, int) Set view rect X at the end of current frame Declaration public static void SetViewXDelay(int x, int lerp = 1000, int priority = -2147483648) int lerp Smooth amount (0 means no motion applys. 1000 means immediately applys) SetViewYDelay(int, int, int) Set view rect Y at the end of current frame Declaration public static void SetViewYDelay(int y, int lerp = 1000, int priority = -2147483648) int lerp Smooth amount (0 means no motion applys. 1000 means immediately applys) SetViewZ(int, bool) Set current position Z Declaration public static void SetViewZ(int newZ, bool immediately = false) bool immediately True if the internal data is immediately change instead of change in the end of the frame SpawnEntity(int, int, int) Find an entity with given ID from internal pool and make it into the stage Declaration public static Entity SpawnEntity(int typeID, int x, int y) Parameters Type Name Description int typeID ID of the entity. Can be cached by typeof(YourEntity).AngeHash() int x Initial position in global space int y Initial position in global space Returns Type Description Entity Instance of the entity. Null when failed SpawnEntityFromWorld(int, int, int, int, int, int, bool) Find an entity with given ID from internal pool and make it into the stage. This function will make it an entity from map Declaration public static Entity SpawnEntityFromWorld(int typeID, int x, int y, int z, int reposDeltaX = 0, int reposDeltaY = 0, bool forceSpawn = false) Parameters Type Name Description int typeID ID of the entity. Can be cached by typeof(YourEntity).AngeHash() int x Initial position in global space int y Initial position in global space int z Z of the map position int reposDeltaX Offset in global space for entity reposition int reposDeltaY Offset in global space for entity reposition bool forceSpawn True if ignore the StagedEntityPool check and AntiSpawnRect check Returns Type Description Entity Instance of the entity. Null when failed SpawnEntity<T>(int, int) Find an entity with given ID from internal pool and make it into the stage Declaration public static T SpawnEntity<T>(int x, int y) where T : Entity Parameters Type Name Description int x Initial position in global space int y Initial position in global space Returns Type Description T Instance of the entity. Null when failed Type Parameters Name Description T Type of the entity TryFindEntity(int, out Entity) Get instance of an spawned entity which have given type ID Declaration public static bool TryFindEntity(int typeID, out Entity result) Returns Type Description bool True if the entity founded TryFindEntityNearby<E>(Int2, out E, Func<E, bool>) Get nearest instance of an spawned entity from given position with type of E Declaration public static bool TryFindEntityNearby<E>(Int2 pos, out E finalTarget, Func<E, bool> condition = null) Parameters Type Name Description Int2 pos (in global space) Func<E, bool> condition Only include the entity target when this function return true. Set to null to not having extra checking Returns Type Description bool True if entity founded TryFindEntity<E>(out E) Get instance of an spawned entity with type of E Declaration public static bool TryFindEntity<E>(out E result) where E : Entity Returns Type Description bool True if the entity founded TryGetEntities(int, out ReadOnlySpan<Entity>, out int) Get all entities inside given layer. The result array referenced by the span is cached. No heap pressure. Declaration public static bool TryGetEntities(int layer, out ReadOnlySpan<Entity> entities, out int count) Parameters Type Name Description int layer Use EntityLayer.XXX to get this value ReadOnlySpan<Entity> entities Result span int count How many entities are inside the result Returns Type Description bool True if the result is founded TryGetStagedEntity(Int3, out Entity) Get instance of an staged entity by instanceID from StagedEntityPool Declaration public static bool TryGetStagedEntity(Int3 instanceID, out Entity instance) Parameters Type Name Description Int3 instanceID Get this from Entity.InstanceID Returns Type Description bool True if the result is founded TryRepositionEntity(Entity, bool) Perform reposition logic of the entity instance. Declaration public static void TryRepositionEntity(Entity entity, bool carryThoughZ = false) bool carryThoughZ True if the entity is being keep into other map z-layer TrySpawnEntity(int, int, int, out Entity) Find an entity with given ID from internal pool and make it into the stage Declaration public static bool TrySpawnEntity(int typeID, int x, int y, out Entity entity) Parameters Type Name Description int typeID ID of the entity. Can be cached by typeof(YourEntity).AngeHash() int x Initial position in global space int y Initial position in global space Entity entity Instance of the entity Returns Type Description bool True if the entity is spawned TrySpawnEntity<T>(int, int, out T) Find an entity with given ID from internal pool and make it into the stage Declaration public static bool TrySpawnEntity<T>(int x, int y, out T entity) where T : Entity Parameters Type Name Description int x Initial position in global space int y Initial position in global space T entity Instance of the entity Returns Type Description bool True if the entity is spawned Type Parameters Name Description T Type of the entity"
  },
  "api/AngeliA.SummonAttackness.html": {
    "href": "api/AngeliA.SummonAttackness.html",
    "title": "Class SummonAttackness | AngeliA",
    "summary": "Class SummonAttackness Behavior class that handles attack logic for summon type character Constructors SummonAttackness(Character) Behavior class that handles attack logic for summon type character Declaration public SummonAttackness(Character character)"
  },
  "api/AngeliA.SwitchItem-1.html": {
    "href": "api/AngeliA.SwitchItem-1.html",
    "title": "Class SwitchItem<TargetItem> | AngeliA",
    "summary": "Class SwitchItem<TargetItem> A type of item that switch to another item when use Implements IMapItem Type Parameters Name Description TargetItem The item it will switch to Constructors SwitchItem() Declaration public SwitchItem() Properties MaxStackCount Count limitation for multiple items inside one inventory slot Declaration public override int MaxStackCount { get; } Overrides Item.MaxStackCount TargetID ID of the item it will switch to Declaration public int TargetID { get; init; } Methods CanUse(Character) True if this item can be use at current frame Declaration public override bool CanUse(Character character) Overrides Item.CanUse(Character) Use(Character, int, int, out bool) Perform the logic when the item get used Declaration public override bool Use(Character character, int inventoryID, int itemIndex, out bool consume) int inventoryID Inventory ID of this holder int itemIndex Index of this item inside the inventory bool consume True if the item should disappear after being used Returns Type Description bool True if the item is used Overrides Item.Use(Character, int, int, out bool)"
  },
  "api/AngeliA.Tag.html": {
    "href": "api/AngeliA.Tag.html",
    "title": "Enum Tag | AngeliA",
    "summary": "Enum Tag Fields Name Description Climb Can be climb by characters and allow them move horizontaly ClimbStable Can be climb by characters with fixed horizontal position ExplosiveDamage Damage from explosion FireDamage Damage from fire GrabSide Target can be grab from side GrabTop Target can be grab from below HideLimb Target cloth require limb behind not be render IceDamage Damage from ice LightenDamage Damage from electricity LoopStart Target sprite is the start frame of the loop MagicalDamage Damage from magic Mark Used in general perpose NoSlide Target can not be slide as wall None No tag OnewayDown Oneway gate facing downward OnewayLeft Oneway gate facing leftward OnewayRight Oneway gate facing rightward OnewayUp Oneway gate facing upward Palette Target sprite is a palette for pixel editing. PhysicalDamage General type of damage PoisonDamage Damage from poison Random When painting sprite from this group with map editor. It randomly select one sprite from this group and paint. ShowLimb Target cloth require limb behind to be render Slide Target can be slide as wall Slip Target is slippery Unbreackable Target can not be break or pick Water Target is water"
  },
  "api/AngeliA.TagUtil.html": {
    "href": "api/AngeliA.TagUtil.html",
    "title": "Class TagUtil | AngeliA",
    "summary": "Class TagUtil Utility class for tags Fields ALL_TAG_NAMES Enum name of tags Declaration public static readonly string[] ALL_TAG_NAMES AllDamages Add damage tags Declaration public const Tag AllDamages = PhysicalDamage | ExplosiveDamage | MagicalDamage | PoisonDamage | FireDamage | IceDamage | LightenDamage NonExplosiveDamage All damage tags without explosive damage Declaration public const Tag NonExplosiveDamage = PhysicalDamage | MagicalDamage | PoisonDamage | FireDamage | IceDamage | LightenDamage TAG_COUNT Total count of tags Declaration public const int TAG_COUNT = 26 Methods GetTagAt(int) Get tag at given index Declaration public static Tag GetTagAt(int index) HasAll(Tag, Tag) True if source tag contains all tags from mask Declaration public static bool HasAll(this Tag self, Tag mask) HasAny(Tag, Tag) True if source tag contains any tag from mask Declaration public static bool HasAny(this Tag self, Tag mask)"
  },
  "api/AngeliA.Tail.html": {
    "href": "api/AngeliA.Tail.html",
    "title": "Class Tail | AngeliA",
    "summary": "Class Tail Tail body gadget for pose-style character Properties AngleAmountRoot Total rotating angle amount for limb rotation (0 means 0%, 1000 means 100%) Declaration protected virtual int AngleAmountRoot { get; } AngleAmountSubsequent Subsequent sugment's rotating angle amount for limb rotation (0 means 0%, 1000 means 100%) Declaration protected virtual int AngleAmountSubsequent { get; } AngleOffset Total offset angle for the root sugment Declaration protected virtual int AngleOffset { get; } FrameDelta Looping duration for the less influential part limb rotation Declaration protected virtual int FrameDelta { get; } FrameLen Looping duration for the limb rotation Declaration protected virtual int FrameLen { get; } Frequency Motion frequency for the limb rotation, smaller means faster Declaration protected virtual int Frequency { get; } FrequencyAlt Motion frequency for the less influential part limb rotation, smaller means faster Declaration protected virtual int FrequencyAlt { get; } GadgetType Type of this body gadget Declaration public override sealed BodyGadgetType GadgetType { get; } Overrides BodyGadget.GadgetType LimbGrow Size-growing amount for limb rotation (0 means 0%, 1000 means 100%) Declaration protected virtual int LimbGrow { get; } OffsetX Total position offset X Declaration protected virtual int OffsetX { get; } OffsetY Total position offset Y Declaration protected virtual int OffsetY { get; } SpriteLoaded True if artwork sprite is loaded Declaration public override bool SpriteLoaded { get; } Overrides BodyGadget.SpriteLoaded Methods DrawGadget(PoseCharacterRenderer) Render the gadget for the given character Declaration public override void DrawGadget(PoseCharacterRenderer renderer) Overrides BodyGadget.DrawGadget(PoseCharacterRenderer) DrawGadgetFromPool(PoseCharacterRenderer) Declaration public static void DrawGadgetFromPool(PoseCharacterRenderer renderer) DrawGadgetGizmos(IRect, Color32, int) Render the gadget as gizmos Declaration public override void DrawGadgetGizmos(IRect rect, Color32 tint, int z) Parameters Type Name Description IRect rect Global rect position Color32 tint Color tint int z Z position for sorting Overrides BodyGadget.DrawGadgetGizmos(IRect, Color32, int) DrawSpriteAsSimpleTail(OrientedSprite, int, int, bool, bool, bool, int) Draw given artwork sprite as tail with only one segment Declaration public static void DrawSpriteAsSimpleTail(OrientedSprite oSprite, int x, int y, bool facingFront, bool facingRight, bool facingUp, int z = -2147483648) Parameters Type Name Description OrientedSprite oSprite Artwork sprite int x Position X in global space int y Position Y in global space bool facingFront Is character facing front bool facingRight Is character facing right bool facingUp Is character facing up int z Z value for sorting rendering cell DrawSpriteAsWhipTail(OrientedSprite, int, int, bool, bool, bool, int, int, int, int, int, int, int, int, int, int, bool, int, int) Draw given artwork sprite as tail at given position Declaration public static void DrawSpriteAsWhipTail(OrientedSprite oSprite, int x, int y, bool facingFront, bool facingRight, bool facingUp, int frequency = 113, int frequencyAlt = 277, int frameLen = 219, int frameDelta = 37, int angleAmountRoot = 1000, int angleAmountSubsequent = 1000, int angleOffset = 0, int limbGrow = 1000, int offsetX = 0, int offsetY = 0, bool isFlying = false, int frameOffset = 0, int z = -2147483648) Parameters Type Name Description OrientedSprite oSprite Artwork sprite int x Position X in global space int y Position Y in global space bool facingFront Is character facing front bool facingRight Is character facing right bool facingUp Is character facing up int frequency Motion frequency for the limb rotation, smaller means faster int frequencyAlt Motion frequency for the less influential part limb rotation, smaller means faster int frameLen Looping duration for the limb rotation int frameDelta Looping duration for the less influential part limb rotation int angleAmountRoot Total rotating angle amount for limb rotation (0 means 0%, 1000 means 100%) int angleAmountSubsequent Subsequent sugment's rotating angle amount for limb rotation (0 means 0%, 1000 means 100%) int angleOffset Total offset angle for the root sugment int limbGrow Size-growing amount for limb rotation (0 means 0%, 1000 means 100%) int offsetX Total position offset X int offsetY Total position offset Y bool isFlying Is character flying int frameOffset Current animation frame int z Z value for sorting rendering cell FillFromSheet(string) Load sprite data from Renderer.CurrentSheet Declaration public override bool FillFromSheet(string name) Overrides BodyGadget.FillFromSheet(string)"
  },
  "api/AngeliA.Task.html": {
    "href": "api/AngeliA.Task.html",
    "title": "Class Task | AngeliA",
    "summary": "Class Task Single unit to hold logic for TaskSystem. ⚠ Use global single instance from TaskSystem.PeekFromPool ⚠ Properties LocalFrame Frame that start from 0 when the task begins Declaration public int LocalFrame { get; } UserData Custom data for the internal logic Declaration public object UserData { get; } Methods FrameUpdate() This function is used to handle the internal logic. Declaration public abstract TaskResult FrameUpdate() Returns Type Description TaskResult \"Continue\" if the task should keep on after this frame. \"End\" if the task should end. OnEnd() This function is called when this task end Declaration public virtual void OnEnd() OnStart() This function is called when this task start Declaration public virtual void OnStart()"
  },
  "api/AngeliA.TaskResult.html": {
    "href": "api/AngeliA.TaskResult.html",
    "title": "Enum TaskResult | AngeliA",
    "summary": "Enum TaskResult Represent result of the task at current frame Fields Name Description Continue The task should keep one End The task should end"
  },
  "api/AngeliA.TaskSystem.html": {
    "href": "api/AngeliA.TaskSystem.html",
    "title": "Class TaskSystem | AngeliA",
    "summary": "Class TaskSystem Core system to handle in-game task that interrupt the gameplay Methods AddToFirst(int, object) Add a new task to first in current queue with custom data Declaration public static Task AddToFirst(int id, object userData = null) Parameters Type Name Description int id Type ID of the task. Use typeof(YourTask).AngeHash() to cache this ID object userData Custom data of this operation. Use Task.UserData to get this data in the task's internal logic. Returns Type Description Task True if successfuly added AddToLast(int, object) Add a new task to last in current queue with custom data Declaration public static Task AddToLast(int id, object userData = null) Parameters Type Name Description int id Type ID of the task. Use typeof(YourTask).AngeHash() to cache this ID object userData Custom data of this operation. Use Task.UserData to get this data in the task's internal logic. Returns Type Description Task True if successfuly added ClearAllTask() Reset all current performing tasks Declaration public static void ClearAllTask() EndAllTask() Make all current performing task ends Declaration public static void EndAllTask() GetCurrentTask() Get instance of current performing task Declaration public static Task GetCurrentTask() GetTaskAt(int) Get instance of task inside current performing queue Declaration public static Task GetTaskAt(int index) GetWaitingTaskCount() Get how many tasks are currently waiting for the current task Declaration public static int GetWaitingTaskCount() HasTask() True if there are any task performing Declaration public static bool HasTask() HasTask<T>() True if there are any task in given type performing Declaration public static bool HasTask<T>() where T : Task PeekFromPool(int) Get global single instance of the task for given type ID Declaration public static Task PeekFromPool(int id) TryAddToFirst(int, out Task) Add a new task to first in current queue Declaration public static bool TryAddToFirst(int id, out Task task) Parameters Type Name Description int id Type ID of the task. Use typeof(YourTask).AngeHash() to cache this ID Task task Instance of the task Returns Type Description bool True if successfuly added TryAddToFirst(int, object, out Task) Add a new task to first in current queue with custom data Declaration public static bool TryAddToFirst(int id, object userData, out Task task) Parameters Type Name Description int id Type ID of the task. Use typeof(YourTask).AngeHash() to cache this ID object userData Custom data of this operation. Use Task.UserData to get this data in the task's internal logic. Task task Instance of the task Returns Type Description bool True if successfuly added TryAddToLast(int, out Task) Add a new task to last in current queue Declaration public static bool TryAddToLast(int id, out Task task) Parameters Type Name Description int id Type ID of the task. Use typeof(YourTask).AngeHash() to cache this ID Task task Instance of the task Returns Type Description bool True if successfuly added TryAddToLast(int, object, out Task) Add a new task to last in current queue with custom data Declaration public static bool TryAddToLast(int id, object userData, out Task task) Parameters Type Name Description int id Type ID of the task. Use typeof(YourTask).AngeHash() to cache this ID object userData Custom data of this operation. Use Task.UserData to get this data in the task's internal logic. Task task Instance of the task Returns Type Description bool True if successfuly added"
  },
  "api/AngeliA.TechGlitchEffectScope.html": {
    "href": "api/AngeliA.TechGlitchEffectScope.html",
    "title": "Struct TechGlitchEffectScope | AngeliA",
    "summary": "Struct TechGlitchEffectScope Scope that make element inside looks glitched in the tech item style Implements IDisposable Examples using AngeliA; namespace AngeliaGame; public class Example { [OnGameUpdate] internal static void OnGameUpdate () { using (new TechGlitchEffectScope()) { // Rendering cells inside will looks glitched in the tech item style } } } Constructors TechGlitchEffectScope() Scope that make element inside looks glitched in the tech item style Declaration public TechGlitchEffectScope() TechGlitchEffectScope(int, Color32) Scope that make element inside looks glitched in the tech item style Declaration public TechGlitchEffectScope(int range, Color32 tint = default) Methods Dispose() Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources. Declaration public void Dispose()"
  },
  "api/AngeliA.TeleportTask.html": {
    "href": "api/AngeliA.TeleportTask.html",
    "title": "Class TeleportTask | AngeliA",
    "summary": "Class TeleportTask Task for handle logic during player teleport Properties Duration Teleport takes this frames long to finish Declaration public int Duration { get; set; } TeleportFrom Teleport from this position in global space Declaration public Int2 TeleportFrom { get; set; } TeleportTo Teleport to this position in global space Declaration public Int3 TeleportTo { get; set; } UseParallax True if use the map layer parallax effect during teleport Declaration public bool UseParallax { get; set; } UseVignette True if use the vignette effect during teleport Declaration public bool UseVignette { get; set; } WaitDuration Teleport actually start after wait this frames long Declaration public int WaitDuration { get; set; } Methods FrameUpdate() This function is used to handle the internal logic. Declaration public override TaskResult FrameUpdate() Returns Type Description TaskResult \"Continue\" if the task should keep on after this frame. \"End\" if the task should end. Overrides Task.FrameUpdate() OnStart() This function is called when this task start Declaration public override void OnStart() Overrides Task.OnStart() TeleportFromDoor(int, int, int, int, int) Make a teleport for selecting player by using a door Declaration public static TeleportTask TeleportFromDoor(int fromX, int fromY, int toX, int toY, int toZ) Parameters Type Name Description int fromX (in global space) int fromY (in global space) int toX (in global space) int toY (in global space) Returns Type Description TeleportTask Global single instance of the task unit TeleportFromPortal(int, int, int, int, int, bool) Make a teleport for selecting player by using a portal Declaration public static TeleportTask TeleportFromPortal(int fromX, int fromY, int toX, int toY, int toZ, bool samePosition) Parameters Type Name Description int fromX (in global space) int fromY (in global space) int toX (in global space) int toY (in global space) bool samePosition True if the X and Y position are the same Returns Type Description TeleportTask Global single instance of the task unit"
  },
  "api/AngeliA.ToolApplicationAttribute.html": {
    "href": "api/AngeliA.ToolApplicationAttribute.html",
    "title": "Class ToolApplicationAttribute | AngeliA",
    "summary": "Class ToolApplicationAttribute If application with current assembly should be treat as a \"tool\" rather than \"game\""
  },
  "api/AngeliA.TransferSystem.html": {
    "href": "api/AngeliA.TransferSystem.html",
    "title": "Class TransferSystem | AngeliA",
    "summary": "Class TransferSystem Core system that transfer object data along the stage Methods IsTransfer(int, out Direction4) True if given ID is a valid transfer Declaration public static bool IsTransfer(int transferID, out Direction4 direction) Direction4 direction Direction this transfer will move items to StartTransfer(Int3, object, int) Start a transfer operation Declaration public static void StartTransfer(Int3 unitPos, object data, int stamp = -2147483648) Parameters Type Name Description Int3 unitPos Starting position in unit space object data Target object data to transfer with int stamp unique number to identify this operation"
  },
  "api/AngeliA.UILayerScope.html": {
    "href": "api/AngeliA.UILayerScope.html",
    "title": "Struct UILayerScope | AngeliA",
    "summary": "Struct UILayerScope Scope that make rendering cells inside into UI layer Implements IDisposable Examples using AngeliA; namespace AngeliaGame; public class Example { [OnGameUpdate] internal static void OnGameUpdate () { using (new UILayerScope()) { // Rendering cells inside will draw into UI layer } } } Constructors UILayerScope() Scope that make rendering cells inside into UI layer Declaration public UILayerScope() UILayerScope(bool) Scope that make rendering cells inside into UI layer Declaration public UILayerScope(bool ignoreSorting) Methods Dispose() Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources. Declaration public void Dispose()"
  },
  "api/AngeliA.UndoRedo.html": {
    "href": "api/AngeliA.UndoRedo.html",
    "title": "Class UndoRedo | AngeliA",
    "summary": "Class UndoRedo Constructors UndoRedo(int, Action<IUndoItem>, Action<IUndoItem>) Declaration public UndoRedo(int undoLimit = 4096, Action<IUndoItem> onUndoPerformed = null, Action<IUndoItem> onRedoPerformed = null) Fields RedoList Declaration protected readonly Pipe<IUndoItem> RedoList UndoList Declaration protected readonly Pipe<IUndoItem> UndoList Properties CurrentStep Declaration public int CurrentStep { get; } Methods AbortUnstable() Declaration public void AbortUnstable() GrowStep() Declaration public virtual void GrowStep() InvokeRedoPerform(IUndoItem) Declaration protected virtual void InvokeRedoPerform(IUndoItem data) InvokeUndoPerform(IUndoItem) Declaration protected virtual void InvokeUndoPerform(IUndoItem data) MarkAsStable() Declaration public void MarkAsStable() Redo() Declaration public void Redo() Register(IUndoItem) Declaration public virtual void Register(IUndoItem data) Reset() Declaration public virtual void Reset() Undo() Declaration public void Undo()"
  },
  "api/AngeliA.Universe.html": {
    "href": "api/AngeliA.Universe.html",
    "title": "Class Universe | AngeliA",
    "summary": "Class Universe Representation of game asset folder Properties BuiltIn Built-in universe of the current game Declaration public static Universe BuiltIn { get; } BuiltInInfo Info.json of the built-in universe Declaration public static UniverseInfo BuiltInInfo { get; } BuiltInMapRoot Map root folder path. Map inside this folder should not be edit by the player. Declaration public string BuiltInMapRoot { get; } BuiltInSheetPath Built-in artwork sheet file path. This file is generated by the game engine. Declaration public string BuiltInSheetPath { get; } CharacterMovementConfigRoot Folder that holds character movement config json files Declaration public string CharacterMovementConfigRoot { get; } ConversationRoot Path of the folder that hold conversation files Declaration public string ConversationRoot { get; } CurrentSavingSlot Current selected saving slot index Declaration public int CurrentSavingSlot { get; } FontRoot Folder that holds font files Declaration public string FontRoot { get; } GameSheetPath Artwork sheet file path. This file is painted by the developer of the game. Declaration public string GameSheetPath { get; } Info Data from Info.json file Declaration public UniverseInfo Info { get; } InfoPath Info.json file path Declaration public string InfoPath { get; } LanguageRoot Folder that holds the localization files Declaration public string LanguageRoot { get; } MusicRoot Folder that holds BGM audio files Declaration public string MusicRoot { get; } SavingRoot Root of the saving folder Declaration public string SavingRoot { get; } SheetRoot Artwork sheets root folder path Declaration public string SheetRoot { get; } SlotCharacterRenderingConfigRoot Root folder path holds the rendering config json files for pose characters Declaration public string SlotCharacterRenderingConfigRoot { get; } SlotInventoryRoot Root folder path holds the inventory files Declaration public string SlotInventoryRoot { get; } SlotMetaRoot Meta root folder path of the current selected slot Declaration public string SlotMetaRoot { get; } SlotRoot Folder path of the current selected slot Declaration public string SlotRoot { get; } SlotUserMapRoot Map root folder of the current selected slot. Maps inside this folder can be edit by player Declaration public string SlotUserMapRoot { get; } SoundRoot Folder that holds SFX audio files Declaration public string SoundRoot { get; } UniverseMetaRoot Root meta folder path. This folder hold random text data. Declaration public string UniverseMetaRoot { get; } UniverseRoot Root folder path of this universe Declaration public string UniverseRoot { get; } Methods LoadFromFile(string, bool) Create a new universe instance from file Declaration public static Universe LoadFromFile(string universeFolder, bool useBuiltInSavingRoot = true) ReloadSavingSlot(int, bool) Change saving slot Declaration public void ReloadSavingSlot(int newSlot, bool forceReload = false) Parameters Type Name Description int newSlot Slot index bool forceReload Perform this function even the \"newSlot\" is same with current SetSavingRoot(string, int) Set saving data of the universe instance Declaration public void SetSavingRoot(string newSavingRoot, int slot)"
  },
  "api/AngeliA.UniverseInfo.html": {
    "href": "api/AngeliA.UniverseInfo.html",
    "title": "Class UniverseInfo | AngeliA",
    "summary": "Class UniverseInfo Representation of Info.json in universe folder Implements IJsonSerializationCallback Fields AllowCheatCode Use cheat code after release Declaration public bool AllowCheatCode AllowPause Allow player press start button (esc) to pause Declaration public bool AllowPause AllowQuitFromMenu Show quit option inside pause menu Declaration public bool AllowQuitFromMenu AllowRestartFromMenu Show restart option inside pause menu Declaration public bool AllowRestartFromMenu DefaultViewHeight Default view rect height in global size Declaration public int DefaultViewHeight DeveloperName Developer name of this project in English Declaration public string DeveloperName EngineBuildVersion Which version of AngeliA Engine published this project Declaration public uint EngineBuildVersion LastBackupSavingDate Last time AngeliA Engine backup the saving files Declaration public long LastBackupSavingDate LastEdittingViewHeight Last edit view rect height from map editor Declaration public int LastEdittingViewHeight LastEdittingViewPos Last edit view rect position from map editor Declaration public Int3 LastEdittingViewPos LastOpenAtlasIndex Last opened atlas index by AngeliA Engine Declaration public int LastOpenAtlasIndex LightMap_AirIlluminanceDay How much does air luminous during daytime Declaration public float LightMap_AirIlluminanceDay LightMap_AirIlluminanceNight How much does air luminous during nighttime Declaration public float LightMap_AirIlluminanceNight LightMap_BackgroundTint How much does background blocks luminous Declaration public float LightMap_BackgroundTint LightMap_LevelIlluminateRemain How much does light remain after it hit solid blocks Declaration public float LightMap_LevelIlluminateRemain LightMap_PixelStyle Use pixel style lighting Declaration public bool LightMap_PixelStyle LightMap_SelfLerp Adjust the shadow generating influence between \"Solid block itself\" and \"Global sun light\" Declaration public float LightMap_SelfLerp LightMap_SolidIlluminance How much does solid blocks luminous Declaration public float LightMap_SolidIlluminance MajorVersion Major version of this project Declaration public int MajorVersion MaxViewHeight Maximal view rect height in global size Declaration public int MaxViewHeight MinViewHeight Minimal view rect height in global size Declaration public int MinViewHeight MinorVersion Minor version of this project Declaration public int MinorVersion PatchVersion Patch version of this project Declaration public int PatchVersion ProductName Official name of this project in English Declaration public string ProductName ProjectType Type of this project Declaration public ProjectType ProjectType ReadonlyMap Save map file changes made by the player Declaration public bool ReadonlyMap RequireFixScriptNamesWhenAnalyse Declaration public bool RequireFixScriptNamesWhenAnalyse ScaleUiBasedOnMonitor Scale ui elements based on the monitor height instead of application window height Declaration public bool ScaleUiBasedOnMonitor UseLightingSystem Use the global lighting system Declaration public bool UseLightingSystem UseMapEditor Require map editor from AngeliA Engine when under development Declaration public bool UseMapEditor UsePixelPerfectRendering True if the game require rendering cell pixel perfect Declaration public bool UsePixelPerfectRendering UseProceduralMap Generate map proceduraly during game play Declaration public bool UseProceduralMap ViewRatio Size ratio of the view rect. (1000 means 1:1, 2000 means 2:1) Declaration public int ViewRatio WorldBehindAlpha Transparent amount of the behind map layer. (255 means not tramsparent, 0 means full tramsparent) Declaration public byte WorldBehindAlpha WorldBehindParallax Parallax amount of the behind map layer. (1000 means no parallax, 2000 means behind move 2 times faster) Declaration public int WorldBehindParallax Methods OnAfterLoadedFromDisk() This function is called after json object load from file Declaration public void OnAfterLoadedFromDisk() OnBeforeSaveToDisk() This function is called before json object save to file Declaration public void OnBeforeSaveToDisk() Valid(bool) Declaration public void Valid(bool minViewSizeFirst)"
  },
  "api/AngeliA.Util.MathfInternal.html": {
    "href": "api/AngeliA.Util.MathfInternal.html",
    "title": "Struct Util.MathfInternal | AngeliA",
    "summary": "Struct Util.MathfInternal Fields FloatMinDenormal Declaration public static volatile float FloatMinDenormal FloatMinNormal Declaration public static volatile float FloatMinNormal IsFlushToZeroEnabled Declaration public static bool IsFlushToZeroEnabled"
  },
  "api/AngeliA.Util.html": {
    "href": "api/AngeliA.Util.html",
    "title": "Class Util | AngeliA",
    "summary": "Class Util Utility class of AngeliA Fields Deg2Rad Deg angle * Deg2Rad = Rad angle Declaration public const float Deg2Rad = 0.017453292 PI π = 3.14159274f Declaration public const float PI = 3.1415927 Rad2Deg Rad angle * Rad2Deg = Deg angle Declaration public const float Rad2Deg = 57.29578 Methods Abs(int) Return the absolute value Declaration public static int Abs(int value) Abs(float) Return the absolute value Declaration public static float Abs(float value) AddAssembly(Assembly) Add a new assembly into AngeliA. Make sure the assembly is already loaded into .NET. ⚠ Only call this function inside a static constructor ⚠ Declaration public static void AddAssembly(Assembly assembly) AddEnvironmentVariable(string, string) Add given key and value into system Environment Variable Declaration public static void AddEnvironmentVariable(string key, string value) AllChildClass(Type, bool, bool) Iterate through all child classes of given type Declaration public static IEnumerable<Type> AllChildClass(this Type type, bool includeAbstract = false, bool includeInterface = false) bool includeAbstract True if abstract class should be included bool includeInterface True if interface should be included AllChildClassID(Type, bool, bool) Iterate through all child class's ID of given type Declaration public static IEnumerable<int> AllChildClassID(this Type type, bool includeAbstract = false, bool includeInterface = false) bool includeAbstract True if abstract class should be included bool includeInterface True if interface should be included AllClassImplemented(Type, bool) Iterate through all class that implement the given interface Declaration public static IEnumerable<Type> AllClassImplemented(this Type interfaceType, bool includeAbstract = false) Parameters Type Name Description Type interfaceType Type of the target interface bool includeAbstract True if abstract class is included AllClassImplementedID(Type, bool) Iterate through all class's ID that implement the given interface Declaration public static IEnumerable<int> AllClassImplementedID(this Type interfaceType, bool includeAbstract = false) Parameters Type Name Description Type interfaceType Type of the target interface bool includeAbstract True if abstract class is included AllClassWithAttribute(Type, bool, bool) Iterate through all classes with given attribute attaching on Declaration public static IEnumerable<(Type, Attribute)> AllClassWithAttribute(this Type attribute, bool ignoreAbstract = true, bool ignoreInterface = true) Parameters Type Name Description Type attribute Type of the target attribute bool ignoreAbstract True if abstract classes should be excluded bool ignoreInterface True if interfaces should be excluded AllClassWithAttribute<A>(bool, bool, bool) Iterate through all classes with given attribute attaching on Declaration public static IEnumerable<(Type, A)> AllClassWithAttribute<A>(bool ignoreAbstract = true, bool ignoreInterface = true, bool inherit = false) where A : Attribute Parameters Type Name Description bool ignoreAbstract True if abstract classes should be excluded bool ignoreInterface True if interfaces should be excluded bool inherit Set to true to inspect the ancestors of element Type Parameters Name Description A Type of the target attribute AllEnumIdPairs<E>() Iterate through all value and name AngeHash for the given enum Declaration public static IEnumerable<KeyValuePair<E, int>> AllEnumIdPairs<E>() where E : struct, Enum Type Parameters Name Description E Type of the enum AllStaticMethodWithAttribute<T>() Iterate through all static method from all classes that with given attribute attached on Declaration public static IEnumerable<KeyValuePair<MethodInfo, T>> AllStaticMethodWithAttribute<T>() where T : Attribute Type Parameters Name Description T Type of the attribute Approximately(float, float) True if the given two float is almost same Declaration public static bool Approximately(float a, float b) ArgPath_to_Path(string) Declaration public static string ArgPath_to_Path(string path) Atan(float, float) Return the arctangent of (x,y) Declaration public static float Atan(float x, float y) BabylonianSqrt(int) Get square root of given value without using too many CPU resources Declaration public static int BabylonianSqrt(int n) ByteToCompressedFile(string, byte[], int) Save byte array into compressed file Declaration public static void ByteToCompressedFile(string path, byte[] rawBytes, int length = -1) int length Set to -1 for the full array BytesToFile(byte[], string, int) Save byte array into file Declaration public static void BytesToFile(byte[] bytes, string path, int length = -1) int length Set to -1 to save all byte array CeilToInt(float) Get the smallest intager that larger than \"value\" Declaration public static int CeilToInt(float value) ChangeExtension(string, string) Change extension of the given path Declaration public static string ChangeExtension(string path, string newEx) string newEx Works both with and without the dot Returns Type Description string New path with extension changed Clamp(int, int, int) Limit value \"a\" between \"min\" and \"max\" Declaration public static int Clamp(int a, int min, int max) Clamp(float, float, float) Limit value \"a\" between \"min\" and \"max\" Declaration public static float Clamp(float a, float min, float max) Clamp01(float) Limit value \"a\" between 0 and 1 Declaration public static float Clamp01(float value) ColorToHtml(Color32, bool) Get html string from given color value Declaration public static string ColorToHtml(Color32 color, bool ignoreAlpha = false) ColorToInt(Color32) Convert color value into intager Declaration public static int ColorToInt(Color32 color) CombinePaths(string, string) Combine strings into a path Declaration public static string CombinePaths(string path1, string path2) Parameters Type Name Description string path1 First part to combine string path2 Second part to combine Returns Type Description string Full path CombinePaths(string, string, string) Combine strings into a path Declaration public static string CombinePaths(string path1, string path2, string path3) Parameters Type Name Description string path1 First part to combine string path2 Second part to combine string path3 Third part to combine Returns Type Description string Full path CombinePaths(string, string, string, string) Combine strings into a path Declaration public static string CombinePaths(string path1, string path2, string path3, string path4) Parameters Type Name Description string path1 First part to combine string path2 Second part to combine string path3 Third part to combine string path4 Fourth part to combine Returns Type Description string Full path CombinePaths(params string[]) Combine strings into a path Declaration public static string CombinePaths(params string[] paths) Parameters Type Name Description string[] paths Array of parts of path Returns Type Description string Full path CompressedFileToByte(string, out int) Load compressed file into byte array Declaration public static byte[] CompressedFileToByte(string path, out int byteLength) int byteLength True length of the byte array Returns Type Description byte[] The raw byte array CopyFile(string, string, bool) Copy file from one path to other Declaration public static bool CopyFile(string from, string to, bool overwrite = true) bool overwrite True if overwrite existing file at \"to\" Returns Type Description bool True if successfuly copied CopyFolder(string, string, bool, bool, bool) Copy folder from one path to other Declaration public static bool CopyFolder(string from, string to, bool copySubDirs, bool ignoreHidden, bool overrideFile = false) bool copySubDirs True if copy all folder/files inside root folder bool ignoreHidden True if hidden files/folders do not get copy bool overrideFile True if overwrite existing files at \"to\" Returns Type Description bool True if successfuly copied Cos(float) Return cos value for given angle in RAD. Use (degAngle * Util.Deg2Rad) to get the Rad angle. Declaration public static float Cos(float radAngle) CreateFolder(string) Create a folder at given path. Ignore if folder exists. Declaration public static void CreateFolder(string path) CrossVector3(Float3, Float3) The cross product of two vectors results in a third vector which is perpendicular to the two input vectors. Declaration public static Float3 CrossVector3(Float3 lhs, Float3 rhs) DecompressBytes(byte[]) Make compressed byte array into raw byte array Declaration public static byte[] DecompressBytes(byte[] compressedBytes) DeleteFile(string) Delete the file at given path. Do nothing when file not exists Declaration public static void DeleteFile(string path) DeleteFolder(string) Delete folder at given path. Do nothing when folder not exists Declaration public static void DeleteFolder(string path) DistanceFloat(Float2, Float2) Distance between given two points Declaration public static float DistanceFloat(Float2 a, Float2 b) DistanceFloat(float, float, float, float) Distance between given two points Declaration public static float DistanceFloat(float aX, float aY, float bX, float bY) DistanceInt(Int2, Int2) Distance between given two points. (Use BabylonianSqrt internaly) Declaration public static int DistanceInt(Int2 a, Int2 b) DistanceInt(int, int, int, int) Distance between given two points (Use BabylonianSqrt internaly) Declaration public static int DistanceInt(int aX, int aY, int bX, int bY) DrawFilledEllipse_Patrick(int, int, int, int) Draw a filled ellipse with Patrick algorithm Declaration public static IEnumerable<IRect> DrawFilledEllipse_Patrick(int left, int bottom, int width, int height) Returns Type Description IEnumerable<IRect> All rect positions that need to fill with color DrawHoloEllipse_Patrick(int, int, int, int) Draw a holo ellipse with Patrick algorithm Declaration public static IEnumerable<Int2> DrawHoloEllipse_Patrick(int left, int bottom, int width, int height) Returns Type Description IEnumerable<Int2> All rect positions that need to fill with color DrawLineWithRect_DDA(int, int, int, int) Draw a line between (x0,y0) and (x1,y1) with Digital-Differential-Analyzer algorithm Declaration public static IEnumerable<IRect> DrawLineWithRect_DDA(int x0, int y0, int x1, int y1) Returns Type Description IEnumerable<IRect> All rect positions that need to fill with color DrawLine_DDA(int, int, int, int) Draw a line between (x0,y0) and (x1,y1) with Digital-Differential-Analyzer algorithm Declaration public static IEnumerable<Int2> DrawLine_DDA(int x0, int y0, int x1, int y1) Returns Type Description IEnumerable<Int2> All pixel positions EnumerateFiles(string, bool, string) Iterate through path of all files that match given pattern Declaration public static IEnumerable<string> EnumerateFiles(string path, bool topOnly, string searchPattern) Parameters Type Name Description string path Root folder path bool topOnly True if only search top level of the folder string searchPattern (\"\" means all files, \".txt\" means all txt files) EnumerateFiles(string, bool, params string[]) Iterate through path of all files that match any given patterns Declaration public static IEnumerable<string> EnumerateFiles(string path, bool topOnly, params string[] searchPatterns) Parameters Type Name Description string path Root folder path bool topOnly True if only search top level of the folder string[] searchPatterns (\"\" means all files, \".txt\" means all txt files) EnumerateFolders(string, bool, string) Iterate through path of all folders that match given pattern Declaration public static IEnumerable<string> EnumerateFolders(string path, bool topOnly, string searchPattern = \"*\") Parameters Type Name Description string path Root folder path bool topOnly True if only search top level of the folder string searchPattern (\"*\" means all folders) EnumerateFolders(string, bool, params string[]) Iterate through path of all folders that match any given patterns Declaration public static IEnumerable<string> EnumerateFolders(string path, bool topOnly, params string[] searchPatterns) Parameters Type Name Description string path Root folder path bool topOnly True if only search top level of the folder string[] searchPatterns (\"*\" means all folders) ExecuteCommand(string, string, int, bool) Perform a command with the terminal Declaration public static int ExecuteCommand(string workingDirectory, string arguments, int logID = -1, bool wait = true) Parameters Type Name Description string workingDirectory Path of the working directory int logID (-1 means ignore log. 0 means log with Debug.Log. >=1 means log with Debug.LogInternal) bool wait True if wait the terminal process to exit Returns Type Description int Return code FileExists(string) True if the given path refers to an existing file in disk Declaration public static bool FileExists(string path) FileToBytes(string) Load file as a byte array Declaration public static byte[] FileToBytes(string path) FileToText(string) Load file into string text Declaration public static string FileToText(string path) FileToText(string, Encoding) Load file into string text Declaration public static string FileToText(string path, Encoding encoding) FindNextStringStep(string, int, bool) Get index of the nearby segment of the given string. (eg. for \"Test Content String 123\" if the start index is 5 which is start of \"Content\", toRight is true, return value will be 12 which is the end of \"Content\".) Declaration public static int FindNextStringStep(string content, int start, bool toRight) bool toRight True if move the cursor to right side Returns Type Description int Index of the next step segment FixPath(string) Make given path valid. Directory separator will be fixed to the valid one. All separators in the start of the path will be removed. All separators in the end of the path will be removed. Declaration public static string FixPath(string path) FloorToInt(float) Get the largest intager that smaller than \"value\" Declaration public static int FloorToInt(float value) FolderExists(string) True if the given path refers to an existing folder in disk Declaration public static bool FolderExists(string path) ForAllAssemblyWithAttribute<A>() Iterate through all given assembly attribute with the inatance of the assembly Declaration public static IEnumerable<(Assembly assembly, A attribute)> ForAllAssemblyWithAttribute<A>() where A : Attribute Type Parameters Name Description A Type of the attribute ForAllLinesInFile(string) Iterate through every text lines inside given file Declaration public static IEnumerable<string> ForAllLinesInFile(string path) ForAllLinesInFile(string, Encoding) Iterate through every text lines inside given file Declaration public static IEnumerable<string> ForAllLinesInFile(string path, Encoding encoding) ForAllLinesInString(string) Iterate through every text lines inside given string Declaration public static IEnumerable<string> ForAllLinesInString(string content) ForAllSystemLanguages() Iterate through iso of all language AngeliA support Declaration public static IEnumerable<string> ForAllSystemLanguages() GetAllTypeSpan() Get a ReadOnlySpan for all AngeliA related System.Types Declaration public static ReadOnlySpan<Type> GetAllTypeSpan() GetAngeHashForClassName(string) Declaration public static int GetAngeHashForClassName(string className) GetDirection(int, int) Get closest direction for vector (deltaX, deltaY) Declaration public static Direction8 GetDirection(int deltaX, int deltaY) GetDisplayName(string) Make the given string (in English) looks better for user to read. If the string start with \"m_\". Remove the \"m_\"; Replace all \"_\" into \" \" Add space before capital letters that behind a lowercase letter Declaration public static string GetDisplayName(string name) GetDisplayTimeFromTicks(long) Get time string for display label from given ticks Declaration public static string GetDisplayTimeFromTicks(long ticks) GetExtensionWithDot(string) Get file extension with the dot at front Declaration public static string GetExtensionWithDot(string path) GetField(Type, string) Get FieldInfo of the given type and name Declaration public static FieldInfo GetField(Type type, string name) Parameters Type Name Description Type type Type of class that holds the field string name Name of the field Returns Type Description FieldInfo Instance of the FieldInfo GetFieldType(object, string) Get what type of data the given field holds Declaration public static Type GetFieldType(object target, string name) Parameters Type Name Description object target Instance that holds the field string name Name of the field Returns Type Description Type System.Type that this field holds GetFieldValue(object, string) Get value of the given field Declaration public static object GetFieldValue(object target, string fieldName) Parameters Type Name Description object target Instance that holds the field string fieldName Name of the field Returns Type Description object Value of the field GetFileCount(string, string, SearchOption) Get how many files mathchs the search pattern inside given folder path Declaration public static int GetFileCount(string path, string search = \"*\", SearchOption option = SearchOption.TopDirectoryOnly) Parameters Type Name Description string path Root folder path string search (\"\" means all files, \".txt\" means all txt files) GetFileCreationDate(string) Declaration public static long GetFileCreationDate(string path) GetFileModifyDate(string) Declaration public static long GetFileModifyDate(string path) GetFileSizeInMB(string) Declaration public static float GetFileSizeInMB(string path) GetFolderCount(string, string, SearchOption) Get how many folders mathchs the search pattern inside given folder path Declaration public static int GetFolderCount(string path, string search = \"*\", SearchOption option = SearchOption.TopDirectoryOnly) Parameters Type Name Description string path Root folder path string search (\"*\" means all files) GetFolderFullPath(string) Get the full path of given relative folder path Declaration public static string GetFolderFullPath(string path) GetFolderModifyDate(string) Declaration public static long GetFolderModifyDate(string path) GetFullPath(string) Get the full path of given relative file path Declaration public static string GetFullPath(string path) GetKeyDisplayName(KeyboardKey) Get display name in English for given keyboard key Declaration public static string GetKeyDisplayName(KeyboardKey key) GetLanguageDisplayName(string) Get display name of the given language in it's native language Declaration public static string GetLanguageDisplayName(string iso) Parameters Type Name Description string iso ISO of the language (eg. \"en\" for English, \"zht\" for Chinese Traditional, \"de\" for German) Returns Type Description string Result name. Return empty string when iso not valid. GetLanguageDisplayNameInEnglish(string) Get display name of the given language in English Declaration public static string GetLanguageDisplayNameInEnglish(string iso) Parameters Type Name Description string iso ISO of the language (eg. \"en\" for English, \"zht\" for Chinese Traditional, \"de\" for German) Returns Type Description string Result name. Return empty string when iso not valid. GetLongTime() Get FileTimeUTC from UtcNow Declaration public static long GetLongTime() GetNameWithExtension(string) Get file/folder name with extension Declaration public static string GetNameWithExtension(string path) GetNameWithoutExtension(string) Get file/folder name without extension Declaration public static string GetNameWithoutExtension(string path) GetParentPath(string) Get the parent full path of the given file/folder Declaration public static string GetParentPath(string path) GetProperty(Type, string) Get PropertyInfo of the given type and name Declaration public static PropertyInfo GetProperty(Type type, string name) Parameters Type Name Description Type type Type of class that holds the property string name Name of the property Returns Type Description PropertyInfo Instance of the PropertyInfo GetPropertyValue(object, string) Get current value of a property Declaration public static object GetPropertyValue(object target, string name) Parameters Type Name Description object target Instance that holds the property string name Name of the property Returns Type Description object Value of the property GetStaticFieldType(Type, string) Get what type of data the given static field holds Declaration public static Type GetStaticFieldType(Type type, string name) Parameters Type Name Description Type type Type of class that holds the field string name Name of the field Returns Type Description Type System.Type that this field holds GetStaticFieldValue(Type, string) Get value of the given static field Declaration public static object GetStaticFieldValue(Type type, string name) Parameters Type Name Description Type type Type of class that holds the field string name Name of the field Returns Type Description object Value of the field GetStaticPropertyValue(Type, string) Get current value of a static property Declaration public static object GetStaticPropertyValue(Type type, string name) Parameters Type Name Description Type type Type of the class that holds the property string name Name of the property Returns Type Description object Value of the property GetTimeString() Get a string for current date and time Declaration public static string GetTimeString() GetTrimedPixels(in Color32[], int, int, out int, out int, out int, out int) Trim the clear pixels for the given pixels and create a new instance for the result Declaration public static Color32[] GetTrimedPixels(in Color32[] pixels, int width, int height, out int left, out int right, out int down, out int up) Parameters Type Name Description Color32[] pixels Source pixel data. (will not be changed after this operation) int width Width in pixel int height Height in pixel int left Left position that first found a pixel in whole column int right Right position that first found a pixel in whole column int down Bottom position that first found a pixel in whole row int up Top position that first found a pixel in whole row Returns Type Description Color32[] New instance of pixel data created GetUrl(string) Get the AbsoluteUri of the given path Declaration public static string GetUrl(string path) GreatestCommonFactor(int, int) Get the Greatest-Common-Factor Declaration public static int GreatestCommonFactor(int a, int b) HasFileIn(string, bool, string) True if there's any file match the pattern Declaration public static bool HasFileIn(string path, bool topOnly, string searchPattern) Parameters Type Name Description string path Root folder path bool topOnly True if only search top level of the folder string searchPattern (\"\" means all files, \".txt\" means all txt files) HasFileIn(string, bool, params string[]) True if there's any file match any of the patterns Declaration public static bool HasFileIn(string path, bool topOnly, params string[] searchPattern) Parameters Type Name Description string path Root folder path bool topOnly True if only search top level of the folder string[] searchPattern (\"\" means all files, \".txt\" means all txt files) HsvToRgb(float, float, float) Convert Hue-Saturation-Value into Red-Green-Blue. Declaration public static Color32 HsvToRgb(float h, float s, float v) Parameters Type Name Description float h Range: 0-1 float s Range: 0-1 float v Range: 0-1 HsvToRgbF(float, float, float) Convert Hue-Saturation-Value into Red-Green-Blue. Declaration public static ColorF HsvToRgbF(float h, float s, float v) Parameters Type Name Description float h Range: 0-1 float s Range: 0-1 float v Range: 0-1 HtmlToColor(string, out Color32) Get color from given html string. Works both with and without \"#\" at start Declaration public static bool HtmlToColor(string html, out Color32 color) IntToColor(int) Convert intager value into color Declaration public static Color32 IntToColor(int i) InverseLerp(float, float, float) Remap \"value\" between (\"from\" and \"to\") into (0 and 1) Declaration public static float InverseLerp(float from, float to, float value) InverseLerpUnclamped(float, float, float) Remap \"value\" between (\"from\" and \"to\") into (0 and 1) Declaration public static float InverseLerpUnclamped(float from, float to, float value) InvokeAllStaticMethodWithAttribute<A>() Invoke all static method from all classes that with given attribute attached on Declaration public static void InvokeAllStaticMethodWithAttribute<A>() where A : Attribute Type Parameters Name Description A Type of the attribute InvokeAllStaticMethodWithAttribute<A>(Comparison<KeyValuePair<MethodInfo, A>>) Invoke all static method from all classes that with given attribute attached on Declaration public static void InvokeAllStaticMethodWithAttribute<A>(Comparison<KeyValuePair<MethodInfo, A>> comparison) where A : Attribute Parameters Type Name Description Comparison<KeyValuePair<MethodInfo, A>> comparison Sort the list with this cmoparison Type Parameters Name Description A Type of the attribute InvokeAllStaticMethodWithAttribute<A>(Func<KeyValuePair<MethodInfo, A>, bool>) Invoke all static method from all classes that with given attribute attached on Declaration public static void InvokeAllStaticMethodWithAttribute<A>(Func<KeyValuePair<MethodInfo, A>, bool> predicte) where A : Attribute Parameters Type Name Description Func<KeyValuePair<MethodInfo, A>, bool> predicte Only invoke the method if this function returns true Type Parameters Name Description A Type of the attribute InvokeMethod(object, string, params object[]) Invoke a method from given name and type Declaration public static object InvokeMethod(object obj, string methodName, params object[] param) Parameters Type Name Description object obj Instance that holds the method string methodName Name of the method object[] param Param of the method Returns Type Description object Return value of the method InvokeStaticMethod(Type, string, params object[]) Invoke a static method from given name and type Declaration public static object InvokeStaticMethod(Type type, string methodName, params object[] param) Parameters Type Name Description Type type Type of the class that holds the method string methodName Name of the static method object[] param Param of the static method Returns Type Description object Return value of the static method IsExistingFileEmpty(string) True if path refers to existing file and the file is not empty. Declaration public static bool IsExistingFileEmpty(string path) IsHidden(string) True if the file/folder at path is hidden Declaration public static bool IsHidden(string path) IsPathValid(string) True if the given path can be an qualified path Declaration public static bool IsPathValid(string path) IsPowerOfTwo(int) True if the given value is power of two Declaration public static bool IsPowerOfTwo(int x) IsSameDay(long, long) True if two ticks inside same day Declaration public static bool IsSameDay(long timeA, long timeB) IsSamePath(string, string) True if the two given paths refers to the same location Declaration public static bool IsSamePath(string pathA, string pathB) IsSupportedLanguageISO(string) True if the given iso is valid Declaration public static bool IsSupportedLanguageISO(string iso) IsValidForFileName(string) True if the given string can be a file name. Declaration public static bool IsValidForFileName(string content) LeastCommonMultiple(int, int) Get the Least-Common-Multiple Declaration public static int LeastCommonMultiple(int a, int b) Lerp(float, float, float) Remap value \"t\" between (0 and 1) into (\"a\" and \"b\") Declaration public static float Lerp(float a, float b, float t) LerpAngle(float, float, float) Remap angle value \"t\" between (0 and 1) into (\"a\" and \"b\") Declaration public static float LerpAngle(float a, float b, float t) LerpAngleUnclamped(float, float, float) Remap angle value \"t\" between (0 and 1) into (\"a\" and \"b\") Declaration public static float LerpAngleUnclamped(float a, float b, float t) LerpUnclamped(float, float, float) Remap value \"t\" between (0 and 1) into (\"a\" and \"b\") Declaration public static float LerpUnclamped(float a, float b, float t) Max(int, int) Return the bigger value Declaration public static int Max(int a, int b) Max(int, int, int) Return the biggest value Declaration public static int Max(int a, int b, int c) Max(float, float) Return the bigger value Declaration public static float Max(float a, float b) MergeColor(Color32, Color32) Draw color \"top\" onto \"back\" with no special blending Declaration public static Color32 MergeColor(Color32 top, Color32 back) MergeColor(ColorF, ColorF) Draw color \"top\" onto \"back\" with no special blending Declaration public static ColorF MergeColor(ColorF top, ColorF back) MergeColor_Editor(Color32, Color32) Draw color \"top\" onto \"back\" with blending for sprite editing Declaration public static Color32 MergeColor_Editor(Color32 top, Color32 back) MergeColor_Lerp(Color32, Color32) Draw color \"top\" onto \"back\" with blending lerp Declaration public static Color32 MergeColor_Lerp(Color32 top, Color32 back) MergeColor_Lerp(ColorF, ColorF) Draw color \"top\" onto \"back\" with blending lerp Declaration public static ColorF MergeColor_Lerp(ColorF top, ColorF back) MergeColor_Overlay(Color32, Color32) Draw color \"top\" onto \"back\" with blending overlay Declaration public static Color32 MergeColor_Overlay(Color32 top, Color32 back) MergeColor_Overlay(ColorF, ColorF) Draw color \"top\" onto \"back\" with blending overlay Declaration public static ColorF MergeColor_Overlay(ColorF top, ColorF back) Min(int, int) Return the smaller value Declaration public static int Min(int a, int b) Min(int, int, int) Return the smallest value Declaration public static int Min(int a, int b, int c) Min(float, float) Return the smaller value Declaration public static float Min(float a, float b) MoveFile(string, string) Move file from one path to other. Use this function to rename files. Declaration public static bool MoveFile(string from, string to) Returns Type Description bool True if successfuly moved MoveFolder(string, string) Move folder from one path to other. Use this function to rename folder. Declaration public static bool MoveFolder(string from, string to) Returns Type Description bool True if successfuly moved OverlapRectCircle(int, int, int, int, int, int, int) True if given rectangle and circle overlaps Declaration public static bool OverlapRectCircle(int radius, int circleX, int circleY, int minX, int minY, int maxX, int maxY) PathIsFolder(string) True is the given path refers to an exist folder instead of file Declaration public static bool PathIsFolder(string path) Path_to_ArgPath(string) Declaration public static string Path_to_ArgPath(string path) PingPong(float, float) Make value \"t\" liner oscillate between 0 and \"length\" Declaration public static float PingPong(float t, float length) PointInTriangle(Float2, Float2, Float2, Float2) True if the given point \"p\" is inside given triangle \"a,b,c\" Declaration public static bool PointInTriangle(Float2 p, Float2 a, Float2 b, Float2 c) PointInTriangle(float, float, float, float, float, float, float, float) True if the given point \"p\" is inside given triangle \"a,b,c\" Declaration public static bool PointInTriangle(float px, float py, float p0x, float p0y, float p1x, float p1y, float p2x, float p2y) PointLine_Distance(Float2, Float2, Float2, out Float2) Get distance between given point \"pt\" and line \"p1,p2\" Declaration public static float PointLine_Distance(Float2 pt, Float2 p1, Float2 p2, out Float2 closest) Float2 closest Closest point on the line Pow(float, float) Return \"f\" to the power of \"p\" Declaration public static float Pow(float f, float p) ProjectOnPlaneVector3(Float3, Float3) Projects a vector onto a plane Declaration public static Float3 ProjectOnPlaneVector3(Float3 vector, Float3 planeNormal) ProjectVector3(Float3, Float3) Projects a vector onto another vector Declaration public static Float3 ProjectVector3(Float3 vector, Float3 onNormal) QuickRandom() Get a random int between int.MinValue and int.MaxValue without spending too much CPU resources. Declaration public static int QuickRandom() QuickRandom(int, int) Get a random int between min and max without spending too much CPU resources. (\"min\" is Included, \"max\" is Excluded) Declaration public static int QuickRandom(int min, int max) QuickRandomColor(int, int, int, int, int, int, int, int) Get a random color without spending too much CPU resources Declaration public static Color32 QuickRandomColor(int minH = 0, int maxH = 360, int minS = 0, int maxS = 100, int minV = 0, int maxV = 100, int minA = 0, int maxA = 255) Parameters Type Name Description int minH (from 0 to 360) int maxH (from 0 to 360) int minS (from 0 to 100) int maxS (from 0 to 100) int minV (from 0 to 100) int maxV (from 0 to 100) int minA (from 0 to 255) int maxA (from 0 to 255) QuickRandomSign() Get a random int which is -1 or 1 without spending too much CPU resources Declaration public static int QuickRandomSign() QuickRandomWithSeed(int) Get a random int between int.MinValue and int.MaxValue without spending too much CPU resources. Declaration public static int QuickRandomWithSeed(int seed) Parameters Type Name Description int seed Same seed always return same result QuickRandomWithSeed(int, int, int) Get a random int between min and max without spending too much CPU resources. (\"min\" is Included, \"max\" is Excluded) Declaration public static int QuickRandomWithSeed(int seed, int min, int max) Parameters Type Name Description int seed Same seed always return same result QuickRandomWithSeed(long) Get a random int between int.MinValue and int.MaxValue without spending too much CPU resources. (\"min\" is Included, \"max\" is Excluded) Declaration public static int QuickRandomWithSeed(long seed) Parameters Type Name Description long seed Same seed always return same result QuickRandomWithSeed(long, int, int) Get a random int between min and max without spending too much CPU resources. (\"min\" is Included, \"max\" is Excluded) Declaration public static int QuickRandomWithSeed(long seed, int min, int max) Parameters Type Name Description long seed Same seed always return same result QuickSort<T>(Span<T>, int, int, IComparer<T>) Sort the given array with QuickSort algorithm. Declaration public static void QuickSort<T>(Span<T> array, int min, int max, IComparer<T> comparer) Parameters Type Name Description Span<T> array The array data int min Index range left (included) int max Index range right (included) IComparer<T> comparer Comparer instance to comparer the array element Type Parameters Name Description T Type of the array QuickSort<T>(T[], int, int, IComparer<T>) Sort the given array with QuickSort algorithm. Declaration public static void QuickSort<T>(T[] array, int min, int max, IComparer<T> comparer) Parameters Type Name Description T[] array The array data int min Index range left (included) int max Index range right (included) IComparer<T> comparer Comparer instance to comparer the array element Type Parameters Name Description T Type of the array ReadBool(ref byte*) Declaration public static bool ReadBool(ref byte* p) ReadBool(ref byte*, byte*) Declaration public static bool ReadBool(ref byte* p, byte* end) ReadByte(ref byte*) Declaration public static byte ReadByte(ref byte* p) ReadByte(ref byte*, byte*) Declaration public static byte ReadByte(ref byte* p, byte* end) ReadBytes(ref byte*, int) Declaration public static byte[] ReadBytes(ref byte* p, int length) ReadBytes(ref byte*, int, byte*) Declaration public static byte[] ReadBytes(ref byte* p, int length, byte* end) ReadChar(ref byte*) Declaration public static char ReadChar(ref byte* p) ReadChar(ref byte*, byte*) Declaration public static char ReadChar(ref byte* p, byte* end) ReadDouble(ref byte*) Declaration public static double ReadDouble(ref byte* p) ReadDouble(ref byte*, byte*) Declaration public static double ReadDouble(ref byte* p, byte* end) ReadFloat(ref byte*) Declaration public static float ReadFloat(ref byte* p) ReadFloat(ref byte*, byte*) Declaration public static float ReadFloat(ref byte* p, byte* end) ReadInt(ref byte*) Declaration public static int ReadInt(ref byte* p) ReadInt(ref byte*, byte*) Declaration public static int ReadInt(ref byte* p, byte* end) ReadLong(ref byte*) Declaration public static long ReadLong(ref byte* p) ReadLong(ref byte*, byte*) Declaration public static long ReadLong(ref byte* p, byte* end) ReadSByte(ref byte*) Declaration public static sbyte ReadSByte(ref byte* p) ReadSByte(ref byte*, byte*) Declaration public static sbyte ReadSByte(ref byte* p, byte* end) ReadShort(ref byte*) Declaration public static short ReadShort(ref byte* p) ReadShort(ref byte*, byte*) Declaration public static short ReadShort(ref byte* p, byte* end) ReadUInt(ref byte*) Declaration public static uint ReadUInt(ref byte* p) ReadUInt(ref byte*, byte*) Declaration public static uint ReadUInt(ref byte* p, byte* end) ReadULong(ref byte*) Declaration public static ulong ReadULong(ref byte* p) ReadULong(ref byte*, byte*) Declaration public static ulong ReadULong(ref byte* p, byte* end) ReadUShort(ref byte*) Declaration public static ushort ReadUShort(ref byte* p) ReadUShort(ref byte*, byte*) Declaration public static ushort ReadUShort(ref byte* p, byte* end) ReadXML<T>(string) Declaration public static T ReadXML<T>(string path) where T : class ReflectVector2(Float2, Float2) Reflects a vector off the surface defined by a normal. Declaration public static Float2 ReflectVector2(Float2 inDirection, Float2 inNormal) ReflectVector3(Float3, Float3) Reflects a vector off the surface defined by a normal. Declaration public static Float3 ReflectVector3(Float3 inDirection, Float3 inNormal) Remap(int, int, int, int, int) Value from one range to another, while maintaining it's relative position within the original range. When \"t\" is \"l\", return \"newL\". When \"t\" is \"r\", return \"newR\". When \"t\" is something in the middle, it find a point between \"newL\" and \"newR\". Declaration public static int Remap(int l, int r, int newL, int newR, int t) Parameters Type Name Description int l Left range for t int r Right range for t int newL Left range for the result int newR Right range for the result int t Original value Returns Type Description int Remaped value Remap(float, float, float, float, float) Value from one range to another, while maintaining it's relative position within the original range. When \"t\" is \"l\", return \"newL\". When \"t\" is \"r\", return \"newR\". When \"t\" is something in the middle, it find a point between \"newL\" and \"newR\". Declaration public static float Remap(float l, float r, float newL, float newR, float t) Parameters Type Name Description float l Left range for t float r Right range for t float newL Left range for the result float newR Right range for the result float t Original value Returns Type Description float Remaped value RemapUnclamped(int, int, int, int, int) Value from one range to another, while maintaining it's relative position within the original range. When \"t\" is \"l\", return \"newL\". When \"t\" is \"r\", return \"newR\". When \"t\" is something in the middle, it find a point between \"newL\" and \"newR\". Declaration public static int RemapUnclamped(int l, int r, int newL, int newR, int t) Parameters Type Name Description int l Left range for t int r Right range for t int newL Left range for the result int newR Right range for the result int t Original value Returns Type Description int Remaped value RemapUnclamped(float, float, float, float, float) Value from one range to another, while maintaining it's relative position within the original range. When \"t\" is \"l\", return \"newL\". When \"t\" is \"r\", return \"newR\". When \"t\" is something in the middle, it find a point between \"newL\" and \"newR\". Declaration public static float RemapUnclamped(float l, float r, float newL, float newR, float t) Parameters Type Name Description float l Left range for t float r Right range for t float newL Left range for the result float newR Right range for the result float t Original value Returns Type Description float Remaped value Repeat(float, float) Make value \"t\" liner loop between 0 and \"length\" Declaration public static float Repeat(float t, float length) RgbToGrey(Color32) Get grey scale of given color. (return between 0 and 1) Declaration public static float RgbToGrey(Color32 rgbColor) RgbToGreyF(ColorF) Get grey scale of given color. (return between 0 and 1) Declaration public static float RgbToGreyF(ColorF rgbColor) RgbToHsv(Color32, out float, out float, out float) Convert Red-Green-Blue into Hue-Saturation-Value. Declaration public static void RgbToHsv(Color32 rgbColor, out float h, out float s, out float v) float h Range: 0-1 float s Range: 0-1 float v Range: 0-1 RgbToHsvF(ColorF, out float, out float, out float) Convert Red-Green-Blue into Hue-Saturation-Value. Declaration public static void RgbToHsvF(ColorF rgbColor, out float h, out float s, out float v) float h Range: 0-1 float s Range: 0-1 float v Range: 0-1 RotateAround(int, int, int, int, int) Rotate given point (x,y) around point (originX, originY) for given rotation Declaration public static Int2 RotateAround(int x, int y, int rotation, int originX, int originY) Returns Type Description Int2 Point after rotation RoundToInt(float) Round a float to the nearest integer Declaration public static int RoundToInt(float value) SegmentIntersect(Float2, Float2, Float2, Float2) If given segment \"a1,a2\" and \"b1,b2\" intersects Declaration public static Float2? SegmentIntersect(Float2 a1, Float2 a2, Float2 b1, Float2 b2) Returns Type Description Float2? Null if not intersect. Return intersection point if intersects SegmentRectIntersect(Float2, Float2, FRect) If given segment \"a0,a1\" intersect with rectangle \"rect\" Declaration public static (Float2? intersect0, Float2? intersect1) SegmentRectIntersect(Float2 a0, Float2 a1, FRect rect) Returns Type Description (Float2? intersect0, Float2? intersect1) Null if not intersect. Return intersection points if intersects SetFieldValue(object, string, object) Set value of the given field Declaration public static void SetFieldValue(object target, string name, object value) Parameters Type Name Description object target Instance that holds the field string name Name of the field object value Value of the field SetFileModifyDate(string, long) Declaration public static void SetFileModifyDate(string path, long fileTime) SetFolderModifyDate(string, long) Declaration public static void SetFolderModifyDate(string path, long fileTime) SetPropertyValue(object, string, object) Set current value of a property Declaration public static void SetPropertyValue(object target, string name, object value) Parameters Type Name Description object target Instance that holds the property string name Name of the property object value Value of the property SetStaticFieldValue(Type, string, object) Set value of the given static field Declaration public static void SetStaticFieldValue(Type type, string name, object value) Parameters Type Name Description Type type Type of class that holds the field string name Name of the field object value Value of the field SetStaticPropertyValue(Type, string, object) Set current value of a static property Declaration public static void SetStaticPropertyValue(Type type, string name, object value) Parameters Type Name Description Type type Type of class that holds the property string name Name of the property object value Value of the property Sin(float) Return sin value for given angle in RAD. Use (degAngle * Util.Deg2Rad) to get the Rad angle. Declaration public static float Sin(float radAngle) Sqrt(float) Return square root of \"f\" Declaration public static float Sqrt(float f) SquareDistance(Int2, Int2) Square of the distance between given two points Declaration public static int SquareDistance(Int2 a, Int2 b) SquareDistance(int, int, int, int) Square of the distance between given two points Declaration public static int SquareDistance(int aX, int aY, int bX, int bY) SquareDistanceF(float, float, float, float) Square of the distance between given two points Declaration public static float SquareDistanceF(float aX, float aY, float bX, float bY) TextToFile(string, string, bool) Save string text into file Declaration public static void TextToFile(string data, string path, bool append = false) bool append True if keep the existing content in the file TextToFile(string, string, Encoding, bool) Save string text into file Declaration public static void TextToFile(string data, string path, Encoding encoding, bool append = false) bool append True if keep the existing content in the file TryGetAttributeFromAllAssemblies<A>() Get first given attribute from all assemblies if found Declaration public static bool TryGetAttributeFromAllAssemblies<A>() where A : Attribute Returns Type Description bool True if the attribute is found Type Parameters Name Description A Type of the attribute TryGetAttributeFromAllAssemblies<A>(out A) Get first given attribute from all assemblies if found Declaration public static bool TryGetAttributeFromAllAssemblies<A>(out A attribute) where A : Attribute Parameters Type Name Description A attribute Instance of the founded attribute Returns Type Description bool True if the attribute is found Type Parameters Name Description A Type of the attribute TryGetIntFromString(string, int, out int, out int) Declaration public static bool TryGetIntFromString(string str, int startIndex, out int value, out int endIndex) TryGetLanguageDisplayName(string, out string) Get display name of the given language in it's native language Declaration public static bool TryGetLanguageDisplayName(string iso, out string displayName) Parameters Type Name Description string iso ISO of the language (eg. \"en\" for English, \"zht\" for Chinese Traditional, \"de\" for German) string displayName Result name Returns Type Description bool True if the iso is valid TryGetRelativePath(string, string, out string) Get relative path from given path and root Declaration public static bool TryGetRelativePath(string relativeTo, string path, out string relativePath) Parameters Type Name Description string relativeTo The root folder path string path The target path inside the root string relativePath Result relative path Returns Type Description bool True if the path successfuly got UpdateFile(string, string, bool) Copy and override target if the modify date is different Declaration public static void UpdateFile(string source, string target, bool skipWhenTargetNotExists = false) bool skipWhenTargetNotExists True if only override existing file instead of create new file when target not exists. Write(ref byte*, bool) Declaration public static void Write(ref byte* p, bool value) Write(ref byte*, bool, byte*) Declaration public static void Write(ref byte* p, bool value, byte* end) Write(ref byte*, byte) Declaration public static void Write(ref byte* p, byte value) Write(ref byte*, byte, byte*) Declaration public static void Write(ref byte* p, byte value, byte* end) Write(ref byte*, byte[], int) Declaration public static void Write(ref byte* p, byte[] bytes, int length) Write(ref byte*, byte[], int, byte*) Declaration public static void Write(ref byte* p, byte[] bytes, int length, byte* end) Write(ref byte*, char) Declaration public static void Write(ref byte* p, char value) Write(ref byte*, char, byte*) Declaration public static void Write(ref byte* p, char value, byte* end) Write(ref byte*, double) Declaration public static void Write(ref byte* p, double value) Write(ref byte*, double, byte*) Declaration public static void Write(ref byte* p, double value, byte* end) Write(ref byte*, short) Declaration public static void Write(ref byte* p, short value) Write(ref byte*, short, byte*) Declaration public static void Write(ref byte* p, short value, byte* end) Write(ref byte*, int) Declaration public static void Write(ref byte* p, int value) Write(ref byte*, int, byte*) Declaration public static void Write(ref byte* p, int value, byte* end) Write(ref byte*, long) Declaration public static void Write(ref byte* p, long value) Write(ref byte*, long, byte*) Declaration public static void Write(ref byte* p, long value, byte* end) Write(ref byte*, sbyte) Declaration public static void Write(ref byte* p, sbyte value) Write(ref byte*, sbyte, byte*) Declaration public static void Write(ref byte* p, sbyte value, byte* end) Write(ref byte*, float) Declaration public static void Write(ref byte* p, float value) Write(ref byte*, float, byte*) Declaration public static void Write(ref byte* p, float value, byte* end) Write(ref byte*, ushort) Declaration public static void Write(ref byte* p, ushort value) Write(ref byte*, ushort, byte*) Declaration public static void Write(ref byte* p, ushort value, byte* end) Write(ref byte*, uint) Declaration public static void Write(ref byte* p, uint value) Write(ref byte*, uint, byte*) Declaration public static void Write(ref byte* p, uint value, byte* end) Write(ref byte*, ulong) Declaration public static void Write(ref byte* p, ulong value) Write(ref byte*, ulong, byte*) Declaration public static void Write(ref byte* p, ulong value, byte* end) WritePixelsToConsole(Color32[], int) Declaration public static void WritePixelsToConsole(Color32[] pixels, int width) WriteXML<T>(T, string) Declaration public static void WriteXML<T>(T data, string path) where T : class"
  },
  "api/AngeliA.Weapon-1.html": {
    "href": "api/AngeliA.Weapon-1.html",
    "title": "Class Weapon<B> | AngeliA",
    "summary": "Class Weapon<B> A type of handtool that launch a type of bullet when being used Implements IMapItem Constructors Weapon() Declaration public Weapon()"
  },
  "api/AngeliA.Weapon.html": {
    "href": "api/AngeliA.Weapon.html",
    "title": "Class Weapon | AngeliA",
    "summary": "Class Weapon A type of handtool that launch a type of bullet when being used Implements IMapItem Properties BulletID Entity ID of the bullet Declaration public int BulletID { get; protected set; } ValidDirection Which direction can this weapon attack Declaration protected virtual WeaponValidDirection ValidDirection { get; } Methods OnPoseAnimationUpdate_FromEquipment(PoseCharacterRenderer) This function is called every frame when a pose-style character equipping this item Declaration public override void OnPoseAnimationUpdate_FromEquipment(PoseCharacterRenderer rendering) Overrides Item.OnPoseAnimationUpdate_FromEquipment(PoseCharacterRenderer) SpawnBullet(Character) Spawn the bullet entity Declaration public virtual Bullet SpawnBullet(Character sender) Parameters Type Name Description Character sender Character that use the weapon Returns Type Description Bullet Instance of the spawned bullet entity. Return null when invalid"
  },
  "api/AngeliA.WeaponValidDirection.html": {
    "href": "api/AngeliA.WeaponValidDirection.html",
    "title": "Enum WeaponValidDirection | AngeliA",
    "summary": "Enum WeaponValidDirection Which direction can the weapon attack to Fields Name Description Eight ← → ↑ ↖ ↗ ↓ ↙ ↘ Five ← → ↑ ↖ ↗ Four ← → ↑ ↓ Three ← → ↑ Two ← →"
  },
  "api/AngeliA.WindowUI.html": {
    "href": "api/AngeliA.WindowUI.html",
    "title": "Class WindowUI | AngeliA",
    "summary": "Class WindowUI Entity UI that represent a window Implements IMapItem IWindowEntityUI Properties BackgroundRect Rect position of the background part in global space Declaration public virtual IRect BackgroundRect { get; } DefaultWindowName Failback display name of this type of window Declaration public virtual string DefaultWindowName { get; } IsDirty True if the content of the window have unsaved changes Declaration public bool IsDirty { get; } NotificationContent Content data for the notification this window require to display Declaration public string NotificationContent { get; set; } NotificationSubContent Secondary content data for the notification this window require to display Declaration public string NotificationSubContent { get; set; } RequiringTooltipContent Content data for the tooltip this window require to display Declaration public string RequiringTooltipContent { get; set; } RequiringTooltipRect Rect position in global space for the tooltip this window require to display Declaration public IRect RequiringTooltipRect { get; } Skin Built-in skin of the system Declaration protected GUISkin Skin { get; } WindowRect Rect position for the root boundary in global space Declaration public static IRect WindowRect { get; } Methods CleanDirty() Mark this window as not dirty (do not contains unsaved changes) Declaration public virtual void CleanDirty() ForceWindowRect(IRect) Set window rect for all window UI Declaration public static void ForceWindowRect(IRect newRect) RequireNotification(string, string) Require a notification. Declaration protected void RequireNotification(string content, string subContent = null) RequireTooltip(IRect, string) Require display tooltip for given range. Call this function every frame no matter the tooltip should be currently display or not. Declaration protected void RequireTooltip(IRect rect, string content) Save(bool) Require save the data Declaration public virtual void Save(bool forceSave = false) Parameters Type Name Description bool forceSave True if this save performs without dirty checks SetDirty() Mark this window as dirty (contains unsaved changes) Declaration public virtual void SetDirty() UpdateUI() Declaration public override sealed void UpdateUI() Overrides EntityUI.UpdateUI() UpdateWindowUI() Declaration public abstract void UpdateWindowUI()"
  },
  "api/AngeliA.Wing.html": {
    "href": "api/AngeliA.Wing.html",
    "title": "Class Wing | AngeliA",
    "summary": "Class Wing Wing body gadget for pose-style character Properties GadgetType Type of this body gadget Declaration public override sealed BodyGadgetType GadgetType { get; } Overrides BodyGadget.GadgetType IsPropeller True if this wing is in tail-propeller style (like character \"Tails\" from Sonic) Declaration public bool IsPropeller { get; } Scale Size scale for the wing (0 means 0%, 1000 means 100%) Declaration protected virtual int Scale { get; } SpriteLoaded True if artwork sprite is loaded Declaration public override bool SpriteLoaded { get; } Overrides BodyGadget.SpriteLoaded Methods DrawGadget(PoseCharacterRenderer) Render the gadget for the given character Declaration public override void DrawGadget(PoseCharacterRenderer renderer) Overrides BodyGadget.DrawGadget(PoseCharacterRenderer) DrawGadgetFromPool(PoseCharacterRenderer) Draw gadget for given character Declaration public static void DrawGadgetFromPool(PoseCharacterRenderer renderer) DrawGadgetGizmos(IRect, Color32, int) Render the gadget as gizmos Declaration public override void DrawGadgetGizmos(IRect rect, Color32 tint, int z) Parameters Type Name Description IRect rect Global rect position Color32 tint Color tint int z Z position for sorting Overrides BodyGadget.DrawGadgetGizmos(IRect, Color32, int) DrawSpriteAsWing(PoseCharacterRenderer, OrientedSprite, bool, int) Draw given artwork sprite as wing for given character Declaration public static void DrawSpriteAsWing(PoseCharacterRenderer renderer, OrientedSprite oSprite, bool isPropeller, int scale = 1000) Parameters Type Name Description PoseCharacterRenderer renderer Target character OrientedSprite oSprite Artwork sprite bool isPropeller True if this wing is in propeller style (like character \"Tails\" from Sonic) int scale Size scale (0 means 0%, 1000 means 100%) FillFromSheet(string) Load sprite data from Renderer.CurrentSheet Declaration public override bool FillFromSheet(string name) Overrides BodyGadget.FillFromSheet(string) IsPropellerWing(int) True if the given wing is a propeller style wing Declaration public static bool IsPropellerWing(int wingID)"
  },
  "api/AngeliA.World.html": {
    "href": "api/AngeliA.World.html",
    "title": "Class World | AngeliA",
    "summary": "Class World Instance of a 128x128 map data Constructors World() Instance of a 128x128 map data Declaration public World() World(Int3) Instance of a 128x128 map data Declaration public World(Int3 pos) Parameters Type Name Description Int3 pos Position in world space (1 world space = 256 * 128 global space) Properties Backgrounds ID of all background blocks (index 0 means bottom-left, index 1 make it goes right) Declaration public int[] Backgrounds { get; set; } Elements ID of all element blocks (index 0 means bottom-left, index 1 make it goes right) Declaration public int[] Elements { get; set; } Entities ID of all entity blocks (index 0 means bottom-left, index 1 make it goes right) Declaration public int[] Entities { get; set; } Levels ID of all level blocks (index 0 means bottom-left, index 1 make it goes right) Declaration public int[] Levels { get; set; } WorldPosition Position for the bottom-left of the world in world space (1 world space = 256 * 128 global space) Declaration public Int3 WorldPosition { get; set; } Methods Clear(Int3?) Reset all block data inside this world data Declaration public void Clear(Int3? pos = null) Parameters Type Name Description Int3? pos Set new world position. Set to null to not clear world position ContainsBlock(int, BlockType) True if the given block ID exists inside this world Declaration public bool ContainsBlock(int blockID, BlockType type) BlockType type Type of the block CopyFrom(World) Declaration public void CopyFrom(World source) EmptyCheck() True if the world data is empty Declaration public bool EmptyCheck() LoadFromDisk(string, int, int, int) Declaration public bool LoadFromDisk(string filePath, int worldX, int worldY, int worldZ) SaveToDisk(string) Declaration public void SaveToDisk(string filePath)"
  },
  "api/AngeliA.WorldPathPool.html": {
    "href": "api/AngeliA.WorldPathPool.html",
    "title": "Class WorldPathPool | AngeliA",
    "summary": "Class WorldPathPool Implements IDictionary<Int3, string> ICollection<KeyValuePair<Int3, string>> IReadOnlyDictionary<Int3, string> IReadOnlyCollection<KeyValuePair<Int3, string>> IEnumerable<KeyValuePair<Int3, string>> IDictionary ICollection IEnumerable IDeserializationCallback ISerializable Methods GetOrAddPath(Int3) Declaration public string GetOrAddPath(Int3 worldPos) GetWorldNameFromPosition(Int3) Declaration public static string GetWorldNameFromPosition(Int3 pos) GetWorldNameFromPosition(int, int, int) Declaration public static string GetWorldNameFromPosition(int x, int y, int z) SetMapRoot(string) Declaration public void SetMapRoot(string newRoot) TryGetPath(Int3, out string) Declaration public bool TryGetPath(Int3 worldPos, out string path) TryGetWorldPositionFromName(string, out Int3) Declaration public static bool TryGetWorldPositionFromName(string name, out Int3 pos)"
  },
  "api/AngeliA.WorldSquad.html": {
    "href": "api/AngeliA.WorldSquad.html",
    "title": "Class WorldSquad | AngeliA",
    "summary": "Class WorldSquad Core system that renders the level/background blocks and load the world data into stage Implements IBlockSquad Properties Behind Squad that handles the behind side map Declaration public static WorldSquad Behind { get; set; } Enable True if the system is required Declaration public static bool Enable { get; set; } Front Squad that handles the front side map Declaration public static WorldSquad Front { get; set; } SquadReady True if the system is ready to use Declaration public static bool SquadReady { get; } Methods AddBlockRedirect(int, int) Add a pair of redirect ID to make all \"fromID\" block rendered with \"toID\" Declaration public static void AddBlockRedirect(int fromID, int toID) ClearStreamWorldPool() Reset the internal world instance pool Declaration public static void ClearStreamWorldPool() GetAllBlocksAt(int, int, int) Get all ID of blocks at given unit position Declaration public (int level, int bg, int entity, int element) GetAllBlocksAt(int unitX, int unitY, int z) Parameters Type Name Description int unitX Position in unit space int unitY Position in unit space int z Z position GetBlockAt(int, int, BlockType) Get block ID at given unit position Declaration public int GetBlockAt(int unitX, int unitY, BlockType type) Parameters Type Name Description int unitX Position in unit space int unitY Position in unit space BlockType type Type of the block GetBlockAt(int, int, int, BlockType) Get block ID at given unit position Declaration public int GetBlockAt(int unitX, int unitY, int z, BlockType type) Parameters Type Name Description int unitX Position in unit space int unitY Position in unit space int z Position Z BlockType type Type of the block RemoveBlockRedirect(int) Remove the redirect pair Declaration public static bool RemoveBlockRedirect(int fromID) Returns Type Description bool True if the pair removed ResetStreamFailbackCopying() Make all existing user maps require reload from built-in maps without deleting the user map folder Declaration public static void ResetStreamFailbackCopying() SetBlockAt(int, int, int, BlockType, int) Set block ID at given unit position Declaration public void SetBlockAt(int unitX, int unitY, int z, BlockType type, int newID) Parameters Type Name Description int unitX Position in unit space int unitY Position in unit space int z Position Z BlockType type Type of the block int newID ID of the block WorldExists(Int3) True if world exists at given world position Declaration public bool WorldExists(Int3 worldPos) Parameters Type Name Description Int3 worldPos In world space (1 world space = 256 * 128 global space)"
  },
  "api/AngeliA.WorldStream.html": {
    "href": "api/AngeliA.WorldStream.html",
    "title": "Class WorldStream | AngeliA",
    "summary": "Class WorldStream Data stream that handles map data from file to instance Implements IBlockSquad Constructors WorldStream(string) Data stream that handles map data from file to instance Declaration public WorldStream(string mapFolder) Parameters Type Name Description string mapFolder Root path of the map folder Properties IsDirty True if there's unsaved block change Declaration public bool IsDirty { get; } MapRoot Path of the map root folder Declaration public string MapRoot { get; init; } UseBuiltInAsFailback True if load file from built-in map folder when no map founded in MapRoot Declaration public bool UseBuiltInAsFailback { get; set; } Methods ClearWorldPool() Clear internal data pool Declaration public void ClearWorldPool() DiscardAllChanges(bool) Load changed map from file Declaration public void DiscardAllChanges(bool forceDiscard = false) Parameters Type Name Description bool forceDiscard True if perform this action no matter stream is dirty of not GetAllBlocksAt(int, int, int) Get all ID of blocks at given unit position Declaration public (int level, int bg, int entity, int element) GetAllBlocksAt(int unitX, int unitY, int z) Parameters Type Name Description int unitX Position in unit space int unitY Position in unit space int z Z position GetBlockAt(int, int, int, BlockType) Get block ID at given unit position Declaration public int GetBlockAt(int unitX, int unitY, int z, BlockType type) Parameters Type Name Description int unitX Position in unit space int unitY Position in unit space int z Position Z BlockType type Type of the block GetOrCreateStreamFromPool(string) Get an instance of WorldStream. Create new one if not exists in pool. Declaration public static WorldStream GetOrCreateStreamFromPool(string mapFolder) Parameters Type Name Description string mapFolder Root path of the map folder GetOrCreateWorld(int, int, int) Get world instance on given world position. Create new one if not found. Declaration public World GetOrCreateWorld(int worldX, int worldY, int worldZ) Parameters Type Name Description int worldX Position of world bottom-left in world space (1 world space = 256 * 128 global space) int worldY Position of world bottom-left in world space (1 world space = 256 * 128 global space) int worldZ Position Z Returns Type Description World Result world instance ResetFailbackCopying() Make all existing user maps require reload from built-in maps without deleting the user map folder Declaration public void ResetFailbackCopying() SaveAllDirty() Save all block changes into file Declaration public void SaveAllDirty() SetBlockAt(int, int, int, BlockType, int) Set block ID at given unit position Declaration public void SetBlockAt(int unitX, int unitY, int z, BlockType type, int value) Parameters Type Name Description int unitX Position in unit space int unitY Position in unit space int z Position Z BlockType type Type of the block int value ID of the block TryGetWorld(Int3, out World) Get world instance on given world position Declaration public bool TryGetWorld(Int3 worldPos, out World world) World world Result world instance Returns Type Description bool True if world founded TryGetWorld(int, int, int, out World) Get world instance on given world position Declaration public bool TryGetWorld(int worldX, int worldY, int worldZ, out World world) Parameters Type Name Description int worldX Position of world bottom-left in world space (1 world space = 256 * 128 global space) int worldY Position of world bottom-left in world space (1 world space = 256 * 128 global space) int worldZ Position Z World world Result world instance Returns Type Description bool True if world founded WorldExists(Int3) True if world exists at given world position Declaration public bool WorldExists(Int3 worldPos) Parameters Type Name Description Int3 worldPos In world space (1 world space = 256 * 128 global space) Events OnWorldCreated Invoke when a world instance created Declaration public static event Action<WorldStream, World> OnWorldCreated OnWorldLoaded Invoke when a world instance loaded from file Declaration public static event Action<WorldStream, World> OnWorldLoaded OnWorldSaved Invoke when a world instance saved to file Declaration public static event Action<WorldStream, World> OnWorldSaved"
  },
  "api/AngeliA.WrapMode.html": {
    "href": "api/AngeliA.WrapMode.html",
    "title": "Enum WrapMode | AngeliA",
    "summary": "Enum WrapMode How text wrap when reach edge Fields Name Description"
  },
  "api/AngeliA.html": {
    "href": "api/AngeliA.html",
    "title": "Namespace AngeliA | AngeliA",
    "summary": "Namespace AngeliA Classes AfterLateUpdateAttribute The function will be called after all entity.LateUpdate is called AfterLayerFrameUpdate_IntLayerAttribute The function will be called after rendering layer update AfterLevelRenderedAttribute The function will be called after world squad render all level blocks for the current frame AngePath Utility class for path-related logic in an AngeliA project AngeSprite Artwork sprite data for rendering the game AntiBuffItem<B> A type of item that prevents a given type of buff from giving to the host Atlas Container of sprites inside artwork sheet AudioCode Quick setup for an audio ID AudioData AutoValidList<T> A list that automatically remove element inside based on the given function BasicGlobalItemCombinationAttribute BasicItemCombinationAttribute Define an item combination to craft the item. BeforeBeforeUpdateAttribute The function will be called before any entity.BeforeUpdate is called BeforeFirstUpdateAttribute The function will be called before any entity.FirstUpdate is called BeforeLateUpdateAttribute The function will be called before any entity.LateUpdate is called BeforeLayerFrameUpdate_IntLayerAttribute The function will be called before rendering layer update BeforeLevelRenderedAttribute The function will be called before world squad rendering any level blocks for the current frame BeforeSavingSlotChangedAttribute The function will be called before user change the saving slot. Universe.BuiltIn.CurrentSavingSlot is still the old value when this function is called. BeforeUpdateUpdateAttribute The function will be called before any entity.Update is called BlockBuilder Item that represent a map block inside inventory. Also handles the build block to map logic BlockColor Element block that set the color tint of the overlapping level block BlockColoringSystem Core system for the level block tint from element BlockPicker Item that represent a map tool inside inventory. Also handles the pick block from map logic BodyCloth Body cloth of a pose-style character. Include body, shoulder and arms BodyGadget Representation of a pose character's extra body part. Always use instance from pool. BodyGadgetItem A type of item that holds a body gadget. BodyPart Representation of a bodypart for a pose-style character BodySetAttribute Treat specified sprites as bodyset for pose-characters BodySetItem Represent an item that holds a whole set of bodypart for pose-style characters to apply Buff Represent a type of buff BuffItem Item that gives the holder a buff BuffItem<B> Item that gives the holder a buff BuiltInSprite Utility class to get built-in sprites BuiltInText Utility class to get built-in text through language system Bullet An entity represent bullet from weapons that deal damage to IDamageReceiver Cell Rendering cell CellScreenshotSystem Core system to take screenshot based on rendering cells and save them into file CellScreenshotSystem.Screenshot Data to hold a single screenshot ChangeSavingSlotTask Task that change player saving slot. Require UserData as slot index. CharSprite Character General representation of characters in AngeliA games CharacterAttackness Behavior class that handles attack logic for character CharacterAttribute Attribute for character class CharacterAttribute.DefaultSelectedPlayerAttribute Make the character the default selected player CharacterBuff Behavior class that handles buff logic for characters CharacterHealth Behavior class that handles health logic for character CharacterMovement Behavior class that handles movement logic for character CharacterPose Complete pose infomation at one moment for a pose-style character CharacterRenderer Behaviour class handles rendering of character CharacterRenderingConfig CheatCodeAttribute The function will be called when user perform the given cheat code. Cheat code can be perform like those in NES games. CheatSystem Core system to invoke function when user type cheat code during gameplay. Works like NES games. (it does nothing with anti-cheat) CircuitOperate_Int3UnitPos_IntStamp_Direction5FromAttribute The function will be called when CircuitSystem triggers the entity that holds this function CircuitSystem Core system for triggering specified function of entities on stage/map Cloth Cloth for pose-style character (not for equipment items). Get instance with Cloth.TryGetCloth(id, out var result) ClothItem Represent an item that holds a cloth for pose-style character to wear. Unlike body armor, cloth do not occupy equipment slot. ColorGradient Represent a list of colors that creates smooth transitions between each other Const Utility class for constant values ControlHintUI Hint for active buttons displays at botton-left corner of the screen during gameplay Cursor Core system for set appearance of mouse cursor Debug Log debug messages to the console or screen DefaultDialogueUI Implementation of the dialogueUI with default settings DefaultGamepadGamekeyAttribute Default gamepad binding for the given gamekey DefaultKeyboardGamekeyAttribute Default keyboard binding for the given gamekey DefaultPropellerWing DefaultWing DelayTask Task that do nothing but stay inside the task system. Require UserData as duration in frame DespawnEntityTask Task to despawn an exists entity. Require UserData as the target entity. DialogueTask Task that run a dialogue UI entity and display conversation DialogueUI Entity that shows dialogue content. Driven by the DialogueTask. Ear Animal ear body gadget for pose character. (Like cat-girl's ears, not human ears) Ease EchoDictionary<TKey, TValue> EnablePlayerSystemAttribute Indicates whether the current application uses the player system or not Entity General object with logic which can spawn into the stage EntityAttribute Attribute for entities EntityAttribute.CapacityAttribute Spawn limit count of this entity EntityAttribute.DontDespawnOutOfRangeAttribute Do not despawn this entity when it's out of view rect EntityAttribute.DontDestroyOnZChangedAttribute This entity do not despawn when player enter another map layer EntityAttribute.DontDrawBehindAttribute This entity will not display on the behind layer EntityAttribute.DontSpawnFromWorld Do not spawn this entity when it's painted into the map EntityAttribute.ExcludeInMapEditorAttribute Do not show this entity inside the palette panel of map editor. EntityAttribute.LayerAttribute Which layer should this entity spawn inside. EntityAttribute.MapEditorGroupAttribute Which map editor palette group should this entity in EntityAttribute.RepositionWhenInactiveAttribute When the entity despawn, reset the position in map. So next time it will be load from the position where it last appeared EntityAttribute.SpawnWithCheatCodeAttribute Player can use \"Spawn---\" to spawn this entity to stage. EntityAttribute.StageOrderAttribute The order in which this entity gets updated in it's layer EntityAttribute.UpdateOutOfRangeAttribute This entity will update when it's outside view rect EntityHookTask Task that keep exists util the target entity inactive. Require UserData as the target entity. EntityLayer Layer for entity spawning EntityLayerCapacityAttribute Max entity count for the layer EntityUI Entities which spawns into the stage and serves as UI Equipment Represent an item that can be equip into a slot for a character EventAttribute Attribute for link all static methods with a System.Action. When the action is invoked, all methods get called. Extension Extension method for AngeliA projects Face Face gadget for pose characters FadeInTask Task that fade the screen from black to normal FadeOutTask Task that fade the screen from normal to black FileBrowserUI Built-in file brower entity for PC only FontData Food Item that represent food FootCloth Shoes of a pose-style character FrameBasedBool A data that can be override for specified frames FrameBasedColor A data that can be override for specified frames FrameBasedInt A data that can be override for specified frames FrameBasedValue A data that can be override for specified frames FrameBasedValue<T> A data that can be override for specified frames FrameworkUtil Utility class for the AngeliA framework GUI GUI for Game-User-Interface. Handles UI related rendering and interaction logic GUISkin GUIStyle Game Represent an AngeliA game GenericDialogUI Dialog UI entity for general purpose GenericPopupUI Popup menu UI for general perpose GlobalGravityAttribute The gravity value applys on all rigidbody GlobalItemCombinationAttribute Define an item combination to craft the item. GlobalItemCombinationAttribute<I0> Define an item combination to craft the item. GlobalItemCombinationAttribute<I0, I1> Define an item combination to craft the item. GlobalItemCombinationAttribute<I0, I1, I2> Define an item combination to craft the item. GlobalItemCombinationAttribute<I0, I1, I2, I3> Define an item combination to craft the item. GroupAnimationHolder Display animation from artwork sheet Hair Hair gadget for pose styled characters HandCloth Gloves for a pose-style character HandTool Tool equipment that can be equip in hand slot of a character HandheldPoseAnimation Pose animation which override onto a character for holding a handtool HeadCloth Hat for a pose-style character HipCloth Pants or skirt for a pose-style character. Include hip and legs (no foot) Horn Horn body gadget for pose-style character IgnoreArtworkPixelsAttribute Current application do not load pixel data from sheet Input Frame based core system for user input from keyboard, mouse and gamepad IntToChars Get char array that holds the given intager as text content without creating heap pressure Inventory Core system to handle storage of items InventoryPartnerUI A partner UI display on top of the player menu that display and manage an inventory Item Basic unit inside inventory system. ※※⚠ Use global single instance ⚠※※ ItemCombinationAttribute Define an item combination to craft the item. ItemCombinationAttribute<I0> Define an item combination to craft the item. ItemCombinationAttribute<I0, I1> Define an item combination to craft the item. ItemCombinationAttribute<I0, I1, I2> Define an item combination to craft the item. ItemCombinationAttribute<I0, I1, I2, I3> Define an item combination to craft the item. ItemCombinationParam ItemDropAttribute Register item drop for the entity, use ItemSystem.DropItemFor(Entity) to perform the item drop. ItemDropAttribute<I> Register item drop for the entity, use ItemSystem.DropItemFor(Entity) to perform the item drop. ItemHolder Entity that represent an item on map ItemSystem Core system that handles item related logic Jewelry A type of equipment that EquipmentType always set to Jewelry JsonUtil Utility class for json operation Language Core system to handle localization logic LanguageCode Quick setup for an language system key LanguageUtil Utility class for language system LightingSystem Core system that handles dynamic lighting of the stage MapEditor Entity for edit the map in run-time MapEditorToolbarButton Base class for detect toolbar button logic of the map editor MenuUI General class for menu entity ui MethodTask Task that invoke the given System.Action. Require the action as UserData. ModularBodySuit Body cloth that auto generate from artwork sheet ModularEar Ear body gadget that auto generate from artwork sheet ModularFace Face body gadget that auto generate from artwork sheet ModularFootSuit Shoes that auto generate from artwork sheet ModularHair Hair body gadget that auto generate from artwork sheet ModularHandSuit Gloves that auto generate from artwork sheet ModularHeadSuit Hat that auto generate from artwork sheet ModularHipSuit Pants or skirt that auto generate from artwork sheet ModularHorn Horn body gadget that auto generate from artwork sheet ModularTail Tail body gadget that auto generate from artwork sheet ModularWing Wing body gadget that auto generate from artwork sheet MovementEditor MusicData NoItemCombinationAttribute Indicates to the system that this item does not require crafting combination NonStackableItem A type of item that do not stack-up inside inventory panel. The MaxStackCount is always 1. NotificationUI Display a temporarily notification on top of screen during gameplay NumberEight Element for indicate a number on map NumberFive Element for indicate a number on map NumberFour Element for indicate a number on map NumberNine Element for indicate a number on map NumberOne Element for indicate a number on map NumberSeven Element for indicate a number on map NumberSix Element for indicate a number on map NumberThree Element for indicate a number on map NumberTwo Element for indicate a number on map NumberZero Element for indicate a number on map OnBlockPicked_IntSpriteID_IRectAttribute The function will be called when a map block has been picked OnBulletHitEnvironment_BulletAttribute The function will be called when a bullet hit environment (something not an IDamageReceiver) OnCameOutOfWater_Rigidbody_EntityAttribute The function will be called when a rigidbody came out of water OnCharacterCrash_EntityAttribute The function will be called when a character crash OnCharacterFly_EntityAttribute The function will be called when a character fly OnCharacterFootStepped_EntityAttribute The function will be called when a character makes a foot step on running OnCharacterJump_EntityAttribute The function will be called when a character jumps OnCharacterPassOut_EntityAttribute The function will be called when a character pass out OnCharacterPound_EntityAttribute The function will be called when a character ground pound OnCharacterSleeping_EntityAttribute The function will be called when a character is sleeping OnCharacterSlideStepped_EntityAttribute The function will be called when a character makes a step when sliding OnCharacterTeleport_EntityAttribute The function will be called when a character teleport OnCheatPerformed_StringCodeAttribute The function will be called when user performed any cheat code. Cheat code can be perform like those in NES games. OnCircuitWireActived_Int3UnitPosAttribute The function will be called when CircuitSystem's electric current pass through OnDealDamage_Damage_IDamageReceiverAttribute The function will be called when something deal damage to a damage-receiver OnFallIntoWater_Rigidbody_EntityAttribute The function will be called when a rigidbody fall into water OnFileDropped_StringPathAttribute The function will be called when user drag and drop a file into the application window OnGameFocusedAttribute The function will be called when the application window regain focus. OnGameInitializeAttribute The function will be called when game initialize. OnGameInitializeLaterAttribute The function will be called when game initialize but after all [OnGameInitialize] functions already called OnGameLostFocusAttribute The function will be called when the application window lost focus. OnGameQuittingAttribute The function will be called before the application actually quit. OnGameRestartAttribute The function will be called when game restart. OnGameTryingToQuitAttribute The function will be called when player try to quit the game. Return false will stop the application from quiting. OnGameUpdateAttribute The function will be called every time game update (60 times per second) OnGameUpdateLaterAttribute The function will be called every time game update (60 times per second), but after all [OnGameUpdate] functions already called. OnGameUpdatePauselessAttribute The function will be called every time game update (60 times per second), even when the game is paused. OnItemCollected_Entity_Int2Pos_IntItemID_IntItemCountAttribute The function will be called when a character collect an item OnItemDamage_Character_IntItemBefore_IntItemAfterAttribute The function will be called when an item is damaged into another item OnItemError_Entity_Int2Pos_IntIconID The function will be called when something wrong about an item (like when guns out of ammo) OnItemLost_Character_IntItemIDAttribute The function will be called when a character lost an item OnItemUnlocked_IntItemIDAttribute The function will be called when an item is unlocked by player OnLanguageChangedAttribute The function will be called when user change game display language. Language.CurrentLanguage is already set to new value when this function is called. OnMainSheetReloadAttribute The function will be called when artwork sheet for rendering loaded from file OnMapEditorModeChange_ModeAttribute The function will be called when user change map editor editing mode OnObjectBreak_IntSpriteID_IRectAttribute The function will be called when an object break OnObjectFreeFall_IntSpriteID_Int2Pos_IntRot_BoolFlip_Int2Velocity_IntRotSpeed_IntGravityAttribute The function will be called when an object start to free fall OnRemoteSettingChanged_IntID_IntDataAttribute The function will be called when engine send remote message to rigged game OnSavingSlotChangedAttribute The function will be called after user change the saving slot. Universe.BuiltIn.CurrentSavingSlot is the new value when this function is called. OnTransferArrivedAttribute_IntEntityID_Int3UnitPos_ObjectDataAttribute The function will be called when message from TransferSystem.StartTransfer() arrived OnTransferPassAttribute_Int3UnitPos_ObjectDataAttribute The function will be called when message from TransferSystem.StartTransfer() pass through OnViewZChangedAttribute The function will be called when player change the map layer OnWindowSizeChangedAttribute The function will be called when user change the size of the application window OnWorldCreatedBySquad_WorldAttribute The function will be called when a world instance is created by world squad OnWorldLoadedBySquad_WorldAttribute The function will be called when a world instance is loaded by world squad OnWorldSavedByMapEditor_WorldAttribute The function will be called when a world instance is saved to file by the world squad OrderedAttribute Attribute apply to method and call all of them in given order Particle Entity that represent a animated decoration Physics Core system that handles physics of AngeliA games. Logic of the system is frame-isolated which means data from prev frame will never effect current frame. PhysicsLayer A single physics layer PhysicsMask A group of physics layera Pipe<T> A linked list that can add/remove from head/tail. No heap pressure. PixelPerfect Class that makes rendering cells pixel perfect PlayerMenuItem<UI> A type of item that spawns a player partner menu when use PlayerMenuPartnerUI Class for customize partner ui for player menu ui PlayerMenuUI Menu UI for display player's state, manage equipments and items. Display when player press \"select\" button once. PlayerQuickMenuUI UI menu that display when player hold \"select\" button during gameplay PlayerSystem Core system for user character control logic PoseAnimation Procedure animation to animate a pose-style character. ⚠Use global single instance from system pool⚠ PoseAnimation_Animation_TakingDamage PoseAnimation_Brake PoseAnimation_Climb PoseAnimation_Crash PoseAnimation_Dash PoseAnimation_Fly PoseAnimation_GrabSide PoseAnimation_GrabTop PoseAnimation_Idle PoseAnimation_JumpDown PoseAnimation_JumpUp PoseAnimation_PassOut PoseAnimation_Pound PoseAnimation_Rolling PoseAnimation_Run PoseAnimation_Rush PoseAnimation_Sleep PoseAnimation_Slide PoseAnimation_Spin PoseAnimation_SquatIdle PoseAnimation_SquatMove PoseAnimation_SwimIdle PoseAnimation_SwimMove PoseAnimation_Walk PoseCharacterRenderer PosePerform_Block PosePerform_Tool PropGroupAttribute PropSeparatorAttribute PropVisibilityAttribute RenderLayer Layer for rendering Renderer Core system for draw artwork on screen for current frame RendererLayerCapacityAttribute Max rendering cell count for the layer RestartGameTask Task that restart the game RigCallingMessage RigRespondMessage RigRespondMessage.PlaySoundRequirement RigRespondMessage.RenderingCellData RigRespondMessage.RenderingLayerData RigTransceiver Rigidbody Class for the entities which apply general physics by the system Saving Data that auto save into player saving data SavingBool Boolean data that auto save into player saving data SavingColor32 Color data that auto save into player saving data SavingColor32NoAlpha Color data without alpha value that auto save into player saving data SavingHotkey Hotkey data that auto save into player saving data SavingInt Intager data that auto save into player saving data SavingString String data that auto save into player saving data SavingSystem Core system for handle data that auto keeps inside disk. Saving<T> Data that auto save into player saving data SelectPlayerTask Task that select current player Sheet Artwork sheet that holds sprites, sprite groups, atlas and textures data for rendering SheetCharacterRenderer Sky Core system handles background rendering of the game SoundData SpawnEntityTask Task that spawn given entity. SpriteCode Quick setup for an artwork sprite SpriteGroup A chain of AngeSprites Stage Core system that handles entity spawning and despawning logic SummonAttackness Behavior class that handles attack logic for summon type character SwitchItem<TargetItem> A type of item that switch to another item when use TagUtil Utility class for tags Tail Tail body gadget for pose-style character Task Single unit to hold logic for TaskSystem. ⚠ Use global single instance from TaskSystem.PeekFromPool ⚠ TaskSystem Core system to handle in-game task that interrupt the gameplay TeleportTask Task for handle logic during player teleport ToolApplicationAttribute If application with current assembly should be treat as a \"tool\" rather than \"game\" TransferSystem Core system that transfer object data along the stage UndoRedo Universe Representation of game asset folder UniverseInfo Representation of Info.json in universe folder Util Utility class of AngeliA Weapon A type of handtool that launch a type of bullet when being used Weapon<B> A type of handtool that launch a type of bullet when being used WindowUI Entity UI that represent a window Wing Wing body gadget for pose-style character World Instance of a 128x128 map data WorldSquad Core system that renders the level/background blocks and load the world data into stage WorldStream Data stream that handles map data from file to instance Structs AfterimageScope Draw a continuous tailing cell effect for the objects rendering inside BlockRule Checking rules for auto tiling map blocks for a source block CellZScope Scope to change rendering cell z value ClampCellsScope Scope to clamp rendering cell into given rect position Color32 Color with byte for data ColorF Color with float as data Damage Data structure for a single damage performed DefaultLayerScope Scope that makes renderer draw into default layer DynamicClampCellScope Scope that clamp rendering cells inside given range by changing the size scale of the content EnvironmentShadowScope Scope that draw shadows for rendering cells inside FRect Rectangle with float data Float2 2D vector with float data values Float3 3D vector with float data values Float4 4D vector with float data values FontScope Scope that makes labels inside display with given font GUIBodyColorScope Scope that change the body color of GUI element inside GUIColorScope Scope that change the color of GUI element inside GUIContentColorScope Scope that change the content color of GUI element inside GUIEnableScope Scope that set enable of GUI elements inside GUIHorizontalScrollScope Scope that make GUI elements inside scrolls GUIInteractableScope Scope that set interactable of GUI elements inside GUILabelWidthScope Scope that set internal label width of GUI elements inside GUIScrollScope Scope that make GUI elements inside scrolls GUISkinScope Scope that change the skin of the GUI elements inside GUIVerticalScrollScope Scope that make GUI elements inside scrolls GlitchScope Scope that make element inside looks glitched Hotkey Data for a keyboard hotkey configuration IRect rectangle with intager data IgnoreInputScope Scope that make GUI elements ignore keyboard or mouse input from user Int2 2D vector with intager data Int3 3D vector with intager data Int4 4D vector with intager data LayerScope Scope that make rendering cells inside use given render layer Long4 OrientedSprite A set of AngeSprite ID that auto handles orientation logic PhysicsCell Basic unit of a physics data structure ReverseCellsScope Scope that make rendering cells reverse in sorting order RigCallingMessage.CharRequirementData RigRespondMessage.DoodleRectData RigRespondMessage.DoodleWorldData RigRespondMessage.GizmosLineData RigRespondMessage.GizmosRectData RotateCellScope Scope that make rendering cells rotate SheetIndexScope Scope that change sheet index of the rendering cells inside ShiftCellsScope Scope that shift position of the rendering cells inside TechGlitchEffectScope Scope that make element inside looks glitched in the tech item style UILayerScope Scope that make rendering cells inside into UI layer Interfaces IActionTarget Interface that makes the entity react with player action. When player goes nearby, they can press action button to invoke the logic from this entity IBlockEntity Interface that makes the entity behave like a block from map. This will make the entity become a block item for ItemSystem. IBlockSquad Instance that provide map block data from unit position IBumpable Interface that makes the entity can be bump by other (like question mark block in Mario) ICarrier Interface that makes entity carry other entities on top ICircuitOperator Interface that makes an entity behave like operator in circuit system ICombustible This interface makes the entity can be set on fire IDamageReceiver Interface that makes entity take damage from other IFire Interface that makes the entity behave like fire IItemTransfer Interface that mark the entity as can be transfer item through map IJsonSerializationCallback Interface that receive callback functions when Serialized with JsonUtil IMapItem Marks class as item that can be paint as map editor block IPlayable Interface that mark the character as playable character IProgressiveItem Interface that makes the item break/repair into other item IRouteWalker Interface that makes an entity walks along a given path IUndoItem IWindowEntityUI Interface that indicate the entity is a UI window IWithCharacterAttackness Interface that makes the entity contains a instance of character attackness behaviour IWithCharacterBuff Interface that makes the entity contains a instance of character buff behaviour IWithCharacterHealth Interface that makes the entity contains a instance of character health behaviour IWithCharacterMovement Interface that makes the entity contains a instance of character movement behaviour IWithCharacterRenderer Interface that makes the entity contains a instance of character rendering behaviour Enums Alignment AntiBuffItem<B>.TriggerMode How anti buff item been trigger AtlasState Internal data used for display folder layout AtlasType Type of sprite atlas BlockType Type of blocks in map BodyGadgetType BodyPart.CoverMode How cloths is covering the bodypart CharacterAnimationType Which type of animation does this character shows CharacterFaceExpression Face expression type for pose animation characters CharacterInventoryType Which type of inventory does this character have CharacterMovementState CharacterState General game state of a character ClothType CompareMode Direction2 Direction3 Direction4 Direction5 Direction8 EquipmentType Represent the type of the equipment FittingPose GUIState Gamekey Keys that generaly used with AngeliA games GamepadKey Key on the gamepad HipCloth.HipClothType KeyboardKey Key on the keyboard OnMapEditorModeChange_ModeAttribute.Mode OperationMode What type of cells are included for the operation ProjectType Rule Single checking rule for auto tiling map blocks SavingLocation Where should the saving data local inside the disk Tag TaskResult Represent result of the task at current frame WeaponValidDirection Which direction can the weapon attack to WrapMode How text wrap when reach edge"
  },
  "docs/1-introduction.html": {
    "href": "docs/1-introduction.html",
    "title": "Introduction | AngeliA",
    "summary": "Introduction Disclaimer: This documentation were translated with help of AI and may contain minor inaccuracies. We appreciate your understanding and welcome any suggestions for improvement. Welcome to the AngeliA Engine documentation. AngeliA is a free and open-source 2D game engine designed to deliver a high-quality development experience on PC. With it, you can create your own games or applications and export them as standalone executable files (.exe). Below is an overview of the engine's core features: Level Editing The engine includes a built-in level editor that allows you to design open-world environments. You can instantly playtest the part you're working on during the editing process. The workflow feels like playing a sandbox game—intuitive, creative, and fun. Frame-by-Frame Debugging AngeliA offers frame-by-frame debugging, allowing you to precisely inspect and test gameplay. From fine-tuning character animations to nailing tricky jumps in challenging levels, you have complete control over every frame. Whether you're verifying animation smoothness or checking the accuracy of physics interactions, this feature gives you the precision needed to polish gameplay and enhance the player experience. Programming Language The AngeliA Engine is itself built using C#, a modern and elegant programming language. You can create custom Entity classes and visually place them in the level editor. The engine includes a rich library of built-in components—such as conveyors, springs, and one-way platforms. You can extend these by writing subclasses and adjusting a few parameters to rapidly prototype and iterate on your game ideas. Physics System AngeliA features a custom-designed physics system optimized for retro-style games. It's simple, performant, and faithfully reproduces the movement and feel of classic pixel-era gameplay. Elements like jump hang-time, inertia during sliding, and collision feedback have all been finely tuned to deliver top-notch control and responsiveness. Pixel Art Editor The engine comes with a built-in pixel art editor, making it easy to create and manage the art assets for your game. All visual changes are applied in real time—no need to recompile—greatly accelerating the development cycle and creative workflow. The editor supports a wide range of game-related configurations, including collision shapes for tiles, auto-tiling rules, and adaptive sprite setups for characters. License Compliance This project is developed solely by Moenen and is licensed under the MIT License. You are free to use it for almost any purpose, but you must give proper credit as outlined in the License Compliance Guide."
  },
  "docs/2-comply-with-the-license.html": {
    "href": "docs/2-comply-with-the-license.html",
    "title": "License Compliance | AngeliA",
    "summary": "License Compliance AngeliA is developed and distributed under the MIT License by Moenen, who retains all ownership rights. While your own project may use a different license, you are required to retain and comply with the terms of the original license. To comply, you must include the following information somewhere in your project—this can be in the project root directory, credits screen, splash screen, about page, or any other visible location: Full AngeliA MIT License text: MIT License Copyright (c) 2025 AngeliA Engine by Moenen (MaYinan) Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE."
  },
  "docs/3-basic-concept/01-file-layout.html": {
    "href": "docs/3-basic-concept/01-file-layout.html",
    "title": "File Layout | AngeliA",
    "summary": "File Layout This section provides an overview of the file structure used by AngeliA on disk, divided into three categories: Engine Program, Game Projects, and User Save Data. For more detailed explanations, please refer to the relevant documentation sections. Engine Program ① Engine Folder: Contains all the files required to run the engine. You can move this folder freely without affecting the engine’s functionality. ② Inside the Engine Folder: \uD83D\uDCC1Library: AngeliA Engine is itself built as an AngeliA game. Like any AngeliA project, this folder contains .dll files that provide game-specific functionality. The engine’s core features are embedded in the exe file. \uD83D\uDCC1Universe: Resource folder including configuration files, UI assets, and background launcher components required by the engine. \uD83D\uDC04AngeliA.exe: Entry point for launching the engine. \uD83D\uDCC4License.txt: Software license for using the engine. \uD83D\uDCC4ReadMe.pdf: Engine overview (same as the GitHub project homepage). ③ Inside the Resource Folder: \uD83D\uDCC1Built-In Projects: Sample projects bundled with the engine to help you learn how to use it. These are automatically added to the project list on first launch. Deleting them does not affect engine functionality. \uD83D\uDCC1dotnet: Contains the .NET SDK (provided by Microsoft) used to compile your C# code into .dll files. \uD83D\uDCC1Fonts: Fonts used by the engine’s UI. \uD83D\uDCC1Language: Localization files for the engine UI. You can modify these to support additional languages. \uD83D\uDCC2Map: Auto-generated folder. It will be created regardless of whether your project uses maps. \uD83D\uDCC1Packages: Built-in extension packages. Choose what you need based on the type of game you're developing. \uD83D\uDCC1ProjectTemplate: Default template for new projects. You can customize it to define the structure of newly created projects. \uD83D\uDCC1Runtime: Background process used to run user-created games and exchange input/output data through shared native memory. \uD83D\uDCC1Sheet: Art assets used by the engine UI. \uD83D\uDCC1Theme: Additional UI themes for the engine. \uD83D\uDCC4Info.json: Engine project configuration file (as an AngeliA game). Game Projects ① Your Game Project Folder ② Inside the Project Folder: \uD83D\uDCC1Build: Compiled .dll files generated by the user. \uD83D\uDCC1Entry: Project entry files used when running the game from an IDE. \uD83D\uDCC1lib: Contains referenced AngeliA framework and extension package .dll files. \uD83D\uDCC1obj: Auto-generated by the .NET framework. \uD83D\uDCC1src: Contains the user’s source code files. \uD83D\uDCC1Universe: The project’s resource folder (see below). \uD83D\uDDBC️Icon.ico: Project icon used both inside the engine and in the final .exe. \uD83D\uDDBC️Icon.png: PNG version of the icon, not used by the engine—safe to delete. \uD83D\uDCCB*.csproj: C# project file. \uD83D\uDCCB*.sln: C# solution file. ③ Inside the Resource Folder (Universe): \uD83D\uDCC1Audio: Music and sound effects. Access path via Universe.BuiltIn.MusicRoot and Universe.BuiltIn.SoundRoot. \uD83D\uDCC1Language: Localization text files. Access path via Universe.BuiltIn.LanguageRoot. \uD83D\uDCC1Sheet: Art files for the project. Access path via Universe.BuiltIn.SheetRoot. \uD83D\uDCC1Fonts: Fonts used in the project. Access path via Universe.BuiltIn.FontRoot. \uD83D\uDCC1Meta: Custom metadata. Access path via Universe.BuiltIn.UniverseMetaRoot. \uD83D\uDCC1Map: Built-in map files for the project (not modifiable by players). Access path via Universe.BuiltIn.BuiltInMapRoot. \uD83D\uDCC4Info.json: Project configuration including project name, author, version, etc. Access via Universe.BuiltInInfo. User Save Data ① Save Root Directory: All save-related data generated by a project is stored here. Access path via Universe.SavingRoot. ② Inside the Save Root Directory: \uD83D\uDCC1Slot 0: Slot 0 save data. Users can create and select save slots. New slots will be named \"Slot 1\", \"Slot 2\", and so on. Access current slot path via Universe.SlotRoot. \uD83D\uDCC4CurrentSlot.txt: Stores the current slot number. Access via Universe.CurrentSavingSlot. \uD83D\uDCC4Saving.txt: Global save data shared across all slots. When using the Saving class, use SavingLocation.Global to write to this file. ③ Inside a Save Slot Folder: \uD83D\uDCC1Meta: User-defined save data. Access path via Universe.SlotMetaRoot. \uD83D\uDCC1User Map: Player-modified map files. Access via Universe.SlotUserMapRoot. ④ Inside the Info Folder: \uD83D\uDCC1Character Attack: Character attack configuration. \uD83D\uDCC1Character Rendering: Character rendering configuration. \uD83D\uDCC1Inventory: Inventory data, including equipped items and chest contents. \uD83D\uDCC1MiniGame: Reward data from mini-games. \uD83D\uDCC1Screenshot: Screenshots taken in-game using render cells. Call CellScreenshotSystem.RequireTakeScreenshot(yourGlobalRange); to take a screenshot. \uD83D\uDCD1LoadedBackgroundTrigger: Stores active circuit system triggers. See the CircuitSystem class for details. \uD83D\uDCC4Saving.txt: Local save data for the slot. Use SavingLocation.Local to save to this file. This data is isolated and will not appear when switching to another slot. \uD83D\uDCD1UnlockedItem: IDs of unlocked items. \uD83D\uDCD1UnlockedPlayers: IDs of unlocked playable characters."
  },
  "docs/3-basic-concept/02-engine-window.html": {
    "href": "docs/3-basic-concept/02-engine-window.html",
    "title": "Engine Windows | AngeliA",
    "summary": "Engine Windows This section provides a brief overview of the editor windows available in the AngeliA Engine. After opening a game project, you can access any of the editor windows from the sidebar on the left. The engine supports only one editor window open at a time. All available editors are listed in the left-hand sidebar. For detailed instructions on how to use each window, please refer to the following chapters. Game Window This window is used to design levels and playtest the user-developed game. To display game content successfully, the project must be free of compilation errors. When the game window is open, a dedicated toolbar appears on the right side, offering helpful features such as frame-by-frame debugging, collision shape display, and entity dragging with the mouse. Artwork Editor This window is used to manage and create pixel tiles needed for your game. Nearly all visual elements—whether it's a tree stump, a character's head, or a ladder segment—are rendered using tiles. On the left is the customizable tileset list for organized tile management. The main area in the center allows you to draw, rename, create new tiles, and set auto-tiling rules. All changes are applied immediately upon saving—no need to recompile the game. Language Window This window enables you to provide UI text in multiple languages for your game. You can define the supported languages and manually fill in the translation entries. The game code retrieves localized text using the Key value shown in the first column on the left. Use Language.Get(ange_hash_of_key); to get the localized string for the currently selected language. Console Window This window displays log messages, runtime exceptions, and compile-time errors. Use Debug.Log(your_content); to print messages to the console. Project Settings This window allows you to configure current project settings such as project name, developer name, version number, and more. All settings are saved within the project folder and only apply to the currently opened project. Buttons at the top allow you to recompile the game or build it into a standalone executable. Packages Window This window allows you to add or remove extension packages from your game. You can also export the current project as a package to reuse or share it across other projects. Engine Settings This window is used to configure settings related to the engine itself—for example, whether to automatically reopen the last used project on startup, the UI language of the engine, or the keybindings for various features. These settings only affect the engine’s behavior and do not impact any project content."
  },
  "docs/3-basic-concept/03-open-world-sandbox.html": {
    "href": "docs/3-basic-concept/03-open-world-sandbox.html",
    "title": "Open World Sandbox | AngeliA",
    "summary": "Open World Sandbox This section provides a brief overview of map and level-related concepts. For more in-depth usage instructions, please refer to the following chapters. Map Logic The engine supports seamless stitching of multiple maps, allowing you to create a smooth open-world experience. Only map tiles within the player’s visible range are rendered. Entities that enter the screen are dynamically loaded, while those leaving the screen are automatically unloaded. There are several types of map tiles, each serving a distinct purpose: Background Tiles: Visual only; they do not participate in collision detection. Level Tiles: Have collision enabled by default. You can add a \"OneWay\" tag to make them block movement in only certain directions. Entity Tiles: Used to load instances with custom logic, typically representing interactive or behavior-driven objects. Helper Tiles: Exist only in backend data. They are neither rendered nor interactive, and are used for tagging or internal logic purposes. Map Layers Players can travel between adjacent map layers using doors or portals (as shown below). The engine displays nearby background layers in real time. Use the method TeleportTask.TeleportFromDoor to teleport the player character. Map File Format Map files use the .ibb format, which stands for int byte byte. Each .ibb file represents a map area of 128 × 128 tiles. The filename corresponds to the coordinates of the lower-left corner of that square region in the format x_y_z. Each file stores a flat list of values structured as triples: int, byte, byte (e.g., 7126723, 0, 0, -467174, 1, 0, 892135, 2, 1, ...). The int represents the block's AngeHash (unique identifier). The first byte is the local X coordinate within the map. The second byte is the local Y coordinate. If a coordinate value exceeds 127, subtract 128 to retrieve the actual data. Block types are determined by the ranges of the coordinates: x < 128, y < 128: Entity tile x < 128, y ≥ 128: Helper tile x ≥ 128, y < 128: Level tile x ≥ 128, y ≥ 128: Background tile"
  },
  "docs/3-basic-concept/04-pixel-artwork.html": {
    "href": "docs/3-basic-concept/04-pixel-artwork.html",
    "title": "Pixel Artwork | AngeliA",
    "summary": "Pixel Artwork This section provides a brief overview of the built-in Pixel Art Editor in the AngeliA engine. The editor operates on data stored in the file Universe\\Sheet\\Game Sheet.sheet within the current project directory. This file uses a custom, lossless binary format designed for AngeliA to store pixel-style art assets along with all associated metadata—such as tile tags, borders, and more. The editor interface is divided into four main sections: the atlas list on the left, the main editing area in the center, the toolbar at the top, and the drawing tools on the right. Tiles and Atlases Atlases can be created and modified by the user and organized into folders for better management. Atlases come in three types: Normal, Level, and Background. Tiles within a Level-type atlas are treated as \"Level Tiles\" that can be used in map editing. Background-type atlases work similarly. To change an atlas type, right-click the target atlas in the list and select the desired type from the context menu. The central editing area displays all tiles in the selected atlas. When you select the \"Tile Tool\" from the right-hand toolbar, you can click and drag to select one or more tiles. When tiles are selected, the top toolbar switches to the interface shown below: ① Tile Name: Each tile must have a unique name, not shared with any tile in the same or other atlases. If multiple tiles are selected, the input box will display *, but you can still enter a base name. The system will auto-generate names like “Name 0”, “Name 1”, “Name 2”, etc. These tiles will be treated as a tile group, usable for animation and auto-tiling. ② Tile Size: Width and height in pixels. Editable. ③ Tile Borders: From left to right: left, right, bottom, and top borders. Used for 9-slice rendering or to define custom collision areas for level tiles. ④ Tile Pivot: Defines the alignment reference point. When rendered in-game by position, the pivot point aligns to the specified location in code. Modifying the pivot of level or background tiles affects their rendering position on the map. ⑤ Tile Z-Index: Determines the rendering order. This value can be overridden in your game code. ⑥ Animation Frame Duration: Duration per frame in tiles, in units of frames. ⑦ General Tools (left to right): Trigger: Marks the selected tile as a trigger. Triggers do not collide with entities but are still loaded into the physics system, allowing them to trigger specific gameplay logic (e.g., heal the player on contact or define detection zones). Tag: Adds logic tags to selected tiles. See Enum Tag for details. Auto-Tile Rules: Defines auto-tiling behavior in the level editor (see below). The engine evaluates rules in order by tile group. If the current tile arrangement matches a rule, the corresponding tile is used for rendering. The example rule below requires left and right neighbors to share the same ID, and top/bottom neighbors to differ. Diagonal neighbors are ignored in this case (but diagonal rules are supported). Delete selected tiles (Shortcut: Del) Export tile info (only in Debug Mode) ⑧ Transform Tools (left to right): Rotate clockwise Rotate counterclockwise Flip horizontally Flip vertically Auto-crop transparent edges Drawing Drawing is only allowed within tiles. With a drawing tool selected, hold down the left mouse button and drag to draw pixels. Right-click to pick a color from the tile. Drawing tools from top to bottom: Rectangle Tool: Hold Shift to draw a square, Alt to draw a hollow rectangle. Ellipse Tool: Hold Shift to draw a circle, Alt to draw a hollow ellipse. Line Tool: Click and drag to draw straight lines. Bucket Tool: Fills all adjacent pixels of the same color. Drag to fill with a gradient. Hold Ctrl and click to replace all pixels of the same color in the tile (not limited to adjacent pixels). Pixel Selection Tool: Select pixels for moving, deleting, or copying. Supports selecting across multiple tiles. Tile Tool: Select, copy, or delete tiles. Modify tile properties."
  },
  "docs/3-basic-concept/05-code.html": {
    "href": "docs/3-basic-concept/05-code.html",
    "title": "Code | AngeliA",
    "summary": "Code An AngeliA project is essentially a C# project. We recommend using Visual Studio or Visual Studio Code for development. You may freely modify the .csproj file to customize your project settings—the engine will not alter this file. It is recommended to place all your custom code inside the src folder. If you wish to add additional folders to the project, place them under the Universe directory. You can retrieve this path using Universe.BuiltIn.UniverseRoot. Static Events By adding the [OnGameInitialize] attribute to a static method in any class, the method will be invoked when the game initializes. Similarly, [OnGameUpdate] will cause the method to be called once per frame. For a full list of available event attributes, see the Cheat Sheet. using AngeliA; namespace Test; public static class Test { [OnGameInitialize] internal static void OnGameInitialize () { Debug.Log(\"Game Init\"); } [OnGameUpdate] internal static void OnGameUpdate () { Debug.Log(\"Game Update\", Game.GlobalFrame); } } Console Output: Game Init Game Update 0 Game Update 1 Game Update 2 Game Update 3 ... Rendering a Sprite The following code draws a built-in Entity icon in the center of the screen. Since rendering is not persistent between frames, you must redraw it every frame. using AngeliA; namespace Test; public static class Test { private static readonly int SpriteID = \"Icon.Entity\".AngeHash(); [OnGameUpdate] internal static void OnGameUpdate () { int x = Renderer.CameraRect.CenterX(); int y = Renderer.CameraRect.CenterY(); Renderer.Draw(SpriteID, new IRect(x, y, 512, 512)); } } Runtime Result (cropped view): Spawning an Entity The following code spawns a test entity at the mouse position when the player clicks. Once spawned, the entity remains active on the stage until it moves out of view and is automatically unloaded. You can also manually unload it using entity.Active = false;. using AngeliA; namespace Test; public class TestRigidbody : Rigidbody { // Cache the Type ID for spawning the entity public static readonly int TYPE_ID = typeof(TestRigidbody).AngeHash(); public override int PhysicalLayer => PhysicsLayer.ENVIRONMENT; [OnGameUpdate] internal static void OnGameUpdate () { // Handle mouse click if (Input.MouseLeftButtonDown) { var mousePos = Input.MouseGlobalPosition; Stage.SpawnEntity(TYPE_ID, mousePos.x, mousePos.y); } } public override void LateUpdate () { base.LateUpdate(); // Render the entity Renderer.Draw(BuiltInSprite.ICON_ENTITY, base.Rect); } } Runtime Result (cropped view, time-lapsed):"
  },
  "docs/3-basic-concept/06-entity.html": {
    "href": "docs/3-basic-concept/06-entity.html",
    "title": "Entity | AngeliA",
    "summary": "Entity Entities are the core building blocks of game logic in AngeliA. Most interactive objects in a map—such as crates, characters, bullets, and more—exist in the form of entities. You can use the Entity Debugger to inspect and test entities currently active on the stage. Callback Methods Entity classes receive system events via callback methods. You can override these methods to respond to the corresponding events. The available callbacks include: OnActivated Called once when the entity is loaded into the stage. OnInactivated Called once when the entity is unloaded from the stage. FirstUpdate First update cycle, typically used to register physics colliders. BeforeUpdate Second update cycle, used to handle physics motion logic. (By this time, FirstUpdate has been called for all other entities.) Update Third update cycle, used for physics processing and entity-specific behavior. LateUpdate Final update cycle, usually used for rendering the entity."
  },
  "docs/3-basic-concept/07-physics.html": {
    "href": "docs/3-basic-concept/07-physics.html",
    "title": "Physics | AngeliA",
    "summary": "Physics AngeliA features a built-in, high-performance physics system designed specifically for retro-style games. The system supports rectangular colliders only, and it does not take rotation into account—allowing it to maintain excellent runtime efficiency without sacrificing core functionality. At the start of each frame, entities register their collider information into the physics system during the FirstUpdate phase. Once all entities have completed registration, the physics system processes motion and collision logic during the BeforeUpdate and Update phases. Physics data is not persistent between frames. The system resets and repopulates all collider data at the beginning of every frame, ensuring that all physics behaviors remain fully synchronized with the current game state. Performing Movement The following example shows how to spawn a test entity on mouse click. Once spawned, the entity moves steadily to the right under control of the physics system. The system automatically detects collisions and resolves them by moving the entity up to the edge of any object it collides with. using AngeliA; namespace Test; public class TestRigidbody : Rigidbody { // Cache the Type ID for spawning the entity public static readonly int TYPE_ID = typeof(TestRigidbody).AngeHash(); [OnGameUpdate] internal static void OnGameUpdate () { // Handle mouse click if (Input.MouseLeftButtonDown) { var mousePos = Input.MouseGlobalPosition; Stage.SpawnEntity(TYPE_ID, mousePos.x, mousePos.y); } } public override void BeforeUpdate () { base.BeforeUpdate(); // Move the entity to the right base.XY = Physics.Move(base.CollisionMask, base.XY, 12, 0, base.Size, this); } public override void LateUpdate () { base.LateUpdate(); // Render the entity using the built-in icon Renderer.Draw(BuiltInSprite.ICON_ENTITY, base.Rect); } } Runtime Result (cropped and speed-up view):"
  },
  "docs/3-basic-concept/08-rendering.html": {
    "href": "docs/3-basic-concept/08-rendering.html",
    "title": "渲染 | AngeliA",
    "summary": "渲染"
  },
  "docs/3-basic-concept/09-input.html": {
    "href": "docs/3-basic-concept/09-input.html",
    "title": "输入 | AngeliA",
    "summary": "输入"
  },
  "docs/3-basic-concept/10-saving.html": {
    "href": "docs/3-basic-concept/10-saving.html",
    "title": "存档 | AngeliA",
    "summary": "存档"
  },
  "docs/3-basic-concept/11-character-movement.html": {
    "href": "docs/3-basic-concept/11-character-movement.html",
    "title": "角色运动 | AngeliA",
    "summary": "角色运动"
  },
  "docs/3-basic-concept/12-character-animation.html": {
    "href": "docs/3-basic-concept/12-character-animation.html",
    "title": "角色动画 | AngeliA",
    "summary": "角色动画"
  },
  "docs/3-basic-concept/13-inventory.html": {
    "href": "docs/3-basic-concept/13-inventory.html",
    "title": "物品栏 | AngeliA",
    "summary": "物品栏"
  },
  "docs/3-basic-concept/14-language.html": {
    "href": "docs/3-basic-concept/14-language.html",
    "title": "多语言 | AngeliA",
    "summary": "多语言"
  },
  "docs/4-cheat-sheet.html": {
    "href": "docs/4-cheat-sheet.html",
    "title": "Cheat Sheet | AngeliA",
    "summary": "Cheat Sheet All static callback function OnGameInitialize OnGameInitializeLater BeforeSavingSlotChanged OnSavingSlotChanged OnGameUpdate OnGameUpdateLater OnGameUpdatePauseless OnGameRestart OnGameTryingToQuit OnGameQuitting OnGameFocused OnGameLostFocus OnWindowSizeChanged OnRemoteSettingChanged_IntID_IntData OnFileDropped_StringPath OnMainSheetReload OnViewZChanged BeforeLayerFrameUpdate_IntLayer AfterLayerFrameUpdate_IntLayer BeforeFirstUpdate BeforeBeforeUpdate BeforeUpdateUpdate BeforeLateUpdate AfterLateUpdate BeforeLevelRendered AfterLevelRendered OnWorldCreatedBySquad_World OnWorldLoadedBySquad_World OnWorldSavedByMapEditor_World OnMapEditorModeChange_Mode OnLanguageChanged CheatCode OnCheatPerformed_StringCode OnItemCollected_Entity_Int2Pos_IntItemID_IntItemCount OnItemLost_Character_IntItemID OnItemError_Entity_Int2Pos_IntIconID OnItemDamage_Character_IntItemBefore_IntItemAfter OnItemUnlocked_IntItemID OnCharacterFootStepped_Entity OnCharacterSleeping_Entity OnCharacterJump_Entity OnCharacterPound_Entity OnCharacterFly_Entity OnCharacterSlideStepped_Entity OnCharacterPassOut_Entity OnCharacterTeleport_Entity OnCharacterCrash_Entity OnObjectBreak_IntSpriteID_IRect OnObjectFreeFall_IntSpriteID_Int2Pos_IntRot_BoolFlip_Int2Velocity_IntRotSpeed_IntGravity OnBlockPicked_IntSpriteID_IRect OnFallIntoWater_Rigidbody_Entity OnCameOutOfWater_Rigidbody_Entity OnDealDamage_Damage_IDamageReceiver OnBulletHitEnvironment_Bullet OnTransferArrived_IntEntityID_Int3UnitPos_ObjectData OnTransferPass_Int3UnitPos_ObjectData CircuitOperate_Int3UnitPos_IntStamp_Direction5From OnCircuitWireActived_Int3UnitPos"
  },
  "docsCN/1-introduction.html": {
    "href": "docsCN/1-introduction.html",
    "title": "简介 | AngeliA",
    "summary": "简介 欢迎来到 AngeliA 引擎文档，AngeliA 引擎是一款免费开源的2D游戏引擎，为您在PC平台提供优质的游戏开发体验，您可以使用它开发属于您自己的游戏或应用，并发布为exe可执行文件，以下为引擎的主要功能： 关卡编辑 您可以用引擎自带的关卡编辑器创作开放式世界关卡，并在编辑的过程中随时开始游戏测试正在创作的部分，工作流程就像游玩一款沙盒游戏，轻松且充满创造力。 逐帧调试 您可以使用逐帧调试，精确地观察与测试游戏。从角色动作的每一帧过渡，到极限关卡的闪避与跳跃，您将拥有充足的时间按下每一个关键按键，捕捉每一个细微的反馈。无论是验证动画是否丝滑衔接，还是检视物理响应是否合理，逐帧调试都将为您提供绝对的掌控力，是打磨手感与优化体验的利器。 编程语言 AngeliA 引擎本身也是一款 AngeliA 游戏，采用高效且优雅的 C# 作为编程语言。您可以编写自定义的 Entity 类，并通过关卡编辑器将它们直观地布置在地图上。引擎内置的拓展包涵盖了丰富的游戏常用元素，如传送带、弹簧、单向板等，您只需编写这些物体的子类，稍作参数调整，便可立即投入游戏原型的创作与测试，大幅提升开发效率与灵感实现的速度。 物理系统 引擎包含为复古风格游戏专门打造的原创物理系统，简单高效，还原像素时代的经典手感与运动逻辑。角色跳跃的滞空感、滑动的惯性、碰撞的反馈细节，都已经过精心调校，让您的游戏拥有一流的操作手感。 美工编辑 引擎内置了像素绘图器，方便您创作与管理游戏所需的美术素材。所有美术修改均可即时生效，无需重新编译游戏，极大提升了开发过程中的迭代效率与创作灵活性。绘图器全面支持游戏内的各类设定，如地图块的碰撞判定、制定规则自动平铺地图快、角色素材的智能适配等。 遵守协议 此项目由楠瓜Moenen独立开发，采用MIT许可证，您可以使用此项目做几乎任何事，但必须在您的项目中标注我的名字，详见遵守协议。"
  },
  "docsCN/2-comply-with-the-license.html": {
    "href": "docsCN/2-comply-with-the-license.html",
    "title": "遵守协议 | AngeliA",
    "summary": "遵守协议 AngeliA 采用MIT许可证创建并分发，由楠瓜Moenen独立开发并保留所有权。您的项目可以使用不同的许可证，但必须同时保留并遵守原始许可证。您需要将以下内容包含在您项目的某处（项目根文件夹、制作人员名单、开场画面、关于界面等任何一处即可） AngeliA MIT 许可证全文： MIT License Copyright (c) 2025 AngeliA Engine by Moenen (MaYinan) Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE."
  },
  "docsCN/3-basic-concept/01-file-layout.html": {
    "href": "docsCN/3-basic-concept/01-file-layout.html",
    "title": "文件结构 | AngeliA",
    "summary": "文件结构 本章将为您简述 AngeliA 在硬盘中存储的所有文件的作用，分为引擎程序、游戏工程和用户存档三部分，更详细的解释请参考后续文档内容。 引擎程序 ① 引擎程序文件夹，运行引擎需要的全部文件都在这个文件夹里，移动此文件夹的位置不会影响引擎的使用； ② 引擎程序文件夹内部 \uD83D\uDCC1Library：AngeliA 引擎也是一款 AngeliA 游戏，就像所有的 AngeliA 游戏一样，Library 文件夹内的 dll 文件包含着此程序特有的功能，引擎提供的通用功能内嵌在 exe 文件里； \uD83D\uDCC1Universe：资源文件夹，包含着引擎程序需要的配置、美工、后台游戏启动器等； \uD83D\uDC04AngeliA.exe：引擎程序入口； \uD83D\uDCC4License.txt：使用引擎时需要遵守的软件许可证； \uD83D\uDCC4ReadMe.pdf：引擎简介，同 GitHub 项目首页； ③ 资源文件夹内部 \uD83D\uDCC1Built-In Projects：引擎自带的游戏工程，用于更好的学习引擎的使用方法。这些工程会在第一次打开引擎时自动加入到工程列表中，删除这些文件不会影响引擎的功能； \uD83D\uDCC1dotnet：由微软团队开发的dotnet SDK，用于将用户编写的 C# 代码编译为 dll 文件以供引擎运行使用； \uD83D\uDCC1Fonts：引擎本身UI所用的字体文件； \uD83D\uDCC1Language：引擎本身UI所用的多语言支持文件，您可以自行修改其内容以支持更多语言； \uD83D\uDCC2Map：此文件夹并未被引擎使用，AngeliA 框架无论项目是否使用地图都会自动创建 Map 文件夹； \uD83D\uDCC1Packages：引擎自带的拓展包，用户可根据自己开发的游戏类型选择需要的拓展包； \uD83D\uDCC1ProjectTemplate：新工程模板，您可以修改里面的文件来自定义新建工程的内容； \uD83D\uDCC1Runtime：让引擎在后台进程运行用户开发的游戏，并使用共享原生内存来传递输入与输出的信息； \uD83D\uDCC1Sheet：引擎本身UI所用的美术资源； \uD83D\uDCC1Theme：引擎的额外主题皮肤； \uD83D\uDCC4Info.json：引擎作为 AngeliA 游戏的项目配置； 游戏工程 ① 用户开发的游戏工程文件夹 ② 工程文件夹内部 \uD83D\uDCC1Build：存放用户编译生成的dll文件； \uD83D\uDCC1Entry：此工程的入口，仅供 IDE 运行游戏时使用； \uD83D\uDCC1lib：存放工程引用的 AngeliA 框架 dll 文件和拓展包 dll 文件； \uD83D\uDCC1obj：由 .net 框架生成； \uD83D\uDCC1src：存放用户编写的代码文件； \uD83D\uDCC1Universe：此工程的资源文件夹（详见③）； \uD83D\uDDBC️Icon.ico：工程的图标文件，是引擎内部显示的图标，也是最终发布出的 exe 文件所使用的图标； \uD83D\uDDBC️Icon.png：图标文件的 png 版本，未被引擎使用，删除该文件不影响引擎功能； \uD83D\uDCCB*.csproj：工程对应的 C# 工程文件； \uD83D\uDCCB*.sln：工程对应的 C# 解决方案； ③ 资源文件夹内部 \uD83D\uDCC1Audio：存放工程所需的音乐音效文件，使用 Universe.BuiltIn.MusicRoot和 Universe.BuiltIn.SoundRoot来获取此文件夹的路径； \uD83D\uDCC1Language：存放支持多语言所需的文本文件，使用 Universe.BuiltIn.LanguageRoot 来获取此文件夹的路径； \uD83D\uDCC1Sheet：存放工程的美工文件，使用 Universe.BuiltIn.SheetRoot 来获取此文件夹的路径； \uD83D\uDCC1Fonts：存放工程的字体文件，使用 Universe.BuiltIn.FontRoot 来获取此文件夹的路径； \uD83D\uDCC1Meta：存放由用户自定义的文本信息，使用 Universe.BuiltIn.UniverseMetaRoot 来获取此文件夹的路径； \uD83D\uDCC1Map：存放工程自带的地图文件，这里的地图文件不会被玩家修改。使用 Universe.BuiltIn.BuiltInMapRoot 来获取此文件夹的路径； \uD83D\uDCC4Info.json：工程的配置设置，包含如工程名，开发者名，工程版本等内容。使用 Universe.BuiltInInfo 来获取此文件的内容； 用户存档 ① 存档根目录，一个 AngeliA 工程由用户生成的所有存档内容都保存在这个文件夹里。，使用 Universe.SavingRoot 来获取这个文件夹的路径； ② 存档根目录内部 \uD83D\uDCC1Slot 0：第0号存档槽位，用户可创建并选择存档槽位，新的槽位将命名为 “Slot 1”、“Slot 2” 等。使用 Universe.SlotRoot 来获取当前选择的槽位文件夹路径； \uD83D\uDCC4CurrentSlot.txt：当前选择的存档槽位编号，使用 Universe.CurrentSavingSlot来获取当前选择的存档编号； \uD83D\uDCC4Saving.txt：全局设置存档内容，所有存档槽位共享这里的内容，使用 Saving 类时SavingLocation.Global 用于定义全局存档信息； ③ 存档槽位内部 \uD83D\uDCC1Meta：用户自定义的存档内容，使用 Universe.SlotMetaRoot 来获取此文件夹路径； \uD83D\uDCC1User Map：存放玩家游玩过的关卡文件，玩家对关卡的修改将保存在这些文件里，使用 Universe.SlotUserMapRoot 来获取此文件夹路径； ④ 信息文件夹内部 \uD83D\uDCC1Character Attack：存放角色的攻击相关的配置信息； \uD83D\uDCC1Character Rendering：存放角色渲染相关的配置信息； \uD83D\uDCC1Inventory：存放物品栏内的物品信息，包含角色的装备、指定位置的宝箱里的物品等； \uD83D\uDCC1MiniGame：迷你游戏的奖励信息； \uD83D\uDCC1Screenshot：游戏内部的截图功能，使用渲染Cell保存信息，使用 CellScreenshotSystem.RequireTakeScreenshot(yourGlobalRange); 来对游戏进行截图； \uD83D\uDCD1LoadedBackgroundTrigger：用于保存电路系统激活的后台触发器位置，详见 CircuitSystem 类； \uD83D\uDCC4Saving.txt：槽位内部存档内容，使用 SavingLocation.Local 来把存档内容存入此文件中。当玩家更换槽位后，这里的存档信息将不会出现在新的槽位里； \uD83D\uDCD1UnlockedItem：玩家解锁过的物品ID； \uD83D\uDCD1UnlockedPlayers：玩家解锁过的可控角色ID；"
  },
  "docsCN/3-basic-concept/02-engine-window.html": {
    "href": "docsCN/3-basic-concept/02-engine-window.html",
    "title": "引擎窗口 | AngeliA",
    "summary": "引擎窗口 本章将简要介绍 AngeliA 引擎中各个编辑器窗口的功能。在打开游戏工程后，您可以通过左侧边栏选择任意一个编辑器窗口以使用其提供的功能。引擎仅支持同时打开一个编辑器窗口，所有可用的编辑器窗口均列于左侧边栏。有关各窗口更详细的使用说明，请参阅后续章节。 游戏窗口 该窗口用于编辑关卡并试玩用户开发的游戏。要在游戏窗口中成功显示游戏内容，项目须做到无任何编译错误。打开游戏窗口后，右侧将出现专属工具栏，提供如逐帧调试、显示碰撞体、鼠标拖拽移动实体等实用功能。 美工编辑器 该窗口用于管理和创作当前游戏所需的像素图块。游戏中的几乎所有画面元素——无论是一块树桩、角色的头部，还是一节梯子——都是通过图块渲染的。窗口左侧是用户自定义的图集列表，便于对图块进行分类管理；中间的主区域用于绘制和管理具体图块，支持创建新图块、在图块中绘制、重命名图块，或为其设置自动平铺规则等操作。所有修改在保存后将即时应用于游戏，无需重新编译游戏。 多语言 该窗口用于以多种语言填写游戏所需的文字 UI 内容。您可以自定义游戏所支持的语言，并手动填写对应的翻译文本。游戏代码将通过窗口左侧第一列的 Key 值，查找并获取对应语言的翻译内容，从而实现多语言支持。使用 Language.Get(ange_hash_of_key);来获取用户选择的语言所对应的文本。 日志输出 该窗口显示游戏输出的文本内容、游戏运行时抛出的异常与游戏的编译错误。使用 Debug.Log(your_content); 来输出一行文本到日志窗口。 工程信息 该窗口用于调整当前工程的配置信息，例如工程名称、开发者名称、版本号等。所有设置将保存在游戏工程文件夹中，仅对当前打开的工程生效。窗口上方的按钮可用于重新编译游戏，或将其打包发布为最终的游戏成品。 拓展包 该窗口用于将指定的拓展包加载到游戏中或从游戏中移除。您也可以将当前游戏导出为拓展包，以便在其他项目中复用和共享。 引擎设置 该窗口用于调整与引擎程序本身相关的设置，例如是否在启动时自动打开上次使用的工程、引擎界面的显示语言，以及各项功能的快捷键配置等。这些设置仅影响引擎的使用体验，不会对任何游戏工程的内容产生影响。"
  },
  "docsCN/3-basic-concept/03-open-world-sandbox.html": {
    "href": "docsCN/3-basic-concept/03-open-world-sandbox.html",
    "title": "开放世界沙盒 | AngeliA",
    "summary": "开放世界沙盒 本章将为您简要介绍地图关卡相关的内容，更详细的使用说明，请参阅后续章节。 地图逻辑 引擎能够将多个地图无缝拼接，并流畅地呈现给玩家，营造出开放世界的体验。仅有玩家视野范围内的地图块会被渲染，进入画面的实体会被动态加载，而离开画面的实体则会被自动卸载。 各类地图块的功能如下： 背景块：仅用于视觉展示，不参与碰撞计算。 关卡块：默认具有碰撞效果。通过添加“单向板”标签，可设置为仅在特定方向上阻挡实体通过。 实体块：用于加载包含用户自定义逻辑的实例，通常代表具有行为的游戏对象。 辅助块：仅存在于后台数据中，不参与渲染，也不产生交互，用于标记或内部逻辑用途。 地图层 玩家可使用门或传送门前往相邻的地图层（如下图），引擎会在游戏进行时显示相邻的后置层。使用 TeleportTask.TeleportFromDoor 方法来传送玩家角色。 地图文件 地图文件格式为 ibb 意为 int byte byte，每个ibb文件储存着 128 × 128 (块) 尺寸的地图，文件名为对应正方形区域的左下角的 x_y_z 坐标。文件内容为 int, byte, byte 为一组所串成的列表（例如 7126723, 0, 0, -467174, 1, 0, 892135, 2, 1,...），其中 int 为块名称的AngeHash ，第一个 byte 为块在地图内的本地 x 坐标，第二个 byte 为 y 坐标。当坐标超过 127 时，需将数值减去 128 得到真实数据。当 x<128 y<128 时，块为实体类型；当 x<128 y≥128 时，块为辅助类型；当 x≥128 y<128 时，块为关卡类型；当 x≥128 y≥128 时，块为背景类型；"
  },
  "docsCN/3-basic-concept/04-pixel-artwork.html": {
    "href": "docsCN/3-basic-concept/04-pixel-artwork.html",
    "title": "像素美工 | AngeliA",
    "summary": "像素美工 本章将简要介绍引擎内置的美工编辑器。该编辑器所编辑的数据来源于当前工程文件夹下的 Universe\\Sheet\\Game Sheet.sheet 文件。该文件是 AngeliA 专用格式的无损压缩二进制文件，用于保存像素风格的美术资源及其所有附加信息，例如图块的标签、边框等内容。 美工编辑器主要分为这几个部分：左侧的图集列表、中间的主编辑区、上方的工具栏、右侧的绘图工具。 图块与图集 图集由用户自行创建和修改，多个图集可归类至图集文件夹中，便于统一管理。图集分为三种类型：普通、关卡 和 背景。其中，关卡类图集中的图块将被引擎识别为“可用于地图的关卡块”，背景类图集同理。要更改图集类型，只需在图集列表中右键点击目标图集，并在弹出菜单中选择所需类型。 主编辑区用于显示当前图集中的全部图块。您可以在右侧工具栏中选择“图块工具”，通过左键点击并拖动来选择一个或多个图块。选中图块后，上方工具栏将切换为如下所示的界面： ① 图块名称： 图块名称必须唯一，不能与同一图集或其他图集中的图块重名。当同时选中多个图块时，输入框内将显示 *，此时仍可编辑图块名称。系统会自动将图块依次命名为“名称 0”、“名称 1”、“名称 2”……，这些图块将被视为一个图块组，可用于帧动画、自动平铺等功能。 ② 图块尺寸： 以像素为单位，显示并可编辑图块的宽高。 ③ 图块边框： 从左至右依次为左、右、下、上边框。该设置用于 9-Slice 渲染图块，也可用于为关卡块指定更小的碰撞区域。 ④ 图块枢纽（Pivot）： 指定图块的对齐参考点。在游戏中以点位渲染图块时，该点将与代码指定的位置对齐。修改关卡块或背景块的枢纽会影响地图中图块的渲染位置。 ⑤ 图块的 Z 位置： 用于确定图块的渲染遮挡顺序。该值可在游戏代码中被覆盖。 ⑥ 动画持续时间： 以帧为单位，设置图块的动画帧持续时间。 ⑦ 通用工具栏（从左至右）： 触发器（Trigger）： 将选中的图块标记为触发器。触发器不会与实体发生碰撞，但仍会被加载进物理系统，可用于触发特定的游戏逻辑，例如触碰时为角色回复生命、定义一个可被检测的范围等。 标签（Tag）： 为选中图块添加逻辑标签，详见 枚举Tag 自动平铺规则： 设置图块在关卡编辑器中的自动平铺行为（如下图）。引擎会按图块组顺序逐一匹配规则，若当前地图内容符合某条规则，即使用对应图块绘制。下图的规则为：左右相邻块需与当前图块 ID 相同，上下相邻块需 ID 不同，斜向块不参与判断（系统支持设置斜向规则） 删除选中图块（快捷键 Del） 输出图块信息（仅在引擎 Debug 模式下可用） ⑧ 内容转换工具栏（从左至右）： 顺时针旋转图块 逆时针旋转图块 水平翻转图块 垂直翻转图块 一键裁剪图块四周空白区域 绘图 编辑器仅允许在图块内进行绘图。选中绘图工具后，在图块区域内按住左键并拖动鼠标即可绘制像素，右键点击则可吸取像素颜色。 绘图工具自上而下依次为： 矩形工具：按住 Shift 键绘制正方形，按住 Alt 键绘制空心矩形。 椭圆工具：按住 Shift 键绘制正圆，按住 Alt 键绘制空心圆。 直线工具：拖拽鼠标绘制直线。 油漆桶工具：填充图块内所有相邻且颜色相同的区域；拖拽可填充线性渐变；按住 Ctrl 点击可替换图块中所有相同颜色的像素（不要求相邻）。 像素选择工具：用于选中像素并进行移动、删除或复制操作，支持跨多个图块进行选择。 图块工具：用于选择、复制、删除图块，或修改图块的属性信息。"
  },
  "docsCN/3-basic-concept/05-code.html": {
    "href": "docsCN/3-basic-concept/05-code.html",
    "title": "代码 | AngeliA",
    "summary": "代码 AngeliA 工程本质上是一个 C# 工程，推荐使用 Visual Studio 或 Visual Studio Code 来编写代码。您可以根据需要修改 .csproj 文件以自定义工程配置，引擎不会对该文件进行修改。建议将您编写的所有代码放置于 src 文件夹中。如果您希望在项目中添加额外的文件夹，请将其置于 Universe 文件夹内。您可以通过 Universe.BuiltIn.UniverseRoot 获取该文件夹的路径。 静态事件 为工程内的任意类的一个静态函数添加 [OnGameInitialize] 标签后，这个函数会在游戏初始化时被调用，[OnGameUpdate] 则会让函数每帧都被调用一次，全部静态事件标签请看 速查表 章节。 using AngeliA; namespace Test; public static class Test { [OnGameInitialize] internal static void OnGameInitialize () { Debug.Log(\"Game Init\"); } [OnGameUpdate] internal static void OnGameUpdate () { Debug.Log(\"Game Update\", Game.GlobalFrame); } } 运行结果 Game Init Game Update 0 Game Update 1 Game Update 2 Game Update 3 ... 渲染图块 以下代码会在画面正中间绘制一个系统自带的 Entity 图标，绘制内容不会保留到下一帧，所以需要每帧都进行绘制。 using AngeliA; namespace Test; public static class Test { private static readonly int SpriteID = \"Icon.Entity\".AngeHash(); [OnGameUpdate] internal static void OnGameUpdate () { int x = Renderer.CameraRect.CenterX(); int y = Renderer.CameraRect.CenterY(); Renderer.Draw(SpriteID, new IRect(x, y, 512, 512)); } } 运行结果（裁剪后画面） 载入实体 以下代码会在鼠标点击时载入一个测试实体，实体在载入后将留在舞台上，直到移出画面范围外才会被自动卸载，您也可以使用 entity.Active = false; 来手动卸载实体。 using AngeliA; namespace Test; public class TestRigidbody : Rigidbody { // Cache the Type ID for Spawn the Entity public static readonly int TYPE_ID = typeof(TestRigidbody).AngeHash(); public override int PhysicalLayer => PhysicsLayer.ENVIRONMENT; [OnGameUpdate] internal static void OnGameUpdate () { // Handle Mouse Click if (Input.MouseLeftButtonDown) { var mousePos = Input.MouseGlobalPosition; Stage.SpawnEntity(TYPE_ID, mousePos.x, mousePos.y); } } public override void LateUpdate () { base.LateUpdate(); // Render the Entity Renderer.Draw(BuiltInSprite.ICON_ENTITY, base.Rect); } } 运行结果（裁剪后画面，加速播放）"
  },
  "docsCN/3-basic-concept/06-entity.html": {
    "href": "docsCN/3-basic-concept/06-entity.html",
    "title": "实体 | AngeliA",
    "summary": "实体 实体（Entity）是 AngeliA 游戏逻辑的核心载体，在地图中，大多数可与玩家交互的物体均以实体形式存在，例如木箱、角色、子弹等。您可以使用实体调试器来测试舞台上的实体。 回调函数 实体类通过回调函数接受来自系统的事件，您可以重载这些函数来接收这些事件，所有可用的回调函数分别为： OnActivated：当实体被载入时调用一次。 OnInactivated：当实体被卸载时调用一次。 FirstUpdate：第一轮刷新，用于填装物理碰撞器。 BeforeUpdate：第二轮刷新，用于处理物理运动逻辑。（此时所有物体上的实体都已完成第一轮刷新） Update：第三轮刷新，用于处理物理运动和物体特有的逻辑。 LateUpdate：最后一轮刷新，用于渲染实体。"
  },
  "docsCN/3-basic-concept/07-physics.html": {
    "href": "docsCN/3-basic-concept/07-physics.html",
    "title": "物理 | AngeliA",
    "summary": "物理 AngeliA 引擎内置了一套适用于复古风格游戏的高效物理系统，该系统仅支持矩形碰撞器，并不考虑旋转角度，因而在保证功能的同时拥有极高的运行效率。 在每一帧游戏开始刷新时，实体会在 FirstUpdate 函数中将自身的碰撞器信息注册到物理系统中。当舞台上的所有实体都完成注册后，物理系统会在 BeforeUpdate 和 Update 函数中处理碰撞与运动逻辑。 值得注意的是，当前帧的物理信息不会保留到下一帧，每一帧的数据都会在刷新开始时重新填充注册，并在当前帧内完成全部处理，确保物理行为始终与游戏状态同步。 执行运动 以下代码将在鼠标点击时加载一个测试实体。该实体会在物理系统的控制下持续向右匀速移动，并在运动过程中自动检测与其他物体的碰撞。当发生碰撞时，实体将移动至碰撞物体的边缘位置。 using AngeliA; namespace Test; public class TestRigidbody : Rigidbody { // Cache the Type ID for Spawn the Entity public static readonly int TYPE_ID = typeof(TestRigidbody).AngeHash(); [OnGameUpdate] internal static void OnGameUpdate () { // Handle Mouse Click if (Input.MouseLeftButtonDown) { var mousePos = Input.MouseGlobalPosition; Stage.SpawnEntity(TYPE_ID, mousePos.x, mousePos.y); } } public override void BeforeUpdate () { base.BeforeUpdate(); // Move the Entity to right base.XY = Physics.Move(base.CollisionMask, base.XY, 12, 0, base.Size, this); } public override void LateUpdate () { // Render the Entity with Built-In Icon base.LateUpdate(); Renderer.Draw(BuiltInSprite.ICON_ENTITY, base.Rect); } } 运行结果（裁剪后画面，加速播放）"
  },
  "docsCN/3-basic-concept/08-rendering.html": {
    "href": "docsCN/3-basic-concept/08-rendering.html",
    "title": "渲染 | AngeliA",
    "summary": "渲染"
  },
  "docsCN/3-basic-concept/09-input.html": {
    "href": "docsCN/3-basic-concept/09-input.html",
    "title": "输入 | AngeliA",
    "summary": "输入"
  },
  "docsCN/3-basic-concept/10-saving.html": {
    "href": "docsCN/3-basic-concept/10-saving.html",
    "title": "存档 | AngeliA",
    "summary": "存档"
  },
  "docsCN/3-basic-concept/11-character-movement.html": {
    "href": "docsCN/3-basic-concept/11-character-movement.html",
    "title": "角色运动 | AngeliA",
    "summary": "角色运动"
  },
  "docsCN/3-basic-concept/12-character-animation.html": {
    "href": "docsCN/3-basic-concept/12-character-animation.html",
    "title": "角色动画 | AngeliA",
    "summary": "角色动画"
  },
  "docsCN/3-basic-concept/13-inventory.html": {
    "href": "docsCN/3-basic-concept/13-inventory.html",
    "title": "物品栏 | AngeliA",
    "summary": "物品栏"
  },
  "docsCN/3-basic-concept/14-language.html": {
    "href": "docsCN/3-basic-concept/14-language.html",
    "title": "多语言 | AngeliA",
    "summary": "多语言"
  },
  "docsCN/4-cheat-sheet.html": {
    "href": "docsCN/4-cheat-sheet.html",
    "title": "速查表 | AngeliA",
    "summary": "速查表 所有静态事件 OnGameInitialize OnGameInitializeLater BeforeSavingSlotChanged OnSavingSlotChanged OnGameUpdate OnGameUpdateLater OnGameUpdatePauseless OnGameRestart OnGameTryingToQuit OnGameQuitting OnGameFocused OnGameLostFocus OnWindowSizeChanged OnRemoteSettingChanged_IntID_IntData OnFileDropped_StringPath OnMainSheetReload OnViewZChanged BeforeLayerFrameUpdate_IntLayer AfterLayerFrameUpdate_IntLayer BeforeFirstUpdate BeforeBeforeUpdate BeforeUpdateUpdate BeforeLateUpdate AfterLateUpdate BeforeLevelRendered AfterLevelRendered OnWorldCreatedBySquad_World OnWorldLoadedBySquad_World OnWorldSavedByMapEditor_World OnMapEditorModeChange_Mode OnLanguageChanged CheatCode OnCheatPerformed_StringCode OnItemCollected_Entity_Int2Pos_IntItemID_IntItemCount OnItemLost_Character_IntItemID OnItemError_Entity_Int2Pos_IntIconID OnItemDamage_Character_IntItemBefore_IntItemAfter OnItemUnlocked_IntItemID OnCharacterFootStepped_Entity OnCharacterSleeping_Entity OnCharacterJump_Entity OnCharacterPound_Entity OnCharacterFly_Entity OnCharacterSlideStepped_Entity OnCharacterPassOut_Entity OnCharacterTeleport_Entity OnCharacterCrash_Entity OnObjectBreak_IntSpriteID_IRect OnObjectFreeFall_IntSpriteID_Int2Pos_IntRot_BoolFlip_Int2Velocity_IntRotSpeed_IntGravity OnBlockPicked_IntSpriteID_IRect OnFallIntoWater_Rigidbody_Entity OnCameOutOfWater_Rigidbody_Entity OnDealDamage_Damage_IDamageReceiver OnBulletHitEnvironment_Bullet OnTransferArrived_IntEntityID_Int3UnitPos_ObjectData OnTransferPass_Int3UnitPos_ObjectData CircuitOperate_Int3UnitPos_IntStamp_Direction5From OnCircuitWireActived_Int3UnitPos"
  },
  "index.html": {
    "href": "index.html",
    "title": "AngeliA Engine | AngeliA",
    "summary": "AngeliA Engine A 2D game engine focused on open-world platformer games, built with C#. Features Seamless Playtesting: The built-in map editor is specifically designed for platformer games, allowing you to playtest while editing the map. The engine supports open-world-style maps without boundaries. Integrated Game Window: Run your game directly within the engine. No need to launch a separate window every time. Built-in Pixel Art Editor: A dedicated pixel art editor designed for creating and managing sprite sheets. Supports importing assets from Aseprite. PC-Only: Currently, the engine and the games it produces are PC only. The implementation is based on Raylib. More platforms will be support in the future. Download & Setup Download the latest version from the Release section, extract the file and you're ready to go! Community & Support Discord AngeliA Official YouTube Moenen BiliBili 楠瓜Moenen Documentation & API Reference Documentation | API Reference Documentations are still under construction... \uD83C\uDFD7️ Screenshots Contributors More features and improvements are coming soon. Stay tuned :)"
  }
}